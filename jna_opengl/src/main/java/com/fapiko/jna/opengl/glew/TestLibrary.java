package com.fapiko.jna.opengl.glew;

import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalByte;
import com.sun.jna.Callback;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;
import com.sun.jna.win32.StdCallLibrary;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
/**
 * JNA Wrapper for library <b>test</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface TestLibrary extends StdCallLibrary {
    public static final String JNA_LIBRARY_NAME = "/glew/1.10.0/win32/bin/Release/x64/glew32.dll";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(TestLibrary.JNA_LIBRARY_NAME);
    public static final TestLibrary INSTANCE = (TestLibrary)Native.loadLibrary(TestLibrary.JNA_LIBRARY_NAME, TestLibrary.class);
    public static final int GL_DST_COLOR = (int)0x0306;
    public static final int GL_CLIENT_STORAGE_BIT = (int)0x0200;
    public static final int GL_CURRENT_VERTEX_ATTRIB_ARB = (int)0x8626;
    public static final int GL_MATRIX2_ARB = (int)0x88C2;
    public static final int GL_IGNORE_BORDER = (int)0x8150;
    public static final int GL_FLOAT_R_NV = (int)0x8880;
    public static final int GL_CULL_FACE_MODE = (int)0x0B45;
    public static final int GL_VERTEX_SHADER_BINDING_EXT = (int)0x8781;
    public static final int GL_MIN_MAP_BUFFER_ALIGNMENT = (int)0x90BC;
    public static final int GL_CONSTANT_ALPHA = (int)0x8003;
    public static final int GL_MAX_TESS_GEN_LEVEL = (int)0x8E7E;
    public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = (int)0x8C2D;
    public static final int GL_VERTEX_SHADER_LOCALS_EXT = (int)0x87D3;
    public static final int GL_BACK_LEFT = (int)0x0402;
    public static final int GL_LAST_VIDEO_CAPTURE_STATUS_NV = (int)0x9027;
    public static final int GL_YCBCR_MESA = (int)0x8757;
    public static final int GL_MATRIX3_NV = (int)0x8633;
    public static final int GL_TEXTURE_DEPTH_SIZE = (int)0x884A;
    public static final int GL_ARB_texture_env_dot3 = (int)1;
    public static final int GL_R1UI_V3F_SUN = (int)0x85C4;
    public static final int GL_TEXTURE_IMMUTABLE_LEVELS = (int)0x82DF;
    public static final int GL_CON_6_ATI = (int)0x8947;
    public static final int GL_HISTOGRAM_FORMAT_EXT = (int)0x8027;
    public static final int GL_PIXEL_MAP_S_TO_S = (int)0x0C71;
    public static final int GL_APPLE_specular_vector = (int)1;
    public static final int GL_EYE_PLANE = (int)0x2502;
    public static final int GL_MIRRORED_REPEAT_ARB = (int)0x8370;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = (int)0x8E5F;
    public static final int GL_CLAMP_TO_BORDER = (int)0x812D;
    public static final int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = (int)0x86ED;
    public static final int GL_PROXY_TEXTURE_2D_EXT = (int)0x8064;
    public static final int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = (int)0x8971;
    public static final int GL_BLEND_SRC_RGB = (int)0x80C9;
    public static final int GL_UNIFORM_OFFSET = (int)0x8A3B;
    public static final int GL_GEOMETRY_OUTPUT_TYPE_ARB = (int)0x8DDC;
    public static final int GL_MATRIX12_ARB = (int)0x88CC;
    public static final int GL_MAX_FRAMEBUFFER_SAMPLES = (int)0x9318;
    public static final int GL_MAP2_INDEX = (int)0x0DB1;
    public static final int GL_LAST_VERTEX_CONVENTION_EXT = (int)0x8E4E;
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = (int)0x88FD;
    public static final int GL_ARB_explicit_attrib_location = (int)1;
    public static final int GL_YCBYCR8_422_NV = (int)0x9031;
    public static final int GL_UTF16_NV = (int)0x909B;
    public static final int GL_SRC_NV = (int)0x9286;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = (int)0x889F;
    public static final int GL_T4F_C4F_N3F_V4F = (int)0x2A2D;
    public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = (int)0x8C2B;
    public static final int GL_OBJECT_LINK_STATUS_ARB = (int)0x8B82;
    public static final int GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = (int)0x90D0;
    public static final int GL_RGBA2_EXT = (int)0x8055;
    public static final int GL_SLUMINANCE_EXT = (int)0x8C46;
    public static final int GL_RGBA4_S3TC = (int)0x83A3;
    public static final int GL_TRANSPOSE_TEXTURE_MATRIX_ARB = (int)0x84E5;
    public static final int GL_SAMPLES_PASSED = (int)0x8914;
    public static final int GL_TEXTURE_COMPARE_OPERATOR_SGIX = (int)0x819B;
    public static final int GL_LUMINANCE_FLOAT16_ATI = (int)0x881E;
    public static final int GL_SYNC_GPU_COMMANDS_COMPLETE = (int)0x9117;
    public static final int GL_LUMINANCE_ALPHA_FLOAT32_ATI = (int)0x8819;
    public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = (int)0x8E8E;
    public static final int GL_COMPRESSED_RGBA8_ETC2_EAC = (int)0x9278;
    public static final int GL_COLOR_INDEX4_EXT = (int)0x80E4;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = (int)0x8F9F;
    public static final int GL_OUTPUT_TEXTURE_COORD0_EXT = (int)0x879D;
    public static final int GL_INVARIANT_VALUE_EXT = (int)0x87EA;
    public static final int GL_AFFINE_2D_NV = (int)0x9092;
    public static final int GL_MAP1_VERTEX_ATTRIB11_4_NV = (int)0x866B;
    public static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = (int)0x8A03;
    public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = (int)0x84FE;
    public static final int GL_LUMINANCE_FLOAT16_APPLE = (int)0x881E;
    public static final int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = (int)0x8C27;
    public static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH = (int)0x80B3;
    public static final int GL_COLOR_ARRAY_POINTER = (int)0x8090;
    public static final int GL_NO_ERROR = (int)0;
    public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = (int)0x8E8F;
    public static final int GL_UNSIGNED_INT8_NV = (int)0x8FEC;
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = (int)0x88FF;
    public static final int GL_MAP_COLOR = (int)0x0D10;
    public static final int GL_NV_vertex_program2_option = (int)1;
    public static final int GL_COLOR_ARRAY_POINTER_EXT = (int)0x8090;
    public static final int GL_EXT_texture_shared_exponent = (int)1;
    public static final int GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = (int)103084;
    public static final int GL_GREEN_SCALE = (int)0x0D18;
    public static final int GL_INTERNALFORMAT_RED_SIZE = (int)0x8271;
    public static final int GL_ALPHA = (int)0x1906;
    public static final int GL_TEXTURE_COMPARE_MODE = (int)0x884C;
    public static final int GL_FONT_ASCENDER_BIT_NV = (int)0x00200000;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = (int)0x8CD6;
    public static final int GL_NV_evaluators = (int)1;
    public static final int GL_SGIX_shadow = (int)1;
    public static final int GL_COMPILE_STATUS = (int)0x8B81;
    public static final int GL_QUADRATIC_ATTENUATION = (int)0x1209;
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = (int)0x8DAD;
    public static final int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = (int)0x812E;
    public static final int GL_SOURCE1_RGB_EXT = (int)0x8581;
    public static final int GL_GUILTY_CONTEXT_RESET_ARB = (int)0x8253;
    public static final int GL_IMAGE_CLASS_4_X_32 = (int)0x82B9;
    public static final int GL_LINES_ADJACENCY_EXT = (int)0xA;
    public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = (int)0x889D;
    public static final int GL_OP_LOG_BASE_2_EXT = (int)0x8792;
    public static final int GL_OBJECT_POINT_SGIS = (int)0x81F5;
    public static final int GL_SGIX_vertex_preclip = (int)1;
    public static final int GL_ALPHA8I_EXT = (int)0x8D90;
    public static final int GL_SHADER_COMPILER = (int)0x8DFA;
    public static final int GL_BUFFER_USAGE_ARB = (int)0x8765;
    public static final int GL_EXT_texture_buffer_object = (int)1;
    public static final int GL_SOURCE2_RGB = (int)0x8582;
    public static final int GL_FOG_MODE = (int)0x0B65;
    public static final int GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = (int)0x8023;
    public static final int GL_CLIENT_PIXEL_STORE_BIT = (int)0x00000001;
    public static final int GL_POLYGON_OFFSET_LINE = (int)0x2A02;
    public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = (int)0x91BD;
    public static final int GL_PATH_DASH_OFFSET_NV = (int)0x907E;
    public static final int GL_POST_COLOR_MATRIX_GREEN_BIAS = (int)0x80B9;
    public static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = (int)0x87F1;
    public static final int GL_IMAGE_CLASS_4_X_16 = (int)0x82BC;
    public static final int GL_DRAW_BUFFER9_ARB = (int)0x882E;
    public static final int GL_GEOMETRY_SUBROUTINE = (int)0x92EB;
    public static final int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = (int)0x80B9;
    public static final int GL_REFLECTION_MAP = (int)0x8512;
    public static final int GL_SEPARABLE_2D_EXT = (int)0x8012;
    public static final int GL_MAP_INVALIDATE_RANGE_BIT = (int)0x0004;
    public static final int GL_TEXTURE_RENDERBUFFER_NV = (int)0x8E55;
    public static final int GL_SGIX_vertex_preclip_hint = (int)1;
    public static final int GL_CURRENT_VERTEX_EXT = (int)0x87E2;
    public static final int GL_PACK_ROW_LENGTH = (int)0x0D02;
    public static final int GL_MAX_DRAW_BUFFERS = (int)0x8824;
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = (int)0x8C83;
    public static final int GL_GREEN_INTEGER = (int)0x8D95;
    public static final int GL_TEXTURE_GREEN_TYPE = (int)0x8C11;
    public static final int GL_RENDERBUFFER_GREEN_SIZE_EXT = (int)0x8D51;
    public static final int GL_LUMINANCE_ALPHA_SNORM = (int)0x9012;
    public static final int GL_NUM_INSTRUCTIONS_TOTAL_ATI = (int)0x8972;
    public static final int GL_NV_parameter_buffer_object = (int)1;
    public static final int GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = (int)0x0F;
    public static final int GL_HSL_HUE_NV = (int)0x92AD;
    public static final int GL_COLOR = (int)0x1800;
    public static final int GL_COLOR_ARRAY = (int)0x8076;
    public static final int GL_INVERT_OVG_NV = (int)0x92B4;
    public static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB = (int)0x88B0;
    public static final int GL_DRAW_BUFFER9_ATI = (int)0x882E;
    public static final int GL_EXT_texture_mirror_clamp = (int)1;
    public static final int GL_SAMPLE_MASK_VALUE_SGIS = (int)0x80AA;
    public static final int GL_MAX_RED_SGIS = (int)0x85A7;
    public static final int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = (int)0x8092;
    public static final int GL_4X_BIT_ATI = (int)0x00000002;
    public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR = (int)0x93B0;
    public static final int GL_MAX_ALPHA_SGIS = (int)0x85AD;
    public static final int GL_STENCIL_BACK_FAIL_ATI = (int)0x8801;
    public static final int GL_NICEST = (int)0x1102;
    public static final int GL_TEXTURE_SHADER_NV = (int)0x86DE;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY = (int)0x900C;
    public static final int GL_NV_copy_image = (int)1;
    public static final int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = (int)0x845A;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = (int)0x8DD5;
    public static final int GL_SHADER_IMAGE_STORE = (int)0x82A5;
    public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = (int)0x8E8E;
    public static final int GL_OPERAND2_ALPHA = (int)0x859A;
    public static final int GL_IMAGE_CLASS_2_X_16 = (int)0x82BD;
    public static final int GL_AMD_vertex_shader_layer = (int)1;
    public static final int GL_RESAMPLE_DECIMATE_OML = (int)0x8989;
    public static final int GL_MAX_SAMPLES = (int)0x8D57;
    public static final int GL_QUERY_WAIT = (int)0x8E13;
    public static final int GL_RGB32UI_EXT = (int)0x8D71;
    public static final int GL_LOG_HTTP_REGAL = (int)0x9321;
    public static final int GL_RGBA8I_EXT = (int)0x8D8E;
    public static final long GL_ALL_SHADER_BITS = (long)0xFFFFFFFFL;
    public static final int GL_IMAGE_CLASS_2_X_32 = (int)0x82BA;
    public static final int GL_POLYGON_MODE = (int)0x0B40;
    public static final int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = (int)0x80B6;
    public static final int GL_CONVOLUTION_WIDTH_EXT = (int)0x8018;
    public static final int GL_IBM_static_data = (int)1;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = (int)0x8DA8;
    public static final int GL_IMAGE_COMPATIBILITY_CLASS = (int)0x82A8;
    public static final int GL_FIXED = (int)0x140C;
    public static final int GL_RGB9_E5 = (int)0x8C3D;
    public static final int GL_XOR = (int)0x1506;
    public static final int GL_INDEX_SHIFT = (int)0x0D12;
    public static final int GL_EXT_gpu_program_parameters = (int)1;
    public static final int GL_COMPRESSED_SRGB_ALPHA = (int)0x8C49;
    public static final int GL_EVAL_BIT = (int)0x00010000;
    public static final int GL_CG_FRAGMENT_SHADER_EXT = (int)0x890F;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = (int)0x910A;
    public static final int GL_LUMINANCE8_SNORM = (int)0x9015;
    public static final int GL_POLYGON_BIT = (int)0x00000008;
    public static final int GL_MAX_VERTEX_UNITS_ARB = (int)0x86A4;
    public static final int GL_LINE_WIDTH_GRANULARITY = (int)0x0B23;
    public static final int GL_OP_SUB_EXT = (int)0x8796;
    public static final int GL_MAP_TESSELLATION_NV = (int)0x86C2;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = (int)0x8210;
    public static final int GL_MAX_TRACK_MATRICES_NV = (int)0x862F;
    public static final int GL_EVAL_VERTEX_ATTRIB15_NV = (int)0x86D5;
    public static final int GL_NV_texture_expand_normal = (int)1;
    public static final int GL_MAP1_TEXTURE_COORD_1 = (int)0x0D93;
    public static final int GL_MAP1_TEXTURE_COORD_3 = (int)0x0D95;
    public static final int GL_MAP1_TEXTURE_COORD_2 = (int)0x0D94;
    public static final int GL_MAP1_TEXTURE_COORD_4 = (int)0x0D96;
    public static final int GL_LOG_INTERNAL_REGAL = (int)0x931E;
    public static final int GL_DRAW_BUFFER14_ATI = (int)0x8833;
    public static final int GL_SECONDARY_COLOR_ARRAY_EXT = (int)0x845E;
    public static final int GL_SAMPLER_2D_ARRAY_EXT = (int)0x8DC1;
    public static final int GL_VALIDATE_STATUS = (int)0x8B83;
    public static final int GL_BINORMAL_ARRAY_EXT = (int)0x843A;
    public static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = (int)0x90EB;
    public static final int GL_ARB_depth_buffer_float = (int)1;
    public static final int GL_SIGNED_HILO_NV = (int)0x86F9;
    public static final int GL_PROXY_COLOR_TABLE = (int)0x80D3;
    public static final int GL_SECONDARY_COLOR_NV = (int)0x852D;
    public static final int GL_EXT_index_material = (int)1;
    public static final int GL_CLAMP = (int)0x2900;
    public static final int GL_TRANSFORM_FEEDBACK_RECORD_NV = (int)0x8C86;
    public static final int GL_GENERIC_ATTRIB_NV = (int)0x8C7D;
    public static final int GL_DRAW_BUFFER14_ARB = (int)0x8833;
    public static final int GL_INTENSITY8_EXT = (int)0x804B;
    public static final int GL_RGB8I = (int)0x8D8F;
    public static final int GL_ARB_texture_env_combine = (int)1;
    public static final int GL_R1UI_N3F_V3F_SUN = (int)0x85C7;
    public static final int GL_SHADER_STORAGE_BUFFER_SIZE = (int)0x90D5;
    public static final int GL_NORMALIZE = (int)0x0BA1;
    public static final int GL_LUMINANCE8UI_EXT = (int)0x8D80;
    public static final int GL_MODELVIEW0_EXT = (int)0x1700;
    public static final int GL_MAGNITUDE_BIAS_NV = (int)0x8718;
    public static final int GL_CON_7_ATI = (int)0x8948;
    public static final int GL_COMBINER0_NV = (int)0x8550;
    public static final int GL_AUTO_NORMAL = (int)0x0D80;
    public static final int GL_TESS_GEN_POINT_MODE = (int)0x8E79;
    public static final int GL_ARB_get_program_binary = (int)1;
    public static final int GL_ATI_text_fragment_shader = (int)1;
    public static final int GL_VIEW_CLASS_S3TC_DXT1_RGB = (int)0x82CC;
    public static final int GL_DST_OVER_NV = (int)0x9289;
    public static final int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = (int)0x80BD;
    public static final int GL_R16UI = (int)0x8234;
    public static final int GL_VIEW_CLASS_96_BITS = (int)0x82C5;
    public static final int GL_ATI_element_array = (int)1;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = (int)0x8E24;
    public static final int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = (int)0x8E2E;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = (int)0x93DA;
    public static final int GL_VERTEX_STREAM4_ATI = (int)0x8771;
    public static final int GL_TEXTURE_ALPHA_SIZE = (int)0x805F;
    public static final int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = (int)0x902D;
    public static final int GL_PROGRAM_LENGTH_ARB = (int)0x8627;
    public static final int GL_INT16_NV = (int)0x8FE4;
    public static final int GL_AMD_shader_trinary_minmax = (int)1;
    public static final int GL_ELEMENT_ARRAY_ATI = (int)0x8768;
    public static final int GL_ARB_texture_rectangle = (int)1;
    public static final int GL_OP_MADD_EXT = (int)0x8788;
    public static final int GL_LINE_SMOOTH = (int)0x0B20;
    public static final int GL_OUT_OF_MEMORY = (int)0x0505;
    public static final int GL_FLOAT16_VEC4_NV = (int)0x8FFB;
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = (int)0x8622;
    public static final int GL_DEBUG_SOURCE_OTHER_ARB = (int)0x824B;
    public static final int GL_NEGATIVE_ONE_EXT = (int)0x87DF;
    public static final int GL_MAX_CONVOLUTION_WIDTH = (int)0x801A;
    public static final int GL_PROGRAM_SEPARABLE = (int)0x8258;
    public static final int GL_TEXTURE_RED_TYPE = (int)0x8C10;
    public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = (int)0x92D8;
    public static final int GL_UNSIGNED_INT_24_8 = (int)0x84FA;
    public static final int GL_FLOAT_RGBA16_NV = (int)0x888A;
    public static final int GL_TEXTURE_STACK_DEPTH = (int)0x0BA5;
    public static final int GL_QUERY_COUNTER_BITS = (int)0x8864;
    public static final int GL_TRANSLATE_3D_NV = (int)0x9091;
    public static final int GL_ARB_point_parameters = (int)1;
    public static final int GL_QUARTER_BIT_ATI = (int)0x00000010;
    public static final int GL_DEPTH_COMPONENTS = (int)0x8284;
    public static final int GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = (int)0x9344;
    public static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = (int)0x8F2A;
    public static final int GL_NORMAL_ARRAY_ADDRESS_NV = (int)0x8F22;
    public static final int GL_TESS_EVALUATION_SUBROUTINE = (int)0x92EA;
    public static final int GL_TOP_LEVEL_ARRAY_SIZE = (int)0x930C;
    public static final int GL_POLYGON_OFFSET_BIAS_EXT = (int)0x8039;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = (int)0x8F9F;
    public static final int GL_INT8_NV = (int)0x8FE0;
    public static final int GL_COMBINER3_NV = (int)0x8553;
    public static final int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = (int)0x00000002;
    public static final int GL_ASYNC_READ_PIXELS_SGIX = (int)0x835E;
    public static final int GL_ALLOW_DRAW_FRG_HINT_PGI = (int)107024;
    public static final int GL_TRANSFORM_FEEDBACK_NV = (int)0x8E22;
    public static final int GL_UNSIGNED_INT_IMAGE_CUBE = (int)0x9066;
    public static final int GL_SGIS_texture_filter4 = (int)1;
    public static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = (int)0x00000004;
    public static final int GL_ACTIVE_STENCIL_FACE_EXT = (int)0x8911;
    public static final int GL_DEBUG_SOURCE_APPLICATION_ARB = (int)0x824A;
    public static final int GL_SLUMINANCE8_ALPHA8 = (int)0x8C45;
    public static final int GL_MODELVIEW1_STACK_DEPTH_EXT = (int)0x8502;
    public static final int GL_FONT_Y_MIN_BOUNDS_BIT_NV = (int)0x00020000;
    public static final int GL_BGR_EXT = (int)0x80E0;
    public static final int GL_RED_MAX_CLAMP_INGR = (int)0x8564;
    public static final int GL_FRAGMENT_TEXTURE = (int)0x829F;
    public static final int GL_UNSIGNED_INVERT_NV = (int)0x8537;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = (int)0x8C8B;
    public static final int GL_TEXTURE_MAX_CLAMP_T_SGIX = (int)0x836A;
    public static final int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = (int)0x903C;
    public static final int GL_FLOAT_RGBA_MODE_NV = (int)0x888E;
    public static final int GL_PIXEL_COUNT_AVAILABLE_NV = (int)0x8867;
    public static final int GL_TEXTURE_ENV_MODE = (int)0x2200;
    public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = (int)0x8E7F;
    public static final int GL_VERTEX_ATTRIB_ARRAY11_NV = (int)0x865B;
    public static final int GL_RGBA4 = (int)0x8056;
    public static final int GL_RGBA2 = (int)0x8055;
    public static final int GL_RGBA8 = (int)0x8058;
    public static final int GL_INTENSITY_FLOAT32_ATI = (int)0x8817;
    public static final int GL_RETURN = (int)0x0102;
    public static final int GL_EXT_pixel_buffer_object = (int)1;
    public static final int GL_ADD_ATI = (int)0x8963;
    public static final int GL_DRAW_FRAMEBUFFER_ANGLE = (int)0x8CA9;
    public static final int GL_BLEND_EQUATION_ALPHA = (int)0x883D;
    public static final int GL_IMAGE_CLASS_11_11_10 = (int)0x82C2;
    public static final int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = (int)0x903B;
    public static final int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = (int)0x8847;
    public static final int GL_DEPTH_SCALE = (int)0x0D1E;
    public static final int GL_SEPARATE_ATTRIBS_NV = (int)0x8C8D;
    public static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = (int)0x00000020;
    public static final int GL_UNIFORM_SIZE = (int)0x8A38;
    public static final int GL_OP_RECIP_SQRT_EXT = (int)0x8795;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = (int)0x8D56;
    public static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = (int)0x80BB;
    public static final int GL_FRAGMENT_SUBROUTINE_UNIFORM = (int)0x92F2;
    public static final int GL_FUNC_ADD_EXT = (int)0x8006;
    public static final int GL_SGIX_clipmap = (int)1;
    public static final int GL_COLOR3_BIT_PGI = (int)0x00010000;
    public static final int GL_LUMINANCE_ALPHA = (int)0x190A;
    public static final int GL_MAX_ASYNC_READ_PIXELS_SGIX = (int)0x8361;
    public static final int GL_ATI_vertex_streams = (int)1;
    public static final int GL_BOUNDING_BOX_NV = (int)0x908D;
    public static final int GL_APPLE_fence = (int)1;
    public static final int GL_UNIFORM_BLOCK_BINDING = (int)0x8A3F;
    public static final int GL_READ_PIXEL_DATA_RANGE_NV = (int)0x8879;
    public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = (int)0x8E4C;
    public static final int GL_PIXEL_UNPACK_BUFFER_ARB = (int)0x88EC;
    public static final int GL_FRAMEBUFFER_COMPLETE = (int)0x8CD5;
    public static final int GL_ARB_internalformat_query2 = (int)1;
    public static final int GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = (int)0x90D1;
    public static final int GL_PALETTE4_R5_G6_B5_OES = (int)0x8B92;
    public static final int GL_PIXEL_MAP_I_TO_A_SIZE = (int)0x0CB5;
    public static final int GL_R16I = (int)0x8233;
    public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = (int)0x92D5;
    public static final int GL_R16F = (int)0x822D;
    public static final int GL_NUM_SPARSE_LEVELS_ARB = (int)0x91AA;
    public static final int GL_TEXTURE14_ARB = (int)0x84CE;
    public static final int GL_TRIANGLES_ADJACENCY_ARB = (int)0xC;
    public static final int GL_TEXTURE_BLUE_SIZE_EXT = (int)0x805E;
    public static final int GL_EXT_separate_shader_objects = (int)1;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = (int)0x82AD;
    public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = (int)0x851E;
    public static final int GL_NV_texgen_reflection = (int)1;
    public static final int GL_RENDERBUFFER_DEPTH_SIZE = (int)0x8D54;
    public static final int GL_IMAGE_CLASS_2_X_8 = (int)0x82C0;
    public static final int GL_TEXTURE_LOD_BIAS = (int)0x8501;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP = (int)0x8514;
    public static final int GL_PROXY_TEXTURE_1D_ARRAY = (int)0x8C19;
    public static final int GL_INDEX_ARRAY_BUFFER_BINDING = (int)0x8899;
    public static final int GL_VERTEX_ARRAY_TYPE = (int)0x807B;
    public static final int GL_WRITE_DISCARD_NV = (int)0x88BE;
    public static final int GL_DEBUG_CALLBACK_USER_PARAM = (int)0x8245;
    public static final int GL_TEXTURE_BINDING_BUFFER_EXT = (int)0x8C2C;
    public static final int GL_TEXTURE_GATHER_SHADOW = (int)0x82A3;
    public static final int GL_UNPACK_LSB_FIRST = (int)0x0CF1;
    public static final int GL_TEXTURE_RECTANGLE_NV = (int)0x84F5;
    public static final int GL_EXTENSIONS = (int)0x1F03;
    public static final int GL_SECONDARY_INTERPOLATOR_ATI = (int)0x896D;
    public static final int GL_BOOL_ARB = (int)0x8B56;
    public static final int GL_ARRAY_BUFFER_BINDING = (int)0x8894;
    public static final int GL_MODELVIEW24_ARB = (int)0x8738;
    public static final int GL_MAP2_GRID_SEGMENTS = (int)0x0DD3;
    public static final int GL_PREVIOUS_TEXTURE_INPUT_NV = (int)0x86E4;
    public static final int GL_MOVE_TO_CONTINUES_NV = (int)0x90B6;
    public static final int GL_R16_SNORM = (int)0x8F98;
    public static final int GL_MINMAX_EXT = (int)0x802E;
    public static final int GL_NV_conditional_render = (int)1;
    public static final int GL_RGBA16_SIGNED_SGIX = (int)0x85E7;
    public static final int GL_BACK_PRIMARY_COLOR_NV = (int)0x8C77;
    public static final int GL_PACK_RESAMPLE_SGIX = (int)0x842E;
    public static final int GL_RGBA8_EXT = (int)0x8058;
    public static final int GL_FRAMEBUFFER_RENDERABLE = (int)0x8289;
    public static final int GL_GLYPH_WIDTH_BIT_NV = (int)0x01;
    public static final int GL_WEIGHT_SUM_UNITY_ARB = (int)0x86A6;
    public static final int GL_MIRRORED_REPEAT = (int)0x8370;
    public static final int GL_RGB10_A2 = (int)0x8059;
    public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = (int)0x92C1;
    public static final int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = (int)0x91A8;
    public static final int GL_MAP1_VERTEX_ATTRIB12_4_NV = (int)0x866C;
    public static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = (int)0x8841;
    public static final int GL_FLOAT_MAT3_ARB = (int)0x8B5B;
    public static final int GL_MODELVIEW14_ARB = (int)0x872E;
    public static final int GL_PRESENT_DURATION_NV = (int)0x8E2B;
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = (int)0x8C88;
    public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = (int)0x90D6;
    public static final int GL_REFERENCED_BY_FRAGMENT_SHADER = (int)0x930A;
    public static final int GL_MODELVIEW8_ARB = (int)0x8728;
    public static final int GL_ARB_debug_output = (int)1;
    public static final int GL_TEXTURE_RESIDENT_EXT = (int)0x8067;
    public static final int GL_ARB_texture_mirror_clamp_to_edge = (int)1;
    public static final int GL_TEXTURE_PRIORITY_EXT = (int)0x8066;
    public static final int GL_MAP2_NORMAL = (int)0x0DB2;
    public static final int GL_RGBA_INTEGER = (int)0x8D99;
    public static final int GL_INT_IMAGE_2D_MULTISAMPLE_EXT = (int)0x9060;
    public static final int GL_SUB_ATI = (int)0x8965;
    public static final int GL_OBJECT_LINEAR = (int)0x2401;
    public static final int GL_MAX_SAMPLE_MASK_WORDS_NV = (int)0x8E59;
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING = (int)0x88EF;
    public static final int GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = (int)0x904A;
    public static final int GL_COMBINER_MUX_SUM_NV = (int)0x8547;
    public static final int GL_SLUMINANCE8_EXT = (int)0x8C47;
    public static final int GL_RASTERIZER_DISCARD = (int)0x8C89;
    public static final int GL_PROGRAM_TARGET_NV = (int)0x8646;
    public static final int GL_NV_texture_rectangle = (int)1;
    public static final int GL_REDUCE_EXT = (int)0x8016;
    public static final int GL_OPERAND2_RGB_EXT = (int)0x8592;
    public static final int GL_COLOR_TABLE_BLUE_SIZE_EXT = (int)0x80DC;
    public static final int GL_ARB_shading_language_100 = (int)1;
    public static final int GL_TEXTURE_BINDING_RECTANGLE_EXT = (int)0x84F6;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER = (int)0x8C8E;
    public static final int GL_WEIGHT_ARRAY_ARB = (int)0x86AD;
    public static final int GL_COLOR_ARRAY_STRIDE = (int)0x8083;
    public static final int GL_RGBA16_EXT = (int)0x805B;
    public static final int GL_TEXTURE_LEQUAL_R_SGIX = (int)0x819C;
    public static final int GL_BUFFER_SIZE = (int)0x8764;
    public static final int GL_VERTEX_ARRAY_RANGE_APPLE = (int)0x851D;
    public static final int GL_TEXTURE_MATRIX = (int)0x0BA8;
    public static final int GL_REND_screen_coordinates = (int)1;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = (int)0x900A;
    public static final int GL_VIBRANCE_SCALE_NV = (int)0x8713;
    public static final int GL_CIRCULAR_TANGENT_ARC_TO_NV = (int)0xFC;
    public static final int GL_VERTEX_ARRAY_STRIDE_EXT = (int)0x807C;
    public static final int GL_PATH_GEN_COLOR_FORMAT_NV = (int)0x90B2;
    public static final int GL_STRICT_DEPTHFUNC_HINT_PGI = (int)107030;
    public static final int GL_STENCIL_BITS = (int)0x0D57;
    public static final int GL_SIGNED_HILO8_NV = (int)0x885F;
    public static final int GL_PATH_ERROR_POSITION_NV = (int)0x90AB;
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = (int)0x88EF;
    public static final int GL_SAMPLE_ALPHA_TO_MASK_SGIS = (int)0x809E;
    public static final int GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = (int)0x83F5;
    public static final int GL_MATRIX_INDEX_ARRAY_ARB = (int)0x8844;
    public static final int GL_PATH_END_CAPS_NV = (int)0x9076;
    public static final int GL_AMD_draw_buffers_blend = (int)1;
    public static final int GL_SAMPLES_SGIS = (int)0x80A9;
    public static final int GL_FLOAT_VEC4_ARB = (int)0x8B52;
    public static final int GL_DRAW_BUFFER = (int)0x0C01;
    public static final int GL_ALPHA_FLOAT32_ATI = (int)0x8816;
    public static final int GL_LINE = (int)0x1B01;
    public static final int GL_CLIP_DISTANCE0 = (int)0x3000;
    public static final int GL_CLIP_DISTANCE1 = (int)0x3001;
    public static final int GL_SRC2_ALPHA = (int)0x858A;
    public static final int GL_TEXTURE_RED_TYPE_ARB = (int)0x8C10;
    public static final int GL_CLIP_DISTANCE_NV = (int)0x8C7A;
    public static final int GL_CLIP_DISTANCE4 = (int)0x3004;
    public static final int GL_CLIP_DISTANCE5 = (int)0x3005;
    public static final int GL_CLIP_DISTANCE2 = (int)0x3002;
    public static final int GL_CLIP_DISTANCE3 = (int)0x3003;
    public static final int GL_PATH_CLIENT_LENGTH_NV = (int)0x907F;
    public static final int GL_INTENSITY_SIGNED_SGIX = (int)0x85E4;
    public static final int GL_EXT_debug_marker = (int)1;
    public static final int GL_BLUE_INTEGER_EXT = (int)0x8D96;
    public static final int GL_VIEWPORT_BOUNDS_RANGE = (int)0x825D;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR = (int)0x93B9;
    public static final int GL_RG8_SNORM = (int)0x8F95;
    public static final int GL_ARB_shader_storage_buffer_object = (int)1;
    public static final int GL_MODELVIEW13_ARB = (int)0x872D;
    public static final int GL_BUFFER_MAPPED = (int)0x88BC;
    public static final int GL_STENCIL_ATTACHMENT_EXT = (int)0x8D20;
    public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = (int)0x8DDF;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = (int)0x900B;
    public static final int GL_DOUBLE_MAT2x3_EXT = (int)0x8F49;
    public static final int GL_GREEN = (int)0x1904;
    public static final int GL_RG_SNORM = (int)0x8F91;
    public static final int GL_RED_BIAS = (int)0x0D15;
    public static final int GL_EXT_vertex_attrib_64bit = (int)1;
    public static final int GL_BLUE = (int)0x1905;
    public static final int GL_CONTEXT_FLAGS = (int)0x821E;
    public static final int GL_DSDT_MAG_INTENSITY_NV = (int)0x86DC;
    public static final int GL_TEXTURE31_ARB = (int)0x84DF;
    public static final int GL_GREEN_BIT_ATI = (int)0x00000002;
    public static final int GL_OP_EXP_BASE_2_EXT = (int)0x8791;
    public static final int GL_ARB_texture_env_crossbar = (int)1;
    public static final int GL_RGB32I_EXT = (int)0x8D83;
    public static final int GL_MAX_ASYNC_TEX_IMAGE_SGIX = (int)0x835F;
    public static final int GL_MAP2_BINORMAL_EXT = (int)0x8447;
    public static final int GL_LUMINANCE16F_ARB = (int)0x881E;
    public static final int GL_MAP2_VERTEX_ATTRIB2_4_NV = (int)0x8672;
    public static final int GL_TEXTURE_FILTER_CONTROL_EXT = (int)0x8500;
    public static final int GL_LUMINANCE12_ALPHA12_EXT = (int)0x8047;
    public static final int GL_COMPRESSED_TEXTURE_FORMATS = (int)0x86A3;
    public static final int GL_COMBINER_SCALE_NV = (int)0x8548;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = (int)0x00000001;
    public static final int GL_DST_IN_NV = (int)0x928B;
    public static final int GL_POST_CONVOLUTION_COLOR_TABLE = (int)0x80D1;
    public static final int GL_ARB_shading_language_packing = (int)1;
    public static final int GL_COMPATIBLE_SUBROUTINES = (int)0x8E4B;
    public static final int GL_BUFFER_OBJECT_APPLE = (int)0x85B3;
    public static final int GL_MAX_VERTEX_HINT_PGI = (int)107053;
    public static final int GL_PATCHES = (int)0xE;
    public static final int GL_TRIANGLES_ADJACENCY = (int)0x000C;
    public static final int GL_SGIX_resample = (int)1;
    public static final int GL_PROXY_TEXTURE_RECTANGLE_EXT = (int)0x84F7;
    public static final int GL_OP_MUL_EXT = (int)0x8786;
    public static final int GL_MAP2_VERTEX_ATTRIB7_4_NV = (int)0x8677;
    public static final int GL_EXT_stencil_wrap = (int)1;
    public static final int GLEW_VERSION = (int)1;
    public static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = (int)0x87C5;
    public static final int GL_TEXTURE13_ARB = (int)0x84CD;
    public static final int GL_STENCIL_BACK_FUNC = (int)0x8800;
    public static final int GL_SEPARATE_SPECULAR_COLOR_EXT = (int)0x81FA;
    public static final int GL_EVAL_VERTEX_ATTRIB8_NV = (int)0x86CE;
    public static final int GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = (int)0x8DDE;
    public static final int GL_IMAGE_BINDING_NAME_EXT = (int)0x8F3A;
    public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM = (int)0x8247;
    public static final int GL_TANGENT_ARRAY_TYPE_EXT = (int)0x843E;
    public static final int GL_RENDERBUFFER_ALPHA_SIZE = (int)0x8D53;
    public static final int GL_SUN_mesh_array = (int)1;
    public static final int GL_INGR_interlace_read = (int)1;
    public static final int GL_OUTPUT_POINT_SIZE_ATIX = (int)0x610E;
    public static final int GL_PIXEL_COUNTER_BITS_NV = (int)0x8864;
    public static final int GL_FLOAT_RG_NV = (int)0x8881;
    public static final int GL_SOURCE0_ALPHA_EXT = (int)0x8588;
    public static final int GL_TEXTURE_COORD_ARRAY_EXT = (int)0x8078;
    public static final int GL_REG_1_ATI = (int)0x8922;
    public static final int GL_TEXTURE_HI_SIZE_NV = (int)0x871B;
    public static final int GL_CONVOLUTION_HEIGHT = (int)0x8019;
    public static final int GL_DRAW_INDIRECT_ADDRESS_NV = (int)0x8F41;
    public static final int GL_FOG_HINT = (int)0x0C54;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = (int)0x8E23;
    public static final int GL_MAX_TEXTURE_UNITS_ARB = (int)0x84E2;
    public static final int GL_ARB_multi_draw_indirect = (int)1;
    public static final int GL_TEXTURE_2D_STACK_MESAX = (int)0x875A;
    public static final int GL_SIGNED_NEGATE_NV = (int)0x853D;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = (int)0x9128;
    public static final int GL_MODELVIEW_PROJECTION_NV = (int)0x8629;
    public static final int GL_MODULATE = (int)0x2100;
    public static final int GL_VERTEX_STREAM1_ATI = (int)0x876E;
    public static final int GL_ARB_depth_texture = (int)1;
    public static final int GL_MATRIX8_ARB = (int)0x88C8;
    public static final int GL_NV_occlusion_query = (int)1;
    public static final int GL_CLAMP_READ_COLOR_ARB = (int)0x891C;
    public static final int GL_TEXTURE_INTENSITY_TYPE_ARB = (int)0x8C15;
    public static final int GL_UNSIGNED_INT_8_8_8_8_REV = (int)0x8367;
    public static final int GL_LOGIC_OP = (int)0x0BF1;
    public static final int GL_FRAMEBUFFER_BINDING_EXT = (int)0x8CA6;
    public static final int GL_SOURCE2_ALPHA_EXT = (int)0x858A;
    public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = (int)0x889E;
    public static final int GL_ARB_viewport_array = (int)1;
    public static final int GL_NAME_LENGTH = (int)0x92F9;
    public static final int GL_DOT4_ATI = (int)0x8967;
    public static final int GL_POINT_SPRITE_R_MODE_NV = (int)0x8863;
    public static final int GL_RENDERBUFFER_FREE_MEMORY_ATI = (int)0x87FD;
    public static final int GL_RENDERBUFFER_HEIGHT_EXT = (int)0x8D43;
    public static final int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = (int)0x8E11;
    public static final int GL_INT_IMAGE_2D = (int)0x9058;
    public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = (int)0x92D3;
    public static final int GL_COMBINER_AB_DOT_PRODUCT_NV = (int)0x8545;
    public static final int GL_INTERNALFORMAT_ALPHA_TYPE = (int)0x827B;
    public static final int GL_E_TIMES_F_NV = (int)0x8531;
    public static final int GL_INT_IMAGE_3D = (int)0x9059;
    public static final int GL_STACK_OVERFLOW = (int)0x0503;
    public static final int GL_MAX_VIEWPORT_DIMS = (int)0x0D3A;
    public static final int GL_FRAMEBUFFER_DEFAULT = (int)0x8218;
    public static final int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = (int)0x870D;
    public static final int GL_UNPACK_CMYK_HINT_EXT = (int)0x800F;
    public static final int GL_CURRENT_QUERY_ANGLE = (int)0x8865;
    public static final int GL_NV_geometry_program4 = (int)1;
    public static final int GL_SHADER_STORAGE_BUFFER_START = (int)0x90D4;
    public static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = (int)0x8810;
    public static final int GL_INT_IMAGE_1D = (int)0x9057;
    public static final int GL_LIST_BIT = (int)0x00020000;
    public static final int GL_REPLACE_MIDDLE_SUN = (int)0x02;
    public static final int GL_GREEN_MIN_CLAMP_INGR = (int)0x8561;
    public static final int GL_COMBINE_RGB_ARB = (int)0x8571;
    public static final int GL_POST_CONVOLUTION_ALPHA_BIAS = (int)0x8023;
    public static final int GL_IMAGE_CLASS_10_10_10_2 = (int)0x82C3;
    public static final int GL_COMPUTE_SHADER = (int)0x91B9;
    public static final int GL_COMBINER_INPUT_NV = (int)0x8542;
    public static final int GL_COMBINER_AB_OUTPUT_NV = (int)0x854A;
    public static final int GL_SURFACE_STATE_NV = (int)0x86EB;
    public static final int GL_TEXTURE_STENCIL_SIZE_EXT = (int)0x88F1;
    public static final int GL_MAT_SPECULAR_BIT_PGI = (int)0x04000000;
    public static final int GL_TEXTURE_RANGE_POINTER_APPLE = (int)0x85B8;
    public static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = (int)0x00200000;
    public static final int GL_FIRST_VERTEX_CONVENTION_EXT = (int)0x8E4D;
    public static final int GL_NORMAL_ARRAY_STRIDE_EXT = (int)0x807F;
    public static final int GL_DOUBLE_VEC4 = (int)0x8FFE;
    public static final int GL_INTENSITY8I_EXT = (int)0x8D91;
    public static final int GL_SWIZZLE_STR_ATI = (int)0x8976;
    public static final int GL_AMD_interleaved_elements = (int)1;
    public static final int GL_DOUBLE_VEC2 = (int)0x8FFC;
    public static final int GL_DOUBLE_VEC3 = (int)0x8FFD;
    public static final int GL_IMAGE_BINDING_FORMAT_EXT = (int)0x906E;
    public static final int GL_VERTEX_PROGRAM_TWO_SIDE_NV = (int)0x8643;
    public static final int GL_TEXTURE_COMPRESSION_HINT = (int)0x84EF;
    public static final int GL_TEXTURE_GREEN_SIZE_EXT = (int)0x805D;
    public static final int GL_TEXTURE_SWIZZLE_A_EXT = (int)0x8E45;
    public static final int GL_MAX_FRAMEBUFFER_HEIGHT = (int)0x9316;
    public static final int GL_ADD_SIGNED_ARB = (int)0x8574;
    public static final int GL_TEXTURE18_ARB = (int)0x84D2;
    public static final int GL_LO_SCALE_NV = (int)0x870F;
    public static final int GL_ANGLE_texture_usage = (int)1;
    public static final int GL_SOURCE0_RGB_ARB = (int)0x8580;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = (int)0x8DA9;
    public static final int GL_RGBA_FLOAT16_ATI = (int)0x881A;
    public static final int GL_SRGB8_EXT = (int)0x8C41;
    public static final int GL_VERTEX_ARRAY_RANGE_POINTER_NV = (int)0x8521;
    public static final int GL_FRAMEBUFFER_UNDEFINED = (int)0x8219;
    public static final int GL_MODELVIEW1_ARB = (int)0x850A;
    public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = (int)0x8DE0;
    public static final int GL_REGAL_extension_query = (int)1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = (int)0x8CD1;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = (int)0x8A46;
    public static final int GL_VERTEX_PROGRAM_BINDING_NV = (int)0x864A;
    public static final int GL_DELETE_STATUS = (int)0x8B80;
    public static final int GL_UNPACK_IMAGE_HEIGHT = (int)0x806E;
    public static final int GL_INT = (int)0x1404;
    public static final int GL_TANGENT_ARRAY_POINTER_EXT = (int)0x8442;
    public static final int GL_LINE_WIDTH = (int)0x0B21;
    public static final int GL_SINGLE_COLOR_EXT = (int)0x81F9;
    public static final int GL_EDGE_FLAG_ARRAY = (int)0x8079;
    public static final int GL_ACTIVE_VARIABLES = (int)0x9305;
    public static final int GL_EVAL_VERTEX_ATTRIB9_NV = (int)0x86CF;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = (int)0x900B;
    public static final int GL_LUMINANCE16_EXTENDED_RANGE_SGIX = (int)0x85F5;
    public static final int GL_ALPHA_BIAS = (int)0x0D1D;
    public static final int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = (int)0x8E58;
    public static final int GL_BUMP_ROT_MATRIX_SIZE_ATI = (int)0x8776;
    public static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = (int)0x8B87;
    public static final int GL_DST_OUT_NV = (int)0x928D;
    public static final int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT = (int)0x8409;
    public static final int GL_HISTOGRAM_WIDTH_EXT = (int)0x8026;
    public static final int GL_DISTANCE_ATTENUATION_EXT = (int)0x8129;
    public static final int GL_MODULATE_ADD_ATI = (int)0x8744;
    public static final int GL_TRIANGLE_STRIP_ADJACENCY_ARB = (int)0xD;
    public static final int GL_DEBUG_TYPE_PERFORMANCE = (int)0x8250;
    public static final int GL_PERFORMANCE_MONITOR_AMD = (int)0x9152;
    public static final int GL_ARB_texture_float = (int)1;
    public static final int GL_ARB_texture_rg = (int)1;
    public static final int GL_SET_AMD = (int)0x874A;
    public static final int GL_EXT_index_texture = (int)1;
    public static final int GL_SGIS_pixel_texture = (int)1;
    public static final int GL_PROGRAM_RESIDENT_NV = (int)0x8647;
    public static final int GL_SAMPLE_COUNT_BITS_NV = (int)0x8864;
    public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = (int)0x8850;
    public static final int GL_COMPRESSED_RED = (int)0x8225;
    public static final int GL_VERTEX_PROGRAM_ARB = (int)0x8620;
    public static final int GL_INT_SAMPLER_CUBE = (int)0x8DCC;
    public static final int GL_DOUBLE_MAT3_EXT = (int)0x8F47;
    public static final int GL_MATRIX28_ARB = (int)0x88DC;
    public static final int GL_OUTPUT_TEXTURE_COORD5_EXT = (int)0x87A2;
    public static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB = (int)0x8B86;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = (int)0x8E5F;
    public static final int GL_NUM_FRAGMENT_CONSTANTS_ATI = (int)0x896F;
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = (int)0x8642;
    public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = (int)0x92D9;
    public static final int GL_PER_STAGE_CONSTANTS_NV = (int)0x8535;
    public static final int GL_INTERNALFORMAT_GREEN_TYPE = (int)0x8279;
    public static final int GL_UNSIGNED_INT_SAMPLER_3D = (int)0x8DD3;
    public static final int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = (int)0x8E54;
    public static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = (int)0x8B88;
    public static final int GL_UNIFORM = (int)0x92E1;
    public static final int GL_PROGRAM_RESULT_COMPONENTS_NV = (int)0x8907;
    public static final int GL_ARB_shader_objects = (int)1;
    public static final int GL_COMPRESSED_RGB = (int)0x84ED;
    public static final int GL_NV_vdpau_interop = (int)1;
    public static final int GL_ARB_vertex_blend = (int)1;
    public static final int GL_FILE_NAME_NV = (int)0x9074;
    public static final int GL_DRAW_BUFFER6_ATI = (int)0x882B;
    public static final int GL_FLOAT_MAT2x3 = (int)0x8B65;
    public static final int GL_FLOAT_MAT2x4 = (int)0x8B66;
    public static final int GL_ACTIVE_VERTEX_UNITS_ARB = (int)0x86A5;
    public static final int GL_PROXY_TEXTURE_RECTANGLE_NV = (int)0x84F7;
    public static final int GL_TEXTURE_1D_STACK_MESAX = (int)0x8759;
    public static final int GL_SYNC_FLAGS = (int)0x9115;
    public static final int GL_TEXTURE_COMPARE_SGIX = (int)0x819A;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = (int)0x912A;
    public static final int GL_FEEDBACK_BUFFER_SIZE = (int)0x0DF1;
    public static final int GL_UNSIGNED_INT_SAMPLER_1D = (int)0x8DD1;
    public static final int GL_C4F_N3F_V3F = (int)0x2A26;
    public static final int GL_GLOBAL_ALPHA_SUN = (int)0x81D9;
    public static final int GL_MITER_TRUNCATE_NV = (int)0x90A8;
    public static final int GL_VIEW_CLASS_32_BITS = (int)0x82C8;
    public static final int GL_DEPTH_TEXTURE_MODE_ARB = (int)0x884B;
    public static final int GL_EVAL_VERTEX_ATTRIB11_NV = (int)0x86D1;
    public static final int GL_DRAW_BUFFER6_ARB = (int)0x882B;
    public static final int GL_INDEX_ARRAY_LIST_IBM = (int)103073;
    public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = (int)0x9122;
    public static final int GL_EXT_x11_sync_object = (int)1;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D = (int)0x8DD2;
    public static final int GL_UNSIGNED_INT16_NV = (int)0x8FF0;
    public static final int GL_ACTIVE_UNIFORM_BLOCKS = (int)0x8A36;
    public static final int GL_OUTPUT_TEXTURE_COORD18_EXT = (int)0x87AF;
    public static final int GL_SHADER_IMAGE_LOAD = (int)0x82A4;
    public static final int GL_OUTPUT_TEXTURE_COORD11_EXT = (int)0x87A8;
    public static final int GL_ARB_texture_multisample = (int)1;
    public static final int GL_IMAGE_BINDING_LEVEL_EXT = (int)0x8F3B;
    public static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = (int)0x8DA1;
    public static final int GL_GEOMETRY_VERTICES_OUT_ARB = (int)0x8DDA;
    public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = (int)0x9276;
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = (int)0x851C;
    public static final int GL_FRAGMENT_DEPTH = (int)0x8452;
    public static final int GL_PACK_LSB_FIRST = (int)0x0D01;
    public static final int GL_BLEND_SRC_ALPHA = (int)0x80CB;
    public static final int GL_FOG_COORD_ARRAY_TYPE = (int)0x8454;
    public static final int GL_DRAW_BUFFER3_ARB = (int)0x8828;
    public static final int GL_LIST_BASE = (int)0x0B32;
    public static final int GL_ATI_meminfo = (int)1;
    public static final int GL_DEPTH_BUFFER_BIT = (int)0x00000100;
    public static final int GL_LUMINANCE_ALPHA8UI_EXT = (int)0x8D81;
    public static final int GL_FIRST_TO_REST_NV = (int)0x90AF;
    public static final int GL_MAT_DIFFUSE_BIT_PGI = (int)0x00400000;
    public static final int GL_TEXTURE_LUMINANCE_SIZE = (int)0x8060;
    public static final int GL_EXT_texture_lod_bias = (int)1;
    public static final int GL_ALREADY_SIGNALED = (int)0x911A;
    public static final int GL_RGBA_FLOAT16_APPLE = (int)0x881A;
    public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR = (int)0x93BD;
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = (int)0x8625;
    public static final int GL_OPERAND2_ALPHA_ARB = (int)0x859A;
    public static final int GL_UNSIGNED_INT_8_8_8_8 = (int)0x8035;
    public static final int GL_LUMINANCE12_ALPHA12 = (int)0x8047;
    public static final int GL_DOUBLE_MAT4x2_EXT = (int)0x8F4D;
    public static final int GL_PIXEL_PACK_BUFFER_BINDING = (int)0x88ED;
    public static final int GL_COLOR_TABLE_RED_SIZE = (int)0x80DA;
    public static final int GL_PREVIOUS_ARB = (int)0x8578;
    public static final int GL_DEBUG_CATEGORY_DEPRECATION_AMD = (int)0x914B;
    public static final int GL_DRAW_BUFFER3_ATI = (int)0x8828;
    public static final int GL_INT_VEC2_ARB = (int)0x8B53;
    public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = (int)0x9124;
    public static final int GL_TESS_CONTROL_SHADER = (int)0x8E88;
    public static final int GL_INTENSITY4_EXT = (int)0x804A;
    public static final int GL_VERTEX_ATTRIB_ARRAY13_NV = (int)0x865D;
    public static final int GL_OP_CLAMP_EXT = (int)0x878E;
    public static final int GL_TEXTURE_COMPRESSED_ARB = (int)0x86A1;
    public static final int GL_INT_IMAGE_2D_EXT = (int)0x9058;
    public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = (int)0x9003;
    public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = (int)0x8242;
    public static final int GL_SAMPLER_2D_RECT_SHADOW_ARB = (int)0x8B64;
    public static final int GL_OP_ROUND_EXT = (int)0x8790;
    public static final int GL_POLYGON_OFFSET_POINT = (int)0x2A01;
    public static final int GL_MOVE_TO_NV = (int)0x02;
    public static final int GL_UNSIGNED_BYTE_2_3_3_REV = (int)0x8362;
    public static final int GL_ARB_indirect_parameters = (int)1;
    public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = (int)0x90DE;
    public static final int GL_SGIX_fragment_specular_lighting = (int)1;
    public static final int GL_COMBINER_CD_DOT_PRODUCT_NV = (int)0x8546;
    public static final int GL_INTERNALFORMAT_STENCIL_TYPE = (int)0x827D;
    public static final int GL_OES_single_precision = (int)1;
    public static final int GL_BLUE_MAX_CLAMP_INGR = (int)0x8566;
    public static final int GL_HIGH_INT = (int)0x8DF5;
    public static final int GL_DUP_LAST_CUBIC_CURVE_TO_NV = (int)0xF4;
    public static final int GL_EXT_texture_object = (int)1;
    public static final int GL_UNSIGNED_SHORT_5_6_5_REV = (int)0x8364;
    public static final int GL_INT_VEC4 = (int)0x8B55;
    public static final int GL_MODULATE_SIGNED_ADD_ATI = (int)0x8745;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = (int)0x8215;
    public static final int GL_INT_VEC3 = (int)0x8B54;
    public static final int GL_INT_VEC2 = (int)0x8B53;
    public static final int GL_REG_5_ATI = (int)0x8926;
    public static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = (int)0x80D4;
    public static final int GL_MODELVIEW26_ARB = (int)0x873A;
    public static final int GL_SAMPLE_MASK_INVERT_EXT = (int)0x80AB;
    public static final int GL_NV_shader_storage_buffer_object = (int)1;
    public static final int GL_CLIP_PLANE3 = (int)0x3003;
    public static final int GL_CLIP_PLANE4 = (int)0x3004;
    public static final int GL_TESS_GEN_SPACING = (int)0x8E77;
    public static final int GL_CLIP_PLANE5 = (int)0x3005;
    public static final int GL_CLIP_PLANE0 = (int)0x3000;
    public static final int GL_CLIP_PLANE1 = (int)0x3001;
    public static final int GL_CLIP_PLANE2 = (int)0x3002;
    public static final int GL_VERTEX_ARRAY_OBJECT_AMD = (int)0x9154;
    public static final int GL_4PASS_1_EXT = (int)0x80A5;
    public static final int GL_AMD_vertex_shader_tessellator = (int)1;
    public static final int GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = (int)0x85EB;
    public static final int GL_TEXTURE22_ARB = (int)0x84D6;
    public static final int GL_MODELVIEW3_ARB = (int)0x8723;
    public static final int GL_SIGNED_LUMINANCE_ALPHA_NV = (int)0x8703;
    public static final int GL_ARB_framebuffer_object = (int)1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = (int)0x8CD2;
    public static final int GL_INT_SAMPLER_3D_EXT = (int)0x8DCB;
    public static final int GL_LUMINANCE_FLOAT32_ATI = (int)0x8818;
    public static final int GL_INTERNALFORMAT_RED_TYPE = (int)0x8278;
    public static final int GL_MAP1_NORMAL = (int)0x0D92;
    public static final int GL_IMAGE_BINDING_LAYERED = (int)0x8F3C;
    public static final int GL_BUFFER_STORAGE_FLAGS = (int)0x8220;
    public static final int GL_PATH_STENCIL_FUNC_NV = (int)0x90B7;
    public static final int GL_TEXTURE_COMPRESSION_HINT_ARB = (int)0x84EF;
    public static final int GL_DEBUG_SOURCE_OTHER = (int)0x824B;
    public static final int GL_PIXEL_MAP_R_TO_R_SIZE = (int)0x0CB6;
    public static final int GL_LOG_ERROR_REGAL = (int)0x9319;
    public static final int GL_TEXTURE_MAX_LEVEL = (int)0x813D;
    public static final int GL_ATI_texture_compression_3dc = (int)1;
    public static final int GL_TEXTURE_MAX_LEVEL_SGIS = (int)0x813D;
    public static final int GL_OBJECT_LINE_SGIS = (int)0x81F7;
    public static final int GL_VIEWPORT_SUBPIXEL_BITS = (int)0x825C;
    public static final int GL_4PASS_3_EXT = (int)0x80A7;
    public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY = (int)0x905F;
    public static final int GL_COLOR_ARRAY_EXT = (int)0x8076;
    public static final int GL_SGIX_texture_add_env = (int)1;
    public static final int GL_PRIMITIVE_RESTART = (int)0x8F9D;
    public static final int GL_MAX_UNIFORM_BLOCK_SIZE = (int)0x8A30;
    public static final int GL_ALPHA_MAX_CLAMP_INGR = (int)0x8567;
    public static final int GL_FUNC_REVERSE_SUBTRACT = (int)0x800B;
    public static final int GL_SHORT = (int)0x1402;
    public static final int GL_ARB_instanced_arrays = (int)1;
    public static final int GL_APPLE_ycbcr_422 = (int)1;
    public static final int GL_RGB4_S3TC = (int)0x83A1;
    public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = (int)0x87CC;
    public static final int GL_LOCATION = (int)0x930E;
    public static final int GL_POST_CONVOLUTION_GREEN_BIAS_EXT = (int)0x8021;
    public static final int GL_SRC1_COLOR = (int)0x88F9;
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = (int)0x8872;
    public static final int GL_RELEASED_APPLE = (int)0x8A19;
    public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = (int)0x8262;
    public static final int GL_TEXTURE_SPARSE_ARB = (int)0x91A6;
    public static final int GL_CURRENT_ATTRIB_NV = (int)0x8626;
    public static final int GL_MAX_ASYNC_HISTOGRAM_SGIX = (int)0x832D;
    public static final int GL_LUMINANCE4 = (int)0x803F;
    public static final int GL_LESS = (int)0x0201;
    public static final int GL_COLOR_TABLE_ALPHA_SIZE_SGI = (int)0x80DD;
    public static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = (int)0x88FC;
    public static final int GL_LUMINANCE8 = (int)0x8040;
    public static final int GL_BLEND_DST = (int)0x0BE0;
    public static final int GL_PATH_DASH_CAPS_NV = (int)0x907B;
    public static final int GL_MAP1_VERTEX_ATTRIB2_4_NV = (int)0x8662;
    public static final int GL_CONVOLUTION_FILTER_SCALE = (int)0x8014;
    public static final int GL_EXT_shared_texture_palette = (int)1;
    public static final int GL_MODELVIEW17_ARB = (int)0x8731;
    public static final int GL_VERTEX_ATTRIB_ARRAY_LONG = (int)0x874E;
    public static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = (int)0x9061;
    public static final int GL_COLOR_TABLE_FORMAT_EXT = (int)0x80D8;
    public static final int GL_SIGNED_HILO16_NV = (int)0x86FA;
    public static final int GL_DST_ATOP_NV = (int)0x928F;
    public static final int GL_FRONT_AND_BACK = (int)0x0408;
    public static final int GL_TEXTURE3_ARB = (int)0x84C3;
    public static final int GL_AMD_blend_minmax_factor = (int)1;
    public static final int GL_POST_COLOR_MATRIX_BLUE_BIAS = (int)0x80BA;
    public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = (int)0x90CF;
    public static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = (int)0x912B;
    public static final int GL_DEPTH_BIAS = (int)0x0D1F;
    public static final int GL_DIFFUSE = (int)0x1201;
    public static final int GL_QUERY_BUFFER_BINDING = (int)0x9193;
    public static final int GL_TEXCOORD4_BIT_PGI = (int)0x80000000;
    public static final int GL_ARB_vertex_array_object = (int)1;
    public static final int GL_MAX_DRAW_BUFFERS_ARB = (int)0x8824;
    public static final int GL_PN_TRIANGLES_ATI = (int)0x87F0;
    public static final int GL_PIXEL_PACK_BUFFER_BINDING_ARB = (int)0x88ED;
    public static final int GL_FUNC_REVERSE_SUBTRACT_EXT = (int)0x800B;
    public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = (int)0x90D9;
    public static final int GL_ARB_base_instance = (int)1;
    public static final int GL_READ_FRAMEBUFFER_EXT = (int)0x8CA8;
    public static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = (int)0x92DA;
    public static final int GL_R1UI_C3F_V3F_SUN = (int)0x85C6;
    public static final int GL_PRIMITIVES_GENERATED_NV = (int)0x8C87;
    public static final int GL_SEPARATE_ATTRIBS_EXT = (int)0x8C8D;
    public static final int GL_POST_CONVOLUTION_RED_SCALE = (int)0x801C;
    public static final int GL_MAX_IMAGE_SAMPLES = (int)0x906D;
    public static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = (int)0x92C4;
    public static final int GL_MAT_COLOR_INDEXES_BIT_PGI = (int)0x01000000;
    public static final int GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = (int)0x20;
    public static final int GL_NORMAL_ARRAY_LENGTH_NV = (int)0x8F2C;
    public static final int GL_INT_SAMPLER_2D_RECT = (int)0x8DCD;
    public static final int GL_PARALLEL_ARRAYS_INTEL = (int)0x83F4;
    public static final int GL_FOG_DENSITY = (int)0x0B62;
    public static final int GL_MATRIX5_ARB = (int)0x88C5;
    public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = (int)0x8366;
    public static final int GL_RGB_SNORM = (int)0x8F92;
    public static final int GL_MOVE_TO_RESETS_NV = (int)0x90B5;
    public static final int GL_CLAMP_VERTEX_COLOR_ARB = (int)0x891A;
    public static final int GL_FRAGMENT_LIGHT7_EXT = (int)0x8413;
    public static final int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = (int)0x8E8C;
    public static final int GL_COORD_REPLACE_NV = (int)0x8862;
    public static final int GL_BINORMAL_ARRAY_POINTER_EXT = (int)0x8443;
    public static final int GL_SUN_vertex = (int)1;
    public static final int GL_HP_texture_lighting = (int)1;
    public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = (int)0x8A32;
    public static final int GL_MULTISAMPLE_COVERAGE_MODES_NV = (int)0x8E12;
    public static final int GL_EXT_texture_sRGB_decode = (int)1;
    public static final int GL_ARB_vertex_attrib_64bit = (int)1;
    public static final int GL_EXT_color_subtable = (int)1;
    public static final int GL_TEXTURE_MAX_LOD_SGIS = (int)0x813B;
    public static final int GL_ACTIVE_PROGRAM_EXT = (int)0x8B8D;
    public static final int GL_EXT_scene_marker = (int)1;
    public static final int GL_UNPACK_ROW_BYTES_APPLE = (int)0x8A16;
    public static final int GL_ELEMENT_ARRAY_ADDRESS_NV = (int)0x8F29;
    public static final int GL_DOUBLE_VEC3_EXT = (int)0x8FFD;
    public static final int GL_MATRIX24_ARB = (int)0x88D8;
    public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = (int)0x00000800;
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA_EXT = (int)0x8004;
    public static final int GL_ALPHA_BITS = (int)0x0D55;
    public static final int GL_UNSIGNED_INT_10_10_10_2_EXT = (int)0x8036;
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS = (int)0x8872;
    public static final int GL_SGIX_interlace = (int)1;
    public static final int GLEW_ERROR_NO_GL_VERSION = (int)1;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = (int)0x9065;
    public static final int GL_CONVOLUTION_FILTER_BIAS = (int)0x8015;
    public static final int GL_MAX_DRAW_BUFFERS_ATI = (int)0x8824;
    public static final int GL_OUTPUT_TEXTURE_COORD30_EXT = (int)0x87BB;
    public static final int GL_ALPHA_FLOAT16_ATI = (int)0x881C;
    public static final int GL_FRAGMENT_COLOR_EXT = (int)0x834C;
    public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = (int)0x8E5B;
    public static final int GL_NV_parameter_buffer_object2 = (int)1;
    public static final int GL_SIGNED_IDENTITY_NV = (int)0x853C;
    public static final int GL_ARB_texture_buffer_object_rgb32 = (int)1;
    public static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = (int)0x8819;
    public static final int GL_VERTEX_ATTRIB_ARRAY8_NV = (int)0x8658;
    public static final int GL_STENCIL_OP_VALUE_AMD = (int)0x874C;
    public static final int GL_CONTEXT_CORE_PROFILE_BIT = (int)0x00000001;
    public static final int GL_ARB_shader_image_size = (int)1;
    public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = (int)0x8520;
    public static final int GL_COMPUTE_SUBROUTINE_UNIFORM = (int)0x92F3;
    public static final int GL_INT_IMAGE_2D_RECT = (int)0x905A;
    public static final int GL_DYNAMIC_COPY = (int)0x88EA;
    public static final int GL_MIRROR_CLAMP_TO_EDGE_EXT = (int)0x8743;
    public static final int GL_REFLECTION_MAP_ARB = (int)0x8512;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = (int)0x93D9;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = (int)0x851A;
    public static final int GL_POST_TEXTURE_FILTER_BIAS_SGIX = (int)0x8179;
    public static final int GL_ARB_vertex_buffer_object = (int)1;
    public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = (int)0x8856;
    public static final int GL_ARB_explicit_uniform_location = (int)1;
    public static final int GL_LERP_ATI = (int)0x8969;
    public static final int GL_DEBUG_TYPE_POP_GROUP = (int)0x826A;
    public static final int GL_TEXTURE_SHADOW = (int)0x82A1;
    public static final int GL_ARB_vertex_type_10f_11f_11f_rev = (int)1;
    public static final int GL_ANGLE_framebuffer_multisample = (int)1;
    public static final int GL_ARRAY_STRIDE = (int)0x92FE;
    public static final int GL_ARB_fragment_shader = (int)1;
    public static final int GL_SAMPLE_ALPHA_TO_ONE_SGIS = (int)0x809F;
    public static final int GL_CURRENT_PROGRAM = (int)0x8B8D;
    public static final int GL_VERTICAL_LINE_TO_NV = (int)0x08;
    public static final int GL_INTEL_map_texture = (int)1;
    public static final int GL_SOURCE2_RGB_EXT = (int)0x8582;
    public static final int GL_VIBRANCE_BIAS_NV = (int)0x8719;
    public static final int GL_TEXTURE_1D_ARRAY_EXT = (int)0x8C18;
    public static final int GL_SIGNALED = (int)0x9119;
    public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR = (int)0x93B4;
    public static final int GL_COMPRESSED_INTENSITY = (int)0x84EC;
    public static final int GL_DEPTH_BITS = (int)0x0D56;
    public static final int GL_BOLD_BIT_NV = (int)0x01;
    public static final int GL_RELATIVE_HORIZONTAL_LINE_TO_NV = (int)0x07;
    public static final int GL_UNSIGNED_INT_24_8_EXT = (int)0x84FA;
    public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = (int)0x8E8D;
    public static final int GL_STREAM_DRAW = (int)0x88E0;
    public static final int GL_2PASS_0_EXT = (int)0x80A2;
    public static final int GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = (int)103086;
    public static final int GL_BUFFER_BINDING = (int)0x9302;
    public static final int GL_EXT_draw_buffers2 = (int)1;
    public static final int GL_IMAGE_CUBE = (int)0x9050;
    public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX = (int)0x8D69;
    public static final int GL_MAX_UNIFORM_LOCATIONS = (int)0x826E;
    public static final int GL_TEXTURE_COORD_ARRAY_LIST_IBM = (int)103074;
    public static final int GL_SRC0_RGB = (int)0x8580;
    public static final int GL_COMPARE_REF_TO_TEXTURE = (int)0x884E;
    public static final int GL_LUMINANCE8_ALPHA8 = (int)0x8045;
    public static final int GL_READ_FRAMEBUFFER_ANGLE = (int)0x8CA8;
    public static final int GL_FONT_DESCENDER_BIT_NV = (int)0x00400000;
    public static final int GL_MAX_NUM_ACTIVE_VARIABLES = (int)0x92F7;
    public static final int GL_TEXTURE_SWIZZLE_R_EXT = (int)0x8E42;
    public static final int GL_TEXTURE_COMPARE_FUNC = (int)0x884D;
    public static final int GL_SGIX_convolution_accuracy = (int)1;
    public static final int GL_2PASS_0_SGIS = (int)0x80A2;
    public static final int GL_COLOR_ATTACHMENT9_EXT = (int)0x8CE9;
    public static final int GL_COLOR_ATTACHMENT12_EXT = (int)0x8CEC;
    public static final int GL_POLYGON = (int)0x0009;
    public static final int GL_RELATIVE_LARGE_CCW_ARC_TO_NV = (int)0x17;
    public static final int GL_VERTEX_ARRAY_RANGE_NV = (int)0x851D;
    public static final int GL_FIXED_ONLY_ARB = (int)0x891D;
    public static final int GL_TEXTURE1_ARB = (int)0x84C1;
    public static final int GL_OPERAND0_RGB_EXT = (int)0x8590;
    public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = (int)0x824D;
    public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = (int)0x8B87;
    public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = (int)0x910E;
    public static final int GL_SAMPLE_BUFFERS_3DFX = (int)0x86B3;
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = (int)0x88FD;
    public static final int GL_EVAL_VERTEX_ATTRIB12_NV = (int)0x86D2;
    public static final int GL_TEXTURE_VIEW_NUM_LAYERS = (int)0x82DE;
    public static final int GL_R11F_G11F_B10F = (int)0x8C3A;
    public static final int GL_SRGB_EXT = (int)0x8C40;
    public static final int GL_ARB_map_buffer_range = (int)1;
    public static final int GL_UNSIGNED_INT = (int)0x1405;
    public static final int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = (int)0x82B1;
    public static final int GL_COLOR_INDEX1_EXT = (int)0x80E2;
    public static final int GL_SGIX_shadow_ambient = (int)1;
    public static final int GL_CURRENT_NORMAL = (int)0x0B02;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = (int)0x93D1;
    public static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = (int)0x8241;
    public static final int GL_ARB_vertex_type_2_10_10_10_rev = (int)1;
    public static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = (int)0x80D5;
    public static final int GL_STENCIL_FAIL = (int)0x0B94;
    public static final int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = (int)0x8455;
    public static final int GL_COLOR_MATRIX_STACK_DEPTH_SGI = (int)0x80B2;
    public static final int GL_RGB16 = (int)0x8054;
    public static final int GL_EDGE_FLAG_ARRAY_EXT = (int)0x8079;
    public static final int GL_RGB12 = (int)0x8053;
    public static final int GL_RGB10 = (int)0x8052;
    public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = (int)0x8E1E;
    public static final int GL_ALL_STATIC_DATA_IBM = (int)103060;
    public static final int GL_SGIX_async_histogram = (int)1;
    public static final int GL_COLOR4_BIT_PGI = (int)0x00020000;
    public static final int GL_EXT_subtexture = (int)1;
    public static final int GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = (int)0x9049;
    public static final int GL_POINT_SMOOTH = (int)0x0B10;
    public static final int GL_OP_FRAC_EXT = (int)0x8789;
    public static final int GL_T4F_V4F = (int)0x2A28;
    public static final int GL_NV_path_rendering = (int)1;
    public static final int GL_ALIASED_POINT_SIZE_RANGE = (int)0x846D;
    public static final int GL_POINT_FADE_THRESHOLD_SIZE_ARB = (int)0x8128;
    public static final int GL_RGBA_FLOAT32_APPLE = (int)0x8814;
    public static final int GL_VBO_FREE_MEMORY_ATI = (int)0x87FB;
    public static final int GL_RESAMPLE_ZERO_FILL_SGIX = (int)0x8434;
    public static final int GL_MAP1_VERTEX_ATTRIB1_4_NV = (int)0x8661;
    public static final int GL_HISTOGRAM_ALPHA_SIZE_EXT = (int)0x802B;
    public static final int GL_BYTE = (int)0x1400;
    public static final int GL_PRIMITIVES_GENERATED_EXT = (int)0x8C87;
    public static final int GL_OUTPUT_TEXTURE_COORD29_EXT = (int)0x87BA;
    public static final int GL_STENCIL_INDEX1 = (int)0x8D46;
    public static final int GL_STENCIL_INDEX4 = (int)0x8D47;
    public static final int GL_OUTPUT_TEXTURE_COORD26_EXT = (int)0x87B7;
    public static final int GL_LINE_BIT = (int)0x00000004;
    public static final int GL_VERTEX_ATTRIB_ARRAY7_NV = (int)0x8657;
    public static final int GL_CONVOLUTION_FORMAT = (int)0x8017;
    public static final int GL_INDEX_MODE = (int)0x0C30;
    public static final int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = (int)0x8849;
    public static final int GL_LOW_INT = (int)0x8DF3;
    public static final long GL_TIMEOUT_IGNORED = (long)0xFFFFFFFFFFFFFFFFL;
    public static final int GL_EXT_packed_pixels = (int)1;
    public static final int GL_NEAREST_MIPMAP_NEAREST = (int)0x2700;
    public static final int GL_REFERENCED_BY_COMPUTE_SHADER = (int)0x930B;
    public static final int GL_T2F_C3F_V3F = (int)0x2A2A;
    public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = (int)0x8B8A;
    public static final int GL_ZERO_EXT = (int)0x87DD;
    public static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = (int)0x8A08;
    public static final int GL_STENCIL_INDEX8 = (int)0x8D48;
    public static final int GL_VERTEX_STATE_PROGRAM_NV = (int)0x8621;
    public static final int GL_MAX_GENERAL_COMBINERS_NV = (int)0x854D;
    public static final int GL_PROGRAM_OBJECT_ARB = (int)0x8B40;
    public static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = (int)0x880A;
    public static final int GL_INVALID_OPERATION = (int)0x0502;
    public static final int GL_AVERAGE_EXT = (int)0x8335;
    public static final int GL_TEXTURE_VIEW_MIN_LAYER = (int)0x82DD;
    public static final int GL_TEXTURE_DT_SIZE_NV = (int)0x871E;
    public static final int GL_CONVOLUTION_BORDER_COLOR = (int)0x8154;
    public static final int GL_TEXTURE_APPLICATION_MODE_EXT = (int)0x834F;
    public static final int GL_IMAGE_CUBE_EXT = (int)0x9050;
    public static final int GL_AMD_performance_monitor = (int)1;
    public static final int GL_TEXTURE_2D_ARRAY_EXT = (int)0x8C1A;
    public static final int GL_COLOR_TABLE_SGI = (int)0x80D0;
    public static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = (int)0x9056;
    public static final int GL_MIRROR_CLAMP_TO_BORDER_EXT = (int)0x8912;
    public static final int GL_TESS_CONTROL_SHADER_BIT = (int)0x00000008;
    public static final int GL_FRAGMENT_SUBROUTINE = (int)0x92EC;
    public static final int GL_OPERAND1_RGB = (int)0x8591;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = (int)0x8515;
    public static final int GL_TEXTURE_BASE_LEVEL_SGIS = (int)0x813C;
    public static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = (int)0x8A02;
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = (int)0x851C;
    public static final int GL_DS_SCALE_NV = (int)0x8710;
    public static final int GL_MAP_WRITE_BIT = (int)0x0002;
    public static final int GL_ONE_EXT = (int)0x87DE;
    public static final int GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = (int)0x83F7;
    public static final int GL_INFO_LOG_LENGTH = (int)0x8B84;
    public static final int GL_ATTRIB_ARRAY_TYPE_NV = (int)0x8625;
    public static final int GL_MAX_EVAL_ORDER = (int)0x0D30;
    public static final int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = (int)0x8897;
    public static final int GL_POST_CONVOLUTION_BLUE_BIAS_EXT = (int)0x8022;
    public static final int GL_BGR_INTEGER_EXT = (int)0x8D9A;
    public static final int GL_IMAGE_2D_EXT = (int)0x904D;
    public static final int GL_SGIS_texture4D = (int)1;
    public static final int GL_SLICE_ACCUM_SUN = (int)0x85CC;
    public static final int GL_BUMP_TEX_UNITS_ATI = (int)0x8778;
    public static final int GL_COLOR_TABLE_INTENSITY_SIZE = (int)0x80DF;
    public static final int GL_IMAGE_BINDING_ACCESS = (int)0x8F3E;
    public static final int GL_SGIS_color_range = (int)1;
    public static final int GL_RGB16_SIGNED_SGIX = (int)0x85E6;
    public static final int GL_REDUCE = (int)0x8016;
    public static final int GL_SGIX_pixel_texture = (int)1;
    public static final int GL_CURRENT_SECONDARY_COLOR = (int)0x8459;
    public static final int GL_PROXY_TEXTURE_2D_ARRAY_EXT = (int)0x8C1B;
    public static final int GL_MATRIX25_ARB = (int)0x88D9;
    public static final int GL_OFFSET = (int)0x92FC;
    public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = (int)0x8A33;
    public static final int GL_R1UI_T2F_C4F_N3F_V3F_SUN = (int)0x85CB;
    public static final int GL_2X_BIT_ATI = (int)0x00000001;
    public static final int GL_RENDERBUFFER_BLUE_SIZE_EXT = (int)0x8D52;
    public static final int GL_RGB16_EXTENDED_RANGE_SGIX = (int)0x85F2;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = (int)0x8CD4;
    public static final int GL_DEBUG_SOURCE_APPLICATION = (int)0x824A;
    public static final int GL_CURRENT_VERTEX_ATTRIB = (int)0x8626;
    public static final int GL_PATCH_DEFAULT_INNER_LEVEL = (int)0x8E73;
    public static final int GL_CG_VERTEX_SHADER_EXT = (int)0x890E;
    public static final int GL_COLOR_FLOAT_APPLE = (int)0x8A0F;
    public static final int GL_TEXTURE_MAG_FILTER = (int)0x2800;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = (int)0x90EC;
    public static final int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = (int)0x8456;
    public static final int GL_OP_SET_GE_EXT = (int)0x878C;
    public static final int GL_INTERNALFORMAT_STENCIL_SIZE = (int)0x8276;
    public static final int GL_TEXTURE_BUFFER_FORMAT_EXT = (int)0x8C2E;
    public static final int GL_SHADER_CONSISTENT_NV = (int)0x86DD;
    public static final int GL_OR_REVERSE = (int)0x150B;
    public static final int GL_SAMPLER_1D_ARRAY_EXT = (int)0x8DC0;
    public static final int GL_CLIENT_ATTRIB_STACK_DEPTH = (int)0x0BB1;
    public static final int GL_GEOMETRY_TEXTURE = (int)0x829E;
    public static final int GL_DRAW_BUFFER11_ATI = (int)0x8830;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = (int)0x8DA8;
    public static final int GL_INT_SAMPLER_2D_RECT_EXT = (int)0x8DCD;
    public static final int GL_OUTPUT_TEXTURE_COORD8_EXT = (int)0x87A5;
    public static final int GL_INT64_VEC2_NV = (int)0x8FE9;
    public static final int GL_SECONDARY_COLOR_ARRAY_LIST_IBM = (int)103077;
    public static final int GL_DEPTH_RANGE = (int)0x0B70;
    public static final int GL_UNSIGNED_INT_VEC2 = (int)0x8DC6;
    public static final int GL_POINT_SIZE_MIN_EXT = (int)0x8126;
    public static final int GL_SCALE_BY_FOUR_NV = (int)0x853F;
    public static final int GL_UNSIGNED_INT_VEC3 = (int)0x8DC7;
    public static final int GL_HISTOGRAM_GREEN_SIZE_EXT = (int)0x8029;
    public static final int GL_3D_COLOR_TEXTURE = (int)0x0603;
    public static final int GL_EXT_index_array_formats = (int)1;
    public static final int GL_COMBINER_SUM_OUTPUT_NV = (int)0x854C;
    public static final int GL_EXT_blend_subtract = (int)1;
    public static final int GL_TEXTURE_BINDING_1D_ARRAY = (int)0x8C1C;
    public static final int GL_COLOR_SUM_ARB = (int)0x8458;
    public static final int GL_VERTEX_STREAM6_ATI = (int)0x8773;
    public static final int GL_UNIFORM_BUFFER_SIZE = (int)0x8A2A;
    public static final long GL_ALL_BARRIER_BITS = (long)0xFFFFFFFFL;
    public static final int GL_DRAW_BUFFER11_ARB = (int)0x8830;
    public static final int GL_UNSIGNED_INT_VEC4 = (int)0x8DC8;
    public static final int GL_VERSION_1_2_1 = (int)1;
    public static final int GL_MIN_BLUE_SGIS = (int)0x85AA;
    public static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = (int)0x8F35;
    public static final int GL_RETAINED_APPLE = (int)0x8A1B;
    public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = (int)0x83F2;
    public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS = (int)0x8242;
    public static final int GL_RENDERBUFFER_HEIGHT = (int)0x8D43;
    public static final int GL_ASYNC_HISTOGRAM_SGIX = (int)0x832C;
    public static final int GL_NV_texture_shader2 = (int)1;
    public static final int GL_NV_texture_shader3 = (int)1;
    public static final int GL_SAMPLE_BUFFERS_EXT = (int)0x80A8;
    public static final int GL_SEPARABLE_2D = (int)0x8012;
    public static final int GL_DEBUG_SEVERITY_LOW = (int)0x9148;
    public static final int GL_MAP2_VERTEX_ATTRIB10_4_NV = (int)0x867A;
    public static final int GL_NORMAL_ARRAY_POINTER = (int)0x808F;
    public static final int GL_RENDERBUFFER_ALPHA_SIZE_EXT = (int)0x8D53;
    public static final int GL_SOURCE3_ALPHA_NV = (int)0x858B;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = (int)0x8DD4;
    public static final int GL_RGBA16UI = (int)0x8D76;
    public static final int GL_HSL_COLOR_NV = (int)0x92AF;
    public static final int GL_EXT_texture_compression_latc = (int)1;
    public static final int GL_TEXTURE_BUFFER_EXT = (int)0x8C2A;
    public static final int GL_IMAGE_BINDING_FORMAT = (int)0x906E;
    public static final int GL_INTEL_texture_scissor = (int)1;
    public static final int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = (int)0x902C;
    public static final int GL_3DFX_tbuffer = (int)1;
    public static final int GL_SATURATE_BIT_ATI = (int)0x00000040;
    public static final int GL_MAX_DEBUG_MESSAGE_LENGTH = (int)0x9143;
    public static final int GL_TEXTURE_RECTANGLE_ARB = (int)0x84F5;
    public static final int GL_ANGLE_texture_compression_dxt1 = (int)1;
    public static final int GL_ANGLE_texture_compression_dxt3 = (int)1;
    public static final int GL_FACTOR_MAX_AMD = (int)0x901D;
    public static final int GL_PACK_RESAMPLE_OML = (int)0x8984;
    public static final int GL_ARB_stencil_texturing = (int)1;
    public static final int GL_ANGLE_texture_compression_dxt5 = (int)1;
    public static final int GL_COMBINE_ALPHA = (int)0x8572;
    public static final int GL_PATH_STROKE_BOUNDING_BOX_NV = (int)0x90A2;
    public static final int GL_PROXY_TEXTURE_1D_EXT = (int)0x8063;
    public static final int GL_PATH_GEN_COMPONENTS_NV = (int)0x90B3;
    public static final int GL_STORAGE_SHARED_APPLE = (int)0x85BF;
    public static final int GL_PROXY_TEXTURE_1D = (int)0x8063;
    public static final int GL_UNIFORM_BLOCK_INDEX = (int)0x8A3A;
    public static final int GL_COMBINE = (int)0x8570;
    public static final int GL_SOURCE1_ALPHA_ARB = (int)0x8589;
    public static final int GL_STATIC_ATI = (int)0x8760;
    public static final int GL_LUMINANCE_ALPHA_SIGNED_SGIX = (int)0x85E5;
    public static final int GL_NV_multisample_coverage = (int)1;
    public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = (int)0x824E;
    public static final int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT = (int)0x840A;
    public static final int GL_NORMAL_ARRAY_EXT = (int)0x8075;
    public static final int GL_NEGATIVE_W_EXT = (int)0x87DC;
    public static final int GL_NEVER = (int)0x0200;
    public static final int GL_DITHER = (int)0x0BD0;
    public static final int GL_DYNAMIC_ATI = (int)0x8761;
    public static final int GL_MODELVIEW_MATRIX = (int)0x0BA6;
    public static final int GL_PROXY_TEXTURE_3D = (int)0x8070;
    public static final int GL_MAX_TEXTURE_STACK_DEPTH = (int)0x0D39;
    public static final int GL_SAMPLE_COVERAGE_ARB = (int)0x80A0;
    public static final int GL_DOUBLE = (int)0x140A;
    public static final int GL_BLEND_SRC = (int)0x0BE1;
    public static final int GL_MAP_COHERENT_BIT = (int)0x00000080;
    public static final int GL_TEXTURE_CUBE_MAP_ARRAY_ARB = (int)0x9009;
    public static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = (int)0x8DE6;
    public static final int GL_BLEND = (int)0x0BE2;
    public static final int GL_PROXY_TEXTURE_2D = (int)0x8064;
    public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = (int)0x8A34;
    public static final int GL_COUNT_UP_NV = (int)0x9088;
    public static final int GL_SURFACE_REGISTERED_NV = (int)0x86FD;
    public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = (int)0x8DDD;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = (int)0x8CDA;
    public static final int GL_CURRENT_COLOR = (int)0x0B00;
    public static final int GL_VARIABLE_A_NV = (int)0x8523;
    public static final int GL_IMAGE_1D = (int)0x904C;
    public static final int GL_NUM_PASSES_ATI = (int)0x8970;
    public static final int GL_NV_framebuffer_multisample_coverage = (int)1;
    public static final int GL_RGB8I_EXT = (int)0x8D8F;
    public static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = (int)0x87F4;
    public static final int GL_IMAGE_2D = (int)0x904D;
    public static final int GL_TEXTURE_CUBE_MAP_EXT = (int)0x8513;
    public static final int GL_UNSIGNED_INT64_VEC4_NV = (int)0x8FF7;
    public static final int GL_TEXTURE_DEPTH = (int)0x8071;
    public static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = (int)0x87CF;
    public static final int GL_VERTEX_BINDING_OFFSET = (int)0x82D7;
    public static final int GL_UNSIGNED_SHORT_5_6_5 = (int)0x8363;
    public static final int GL_POST_COLOR_MATRIX_RED_SCALE = (int)0x80B4;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = (int)0x92C7;
    public static final int GL_FLOAT = (int)0x1406;
    public static final int GL_MAX_TEXTURE_UNITS = (int)0x84E2;
    public static final int GL_BUFFER_SERIALIZED_MODIFY_APPLE = (int)0x8A12;
    public static final int GL_FRAMEBUFFER_BLEND = (int)0x828B;
    public static final int GL_OFFSET_TEXTURE_SCALE_NV = (int)0x86E2;
    public static final int GL_BITMAP = (int)0x1A00;
    public static final int GL_EXT_texture_sRGB = (int)1;
    public static final int GL_PARAMETER_BUFFER_ARB = (int)0x80EE;
    public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = (int)0x9301;
    public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = (int)0x8E5E;
    public static final int GL_2PASS_1_SGIS = (int)0x80A3;
    public static final int GL_DEPTH_COMPONENT = (int)0x1902;
    public static final int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = (int)0x8E2F;
    public static final int GL_MAP_READ_BIT = (int)0x0001;
    public static final int GL_ARB_fragment_program_shadow = (int)1;
    public static final int GL_UNIFORM_MATRIX_STRIDE = (int)0x8A3D;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = (int)0x8518;
    public static final int GL_COMPRESSED_LUMINANCE_ALPHA = (int)0x84EB;
    public static final int GL_POLYGON_STIPPLE = (int)0x0B42;
    public static final int GL_RENDERBUFFER_DEPTH_SIZE_EXT = (int)0x8D54;
    public static final int GL_ONE_MINUS_SRC1_COLOR = (int)0x88FA;
    public static final int GL_TEXTURE5_ARB = (int)0x84C5;
    public static final int GL_SRC1_RGB = (int)0x8581;
    public static final int GL_VERTEX_ATTRIB_ARRAY4_NV = (int)0x8654;
    public static final int GL_COLOR_ATTACHMENT6_EXT = (int)0x8CE6;
    public static final int GL_SYNC_CL_EVENT_ARB = (int)0x8240;
    public static final int GL_SRC1_ALPHA = (int)0x8589;
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = (int)0x8645;
    public static final int GL_UNPACK_CONSTANT_DATA_SUNX = (int)0x81D5;
    public static final int GL_SAMPLER_BINDING = (int)0x8919;
    public static final int GL_NVX_gpu_memory_info = (int)1;
    public static final int GL_COPY_WRITE_BUFFER = (int)0x8F37;
    public static final int GL_UNCORRELATED_NV = (int)0x9282;
    public static final int GL_BOOL_VEC4_ARB = (int)0x8B59;
    public static final int GL_GEOMETRY_INPUT_TYPE = (int)0x8917;
    public static final int GL_FALSE = (int)0;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = (int)0x9069;
    public static final int GL_TEXTURE_NORMAL_EXT = (int)0x85AF;
    public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = (int)0x8C4E;
    public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = (int)0x92D1;
    public static final int GL_SHADER_SOURCE_LENGTH = (int)0x8B88;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = (int)0x8214;
    public static final int GL_MAP_STENCIL = (int)0x0D11;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = (int)0x8C80;
    public static final int GL_INVALID_VALUE = (int)0x0501;
    public static final int GL_STENCIL_BUFFER = (int)0x8224;
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = (int)0x88FE;
    public static final int GL_MAX_VARYING_COMPONENTS_EXT = (int)0x8B4B;
    public static final int GL_3DFX_multisample = (int)1;
    public static final int GL_HSL_LUMINOSITY_NV = (int)0x92B0;
    public static final int GL_SECONDARY_COLOR_ARRAY_POINTER = (int)0x845D;
    public static final int GL_UNIFORM_BUFFER_EXT = (int)0x8DEE;
    public static final int GL_STENCIL_TEST = (int)0x0B90;
    public static final int GL_QUAD_MESH_SUN = (int)0x8614;
    public static final int GL_RGB_422_APPLE = (int)0x8A1F;
    public static final int GL_BLUE_INTEGER = (int)0x8D96;
    public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = (int)0x8E5E;
    public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE = (int)0x845C;
    public static final int GL_LUMINANCE16UI_EXT = (int)0x8D7A;
    public static final int GL_INT_IMAGE_3D_EXT = (int)0x9059;
    public static final int GL_SOURCE2_ALPHA = (int)0x858A;
    public static final int GL_MULTISAMPLE_SGIS = (int)0x809D;
    public static final int GL_FULL_SUPPORT = (int)0x82B7;
    public static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = (int)0x825F;
    public static final int GL_EXT_geometry_shader4 = (int)1;
    public static final int GL_APPLE_pixel_buffer = (int)1;
    public static final int GL_INVERSE_NV = (int)0x862B;
    public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = (int)0x900E;
    public static final int GL_MAX_SAMPLES_ANGLE = (int)0x8D57;
    public static final int GL_PALETTE8_RGB8_OES = (int)0x8B95;
    public static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = (int)0x8521;
    public static final int GL_RENDERBUFFER_BINDING = (int)0x8CA7;
    public static final int GL_EXT_422_pixels = (int)1;
    public static final int GL_ONE_MINUS_CONSTANT_ALPHA = (int)0x8004;
    public static final int GL_DRAW_INDIRECT_LENGTH_NV = (int)0x8F42;
    public static final int GL_SAMPLER_2D_RECT = (int)0x8B63;
    public static final int GL_POINT_FADE_THRESHOLD_SIZE = (int)0x8128;
    public static final int GL_VECTOR_EXT = (int)0x87BF;
    public static final int GL_CURRENT_FOG_COORDINATE_EXT = (int)0x8453;
    public static final int GL_TIMEOUT_EXPIRED = (int)0x911B;
    public static final int GL_OUTPUT_FOG_EXT = (int)0x87BD;
    public static final int GL_VERTEX_ARRAY_BUFFER_BINDING = (int)0x8896;
    public static final int GL_FRAGMENT_LIGHTING_EXT = (int)0x8400;
    public static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = (int)0x87C7;
    public static final int GL_SAMPLE_COVERAGE_INVERT = (int)0x80AB;
    public static final int GL_RGB12_EXT = (int)0x8053;
    public static final int GL_COLOR_ALPHA_PAIRING_ATI = (int)0x8975;
    public static final int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = (int)0x8973;
    public static final int GL_MAX_COLOR_ATTACHMENTS_EXT = (int)0x8CDF;
    public static final int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = (int)0x8DA2;
    public static final int GL_NV_video_capture = (int)1;
    public static final int GL_MANUAL_GENERATE_MIPMAP = (int)0x8294;
    public static final int GL_WRAP_BORDER_SUN = (int)0x81D4;
    public static final int GL_PATH_GEN_MODE_NV = (int)0x90B0;
    public static final int GL_RENDERBUFFER_WIDTH_EXT = (int)0x8D42;
    public static final int GL_GEOMETRY_OUTPUT_TYPE_EXT = (int)0x8DDC;
    public static final int GL_OUTPUT_TEXTURE_COORD27_EXT = (int)0x87B8;
    public static final int GL_FOG = (int)0x0B60;
    public static final int GL_EXT_clip_volume_hint = (int)1;
    public static final int GL_FLOAT_MAT4x3 = (int)0x8B6A;
    public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = (int)0x82D5;
    public static final int GL_FLOAT_MAT4x2 = (int)0x8B69;
    public static final int GL_NV_pixel_data_range = (int)1;
    public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = (int)0x8E5E;
    public static final int GL_ARB_texture_compression_bptc = (int)1;
    public static final int GL_RESTART_PATH_NV = (int)0xF0;
    public static final int GL_INTERNALFORMAT_DEPTH_TYPE = (int)0x827C;
    public static final int GL_EXT_multi_draw_arrays = (int)1;
    public static final int GL_NV_draw_texture = (int)1;
    public static final int GL_MAX_CONVOLUTION_HEIGHT = (int)0x801B;
    public static final int GL_PROGRAM_OUTPUT = (int)0x92E4;
    public static final int GL_MAP1_VERTEX_ATTRIB7_4_NV = (int)0x8667;
    public static final int GL_COLOR_ATTACHMENT8_EXT = (int)0x8CE8;
    public static final int GL_COLOR_CLEAR_VALUE = (int)0x0C22;
    public static final int GL_MAP1_VERTEX_ATTRIB3_4_NV = (int)0x8663;
    public static final int GL_COMPRESSED_INTENSITY_ARB = (int)0x84EC;
    public static final int GL_STORAGE_PRIVATE_APPLE = (int)0x85BD;
    public static final int GL_NV_vertex_program = (int)1;
    public static final int GL_ATTRIB_ARRAY_POINTER_NV = (int)0x8645;
    public static final int GL_CODE_REGAL = (int)0x9363;
    public static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = (int)0x88AB;
    public static final int GL_TEXTURE_SAMPLES = (int)0x9106;
    public static final int GL_TEXTURE_DS_SIZE_NV = (int)0x871D;
    public static final int GL_RED_INTEGER = (int)0x8D94;
    public static final int GL_DYNAMIC_COPY_ARB = (int)0x88EA;
    public static final int GL_422_REV_AVERAGE_EXT = (int)0x80CF;
    public static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = (int)0x8DE8;
    public static final int GL_8X_BIT_ATI = (int)0x00000004;
    public static final int GL_COLOR_TABLE_BLUE_SIZE = (int)0x80DC;
    public static final int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = (int)0x808C;
    public static final int GL_MULTISAMPLE_BIT_3DFX = (int)0x20000000;
    public static final int GL_CONTRAST_NV = (int)0x92A1;
    public static final int GL_RELATIVE_LINE_TO_NV = (int)0x05;
    public static final int GL_FIRST_VERTEX_CONVENTION = (int)0x8E4D;
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV = (int)0x8C3B;
    public static final int GL_ALPHA8_SNORM = (int)0x9014;
    public static final int GL_SHADER_STORAGE_BLOCK = (int)0x92E6;
    public static final int GL_TEXTURE_INTENSITY_SIZE = (int)0x8061;
    public static final int GL_TEXTURE_BLUE_TYPE_ARB = (int)0x8C12;
    public static final int GL_MAX_SUBROUTINES = (int)0x8DE7;
    public static final int GL_RGB9_E5_EXT = (int)0x8C3D;
    public static final int GL_TEXTURE_CONSTANT_DATA_SUNX = (int)0x81D6;
    public static final int GL_PIXEL_PACK_BUFFER_ARB = (int)0x88EB;
    public static final int GL_TRANSFORM_BIT = (int)0x00001000;
    public static final int GL_VERSION_3_0 = (int)1;
    public static final int GL_VERSION_3_1 = (int)1;
    public static final int GL_Z4Y12Z4CB12Z4CR12_444_NV = (int)0x9037;
    public static final int GL_TRANSFORM_HINT_APPLE = (int)0x85B1;
    public static final int GL_QUADS = (int)0x0007;
    public static final int GL_VERSION_3_2 = (int)1;
    public static final int GL_VERSION_3_3 = (int)1;
    public static final int GL_STENCIL_PASS_DEPTH_PASS = (int)0x0B96;
    public static final int GL_INTERLEAVED_ATTRIBS_NV = (int)0x8C8C;
    public static final int GL_EDGE_FLAG = (int)0x0B43;
    public static final int GL_DOUBLE_MAT4x3_EXT = (int)0x8F4E;
    public static final int GL_MAX_LIGHTS = (int)0x0D31;
    public static final int GL_ARB_texture_env_add = (int)1;
    public static final int GL_AFFINE_3D_NV = (int)0x9094;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = (int)0x8DD7;
    public static final int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = (int)0x885D;
    public static final int GL_GREEN_INTEGER_EXT = (int)0x8D95;
    public static final int GL_TEXTURE_OUTPUT_RGB_ATIX = (int)0x8748;
    public static final int GL_ARB_enhanced_layouts = (int)1;
    public static final int GL_PERFMON_RESULT_AMD = (int)0x8BC6;
    public static final int GL_SGIX_texture_multi_buffer = (int)1;
    public static final int GL_SAMPLES_EXT = (int)0x80A9;
    public static final int GL_PROGRAM_TEMPORARIES_ARB = (int)0x88A4;
    public static final int GL_MAX_COLOR_ATTACHMENTS = (int)0x8CDF;
    public static final int GL_SCREEN_NV = (int)0x9295;
    public static final int GL_SAMPLE_MASK_VALUE_EXT = (int)0x80AA;
    public static final int GL_SAMPLER_1D_ARB = (int)0x8B5D;
    public static final int GL_CURRENT_SAMPLE_COUNT_QUERY_NV = (int)0x8865;
    public static final int GL_ARB_shading_language_420pack = (int)1;
    public static final int GL_INT_IMAGE_BUFFER = (int)0x905C;
    public static final int GL_STREAM_READ_ARB = (int)0x88E1;
    public static final int GL_FRAMEBUFFER_BARRIER_BIT_EXT = (int)0x00000400;
    public static final int GL_POST_COLOR_MATRIX_COLOR_TABLE = (int)0x80D2;
    public static final int GL_INT_SAMPLER_2D_EXT = (int)0x8DCA;
    public static final int GL_COLOR_ATTACHMENT15_EXT = (int)0x8CEF;
    public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = (int)0x92C6;
    public static final int GL_VIEW_CLASS_S3TC_DXT3_RGBA = (int)0x82CE;
    public static final int GL_MAX_VERTEX_STREAMS_ATI = (int)0x876B;
    public static final int GL_CONTEXT_PROFILE_MASK = (int)0x9126;
    public static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = (int)0x8A05;
    public static final int GL_PRIMITIVE_ID_NV = (int)0x8C7C;
    public static final int GL_VERTEX_ATTRIB_MAP1_APPLE = (int)0x8A00;
    public static final int GL_ARRAY_BUFFER_ARB = (int)0x8892;
    public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = (int)0x8C2D;
    public static final int GL_ATTENUATION_EXT = (int)0x834D;
    public static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = (int)0x8E48;
    public static final int GL_OUTPUT_TEXTURE_COORD9_EXT = (int)0x87A6;
    public static final int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = (int)0x91A9;
    public static final int GL_INT16_VEC3_NV = (int)0x8FE6;
    public static final int GL_QUERY_BUFFER_BINDING_AMD = (int)0x9193;
    public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = (int)0x8E47;
    public static final int GL_EXT_texture3D = (int)1;
    public static final int GL_BLEND_SRC_RGB_EXT = (int)0x80C9;
    public static final int GL_IMAGE_BINDING_LEVEL = (int)0x8F3B;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = (int)0x93D7;
    public static final int GL_TEXTURE_GATHER = (int)0x82A2;
    public static final int GL_SGIX_tag_sample_buffer = (int)1;
    public static final int GL_MIN_GREEN_SGIS = (int)0x85A8;
    public static final int GL_LUMINANCE4_ALPHA4 = (int)0x8043;
    public static final int GL_OUTPUT_COLOR0_EXT = (int)0x879B;
    public static final int GL_ONE_MINUS_CONSTANT_COLOR_EXT = (int)0x8002;
    public static final int GL_FOG_COORDINATE_ARRAY_TYPE = (int)0x8454;
    public static final int GL_LUMINANCE32UI_EXT = (int)0x8D74;
    public static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = (int)0x880D;
    public static final int GL_TEXTURE_MIN_FILTER = (int)0x2801;
    public static final int GL_MAX_ATTRIB_STACK_DEPTH = (int)0x0D35;
    public static final int GL_NV_blend_equation_advanced_coherent = (int)1;
    public static final int GL_INVARIANT_EXT = (int)0x87C2;
    public static final int GL_MATRIX_PALETTE_ARB = (int)0x8840;
    public static final int GL_VIDEO_COLOR_CONVERSION_MAX_NV = (int)0x902A;
    public static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = (int)0x88A2;
    public static final int GL_MODELVIEW30_ARB = (int)0x873E;
    public static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = (int)0x8DA0;
    public static final int GL_LUMINANCE12 = (int)0x8041;
    public static final int GL_VERTEX_SHADER = (int)0x8B31;
    public static final int GL_LUMINANCE16 = (int)0x8042;
    public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = (int)0x8851;
    public static final int GL_ARB_pixel_buffer_object = (int)1;
    public static final int GL_ANGLE_depth_texture = (int)1;
    public static final int GL_SAMPLER_BUFFER_EXT = (int)0x8DC2;
    public static final int GL_RGBA_INTEGER_MODE_EXT = (int)0x8D9E;
    public static final int GL_ALPHA_INTEGER = (int)0x8D97;
    public static final int GL_ATI_vertex_array_object = (int)1;
    public static final int GL_MAX_PROGRAM_ATTRIBS_ARB = (int)0x88AD;
    public static final int GL_FONT_Y_MAX_BOUNDS_BIT_NV = (int)0x00080000;
    public static final int GL_CON_2_ATI = (int)0x8943;
    public static final int GL_SUN_slice_accum = (int)1;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = (int)0x92CB;
    public static final int GL_TEXTURE_2D_ARRAY = (int)0x8C1A;
    public static final int GL_IMAGE_TEXEL_SIZE = (int)0x82A7;
    public static final int GL_UNDEFINED_VERTEX = (int)0x8260;
    public static final int GL_INTERLEAVED_ATTRIBS = (int)0x8C8C;
    public static final int GL_HISTOGRAM_WIDTH = (int)0x8026;
    public static final int GL_FRONT = (int)0x0404;
    public static final int GLEW_VERSION_MICRO = (int)4;
    public static final int GL_ATIX_texture_env_combine3 = (int)1;
    public static final int GL_COLOR_BUFFER_BIT = (int)0x00004000;
    public static final int GL_LUMINANCE16_ALPHA16 = (int)0x8048;
    public static final int GL_DOT3_RGBA_ARB = (int)0x86AF;
    public static final int GL_FUNC_SUBTRACT_EXT = (int)0x800A;
    public static final int GL_1PASS_EXT = (int)0x80A1;
    public static final int GL_ALPHA_INTEGER_EXT = (int)0x8D97;
    public static final int GL_SGIX_blend_alpha_minmax = (int)1;
    public static final int GL_VERTEX_ARRAY_POINTER = (int)0x808E;
    public static final int GL_COMBINER2_NV = (int)0x8552;
    public static final int GL_MUL_ATI = (int)0x8964;
    public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = (int)0x9067;
    public static final int GL_TEXTURE_MIN_LOD = (int)0x813A;
    public static final int GL_TESS_CONTROL_OUTPUT_VERTICES = (int)0x8E75;
    public static final int GL_TEXTURE_SWIZZLE_A = (int)0x8E45;
    public static final int GL_TEXTURE_SWIZZLE_B = (int)0x8E44;
    public static final int GL_TEXTURE_SWIZZLE_G = (int)0x8E43;
    public static final int GL_RGBA12_EXT = (int)0x805A;
    public static final int GL_MULTISAMPLE_EXT = (int)0x809D;
    public static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS = (int)0x80BB;
    public static final int GL_CIRCULAR_CCW_ARC_TO_NV = (int)0xF8;
    public static final int GL_RGB32UI = (int)0x8D71;
    public static final int GL_INT_IMAGE_2D_MULTISAMPLE = (int)0x9060;
    public static final int GL_COLOR_LOGIC_OP = (int)0x0BF2;
    public static final int GL_TEXTURE_SWIZZLE_R = (int)0x8E42;
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = (int)0x8905;
    public static final int GL_DUDV_ATI = (int)0x8779;
    public static final int GL_NV_vertex_program3 = (int)1;
    public static final int GL_NV_vertex_program2 = (int)1;
    public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = (int)0x8A2B;
    public static final int GL_NV_vertex_program4 = (int)1;
    public static final int GL_TRANSPOSE_TEXTURE_MATRIX = (int)0x84E5;
    public static final int GL_MAP1_VERTEX_ATTRIB0_4_NV = (int)0x8660;
    public static final int GL_IMAGE_BUFFER = (int)0x9051;
    public static final int GL_BLEND_EQUATION = (int)0x8009;
    public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING = (int)0x889E;
    public static final int GL_MAP2_VERTEX_ATTRIB9_4_NV = (int)0x8679;
    public static final int GL_PROXY_TEXTURE_1D_STACK_MESAX = (int)0x875B;
    public static final int GL_GEOMETRY_SHADER_BIT = (int)0x00000004;
    public static final int GL_EXT_blend_func_separate = (int)1;
    public static final int GL_IMAGE_3D = (int)0x904E;
    public static final int GL_MAX_FRAMEBUFFER_WIDTH = (int)0x9315;
    public static final int GL_BLEND_OVERLAP_NV = (int)0x9281;
    public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = (int)0x8E5B;
    public static final int GL_LIGHT_ENV_MODE_EXT = (int)0x8407;
    public static final int GL_UTF8_NV = (int)0x909A;
    public static final int GL_INTERLACE_OML = (int)0x8980;
    public static final int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = (int)0x80BA;
    public static final int GL_VIEW_CLASS_128_BITS = (int)0x82C4;
    public static final int GL_NV_texture_multisample = (int)1;
    public static final int GL_CONSTANT_COLOR_EXT = (int)0x8001;
    public static final int GL_V2F = (int)0x2A20;
    public static final int GL_CONSTANT = (int)0x8576;
    public static final int GL_ARB_multi_bind = (int)1;
    public static final int GL_EXP = (int)0x0800;
    public static final int GL_V3F = (int)0x2A21;
    public static final int GL_UNPACK_ROW_LENGTH = (int)0x0CF2;
    public static final int GL_ALPHA_SIGNED_SGIX = (int)0x85E2;
    public static final int GL_EXT_rescale_normal = (int)1;
    public static final int GL_SGIS_multisample = (int)1;
    public static final int GL_IMAGE_BINDING_ACCESS_EXT = (int)0x8F3E;
    public static final int GL_COMPRESSED_RG11_EAC = (int)0x9272;
    public static final int GL_ARB_texture_rgb10_a2ui = (int)1;
    public static final int GL_TEXTURE_BINDING_BUFFER_ARB = (int)0x8C2C;
    public static final int GL_RELATIVE_QUADRATIC_CURVE_TO_NV = (int)0x0B;
    public static final int GL_HISTOGRAM_RED_SIZE = (int)0x8028;
    public static final int GL_TEXTURE_RECTANGLE = (int)0x84F5;
    public static final int GL_422_AVERAGE_EXT = (int)0x80CE;
    public static final int GL_DEBUG_TYPE_OTHER = (int)0x8251;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = (int)0x8803;
    public static final int GL_INDEX_ARRAY_POINTER = (int)0x8091;
    public static final int GL_STENCIL_CLEAR_VALUE = (int)0x0B91;
    public static final int GL_T2F_C4F_N3F_V3F = (int)0x2A2C;
    public static final int GL_ALPHA_TEST = (int)0x0BC0;
    public static final int GL_INT8_VEC2_NV = (int)0x8FE1;
    public static final int GL_RGBA16I = (int)0x8D88;
    public static final int GL_BACK_RIGHT = (int)0x0403;
    public static final int GL_RGBA16F = (int)0x881A;
    public static final int GL_CONVEX_HULL_NV = (int)0x908B;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE = (int)0x8DD4;
    public static final int GL_TRANSLATE_Y_NV = (int)0x908F;
    public static final int GL_ARB_sample_shading = (int)1;
    public static final int GL_INT_SAMPLER_RENDERBUFFER_NV = (int)0x8E57;
    public static final int GL_GREATER = (int)0x0204;
    public static final int GL_BGRA = (int)0x80E1;
    public static final int GL_COLOR_TABLE_INTENSITY_SIZE_SGI = (int)0x80DF;
    public static final int GL_INT_IMAGE_1D_EXT = (int)0x9057;
    public static final int GL_COUNTER_RANGE_AMD = (int)0x8BC1;
    public static final int GL_FOG_START = (int)0x0B63;
    public static final int GL_STREAM_COPY_ARB = (int)0x88E2;
    public static final int GL_OUTPUT_TEXTURE_COORD7_EXT = (int)0x87A4;
    public static final int GL_FOG_COORDINATE_ARRAY_STRIDE = (int)0x8455;
    public static final int GL_SRGB8_ALPHA8_EXT = (int)0x8C43;
    public static final int GL_MIN_LOD_WARNING_AMD = (int)0x919C;
    public static final int GL_UNIFORM_IS_ROW_MAJOR = (int)0x8A3E;
    public static final int GL_FOG_COORDINATE_EXT = (int)0x8451;
    public static final int GLEW_ERROR_GLX_VERSION_11_ONLY = (int)3;
    public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = (int)0x90DB;
    public static final int GL_RELATIVE_VERTICAL_LINE_TO_NV = (int)0x09;
    public static final int GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = (int)0x85C3;
    public static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = (int)0x8510;
    public static final int GL_POST_CONVOLUTION_GREEN_BIAS = (int)0x8021;
    public static final int GL_ARB_texture_storage_multisample = (int)1;
    public static final int GL_OBJECT_INFO_LOG_LENGTH_ARB = (int)0x8B84;
    public static final int GL_ATOMIC_COUNTER_BARRIER_BIT = (int)0x00001000;
    public static final int GL_VERTEX_ELEMENT_SWIZZLE_AMD = (int)0x91A4;
    public static final int GL_MATRIX30_ARB = (int)0x88DE;
    public static final int GL_MAP1_VERTEX_ATTRIB6_4_NV = (int)0x8666;
    public static final int GL_POINT_SIZE_RANGE = (int)0x0B12;
    public static final int GL_MAX_PROGRAM_LOOP_DEPTH_NV = (int)0x88F7;
    public static final int GL_GEOMETRY_SHADER_ARB = (int)0x8DD9;
    public static final int GL_COLOR_ATTACHMENT3_EXT = (int)0x8CE3;
    public static final int GL_EXT_direct_state_access = (int)1;
    public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = (int)0x8243;
    public static final int GL_GET_TEXTURE_IMAGE_FORMAT = (int)0x8291;
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = (int)0x8C76;
    public static final int GL_TEXTURE_BINDING_RECTANGLE_ARB = (int)0x84F6;
    public static final int GL_RGBA32F_ARB = (int)0x8814;
    public static final int GL_LINES = (int)0x0001;
    public static final int GL_LEFT = (int)0x0406;
    public static final int GL_SHADER_TYPE = (int)0x8B4F;
    public static final int GL_SUBTRACT_ARB = (int)0x84E7;
    public static final int GL_OUTPUT_TEXTURE_COORD17_EXT = (int)0x87AE;
    public static final int GL_DEBUG_CALLBACK_USER_PARAM_ARB = (int)0x8245;
    public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = (int)0x90DF;
    public static final int GL_MAP2_VERTEX_ATTRIB11_4_NV = (int)0x867B;
    public static final int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = (int)0x9038;
    public static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = (int)0x9068;
    public static final int GL_PIXEL_UNPACK_BUFFER_EXT = (int)0x88EC;
    public static final int GL_NV_depth_buffer_float = (int)1;
    public static final int GL_OBJECT_PLANE = (int)0x2501;
    public static final int GL_PIXEL_MAP_I_TO_G_SIZE = (int)0x0CB3;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = (int)0x92CA;
    public static final int GL_MAX_VARYING_COMPONENTS = (int)0x8B4B;
    public static final int GL_INT_SAMPLER_1D_EXT = (int)0x8DC9;
    public static final int GL_UNSIGNED_INT_IMAGE_1D_EXT = (int)0x9062;
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = (int)0x86A2;
    public static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = (int)0x887C;
    public static final int GL_3D_COLOR = (int)0x0602;
    public static final int GL_MAX_HEIGHT = (int)0x827F;
    public static final int GL_SHADER_OPERATION_NV = (int)0x86DF;
    public static final int GL_RGBA_S3TC = (int)0x83A2;
    public static final int GL_DEPTH_COMPONENT32_SGIX = (int)0x81A7;
    public static final int GL_POST_CONVOLUTION_RED_BIAS = (int)0x8020;
    public static final int GL_BUMP_NUM_TEX_UNITS_ATI = (int)0x8777;
    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = (int)0x90C9;
    public static final int GL_TEXTURE_GEN_Q = (int)0x0C63;
    public static final int GL_TEXTURE_GEN_R = (int)0x0C62;
    public static final int GL_TEXTURE_GEN_S = (int)0x0C60;
    public static final int GL_TEXTURE_GEN_T = (int)0x0C61;
    public static final int GL_SYNC_X11_FENCE_EXT = (int)0x90E1;
    public static final int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = (int)0x82B3;
    public static final int GL_NUM_PROGRAM_BINARY_FORMATS = (int)0x87FE;
    public static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE = (int)0x80B7;
    public static final int GL_BOOL_VEC3_ARB = (int)0x8B58;
    public static final int GL_MATRIX6_NV = (int)0x8636;
    public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = (int)0x87CE;
    public static final int GL_INDEX_ARRAY_STRIDE_EXT = (int)0x8086;
    public static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = (int)0x8F27;
    public static final int GL_RGB10_A2UI = (int)0x906F;
    public static final int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = (int)0x86D9;
    public static final int GL_FLOAT_MAT3x2 = (int)0x8B67;
    public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = (int)0x8E83;
    public static final int GL_REPLACEMENT_CODE_ARRAY_SUN = (int)0x85C0;
    public static final int GL_MIN_INTENSITY_SGIS = (int)0x85FA;
    public static final int GL_MAX_ARRAY_TEXTURE_LAYERS = (int)0x88FF;
    public static final int GL_VERTEX_STREAM5_ATI = (int)0x8772;
    public static final int GL_FLOAT_MAT3x4 = (int)0x8B68;
    public static final int GL_EYE_LINEAR = (int)0x2400;
    public static final int GL_MAP2_VERTEX_ATTRIB5_4_NV = (int)0x8675;
    public static final int GL_INT_IMAGE_CUBE = (int)0x905B;
    public static final int GL_COMPUTE_SHADER_BIT = (int)0x00000020;
    public static final int GL_DT_BIAS_NV = (int)0x8717;
    public static final int GL_OP_NEGATE_EXT = (int)0x8783;
    public static final int GL_COMBINER7_NV = (int)0x8557;
    public static final int GL_CND0_ATI = (int)0x896B;
    public static final int GL_DOUBLE_VEC2_EXT = (int)0x8FFC;
    public static final int GL_QUADRATIC_CURVE_TO_NV = (int)0x0A;
    public static final int GL_SAMPLER_1D_ARRAY_SHADOW_EXT = (int)0x8DC3;
    public static final int GL_TESSELLATION_FACTOR_AMD = (int)0x9005;
    public static final int GL_4D_COLOR_TEXTURE = (int)0x0604;
    public static final int GL_STRICT_SCISSOR_HINT_PGI = (int)107032;
    public static final int GL_NV_compute_program5 = (int)1;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = (int)0x92C9;
    public static final int GL_NV_fragment_program = (int)1;
    public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = (int)0x889A;
    public static final int GL_QUERY_RESULT_AVAILABLE_ANGLE = (int)0x8867;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = (int)0x8CD3;
    public static final int GL_PACK_IMAGE_HEIGHT = (int)0x806C;
    public static final int GL_OBJECT_COMPILE_STATUS_ARB = (int)0x8B81;
    public static final int GL_FLOAT_MAT4_ARB = (int)0x8B5C;
    public static final int GL_MAP1_VERTEX_4 = (int)0x0D98;
    public static final int GL_MAP1_VERTEX_3 = (int)0x0D97;
    public static final int GL_HALF_BIT_ATI = (int)0x00000008;
    public static final int GL_NV_multisample_filter_hint = (int)1;
    public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = (int)0x8264;
    public static final int GL_PACK_COMPRESSED_BLOCK_SIZE = (int)0x912E;
    public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = (int)0x9104;
    public static final int GL_DYNAMIC_STORAGE_BIT = (int)0x0100;
    public static final int GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = (int)0x10;
    public static final int GL_ARB_framebuffer_sRGB = (int)1;
    public static final int GL_DEPTH_WRITEMASK = (int)0x0B72;
    public static final int GL_DOT_PRODUCT_TEXTURE_3D_NV = (int)0x86EF;
    public static final int GL_ADD_SIGNED_EXT = (int)0x8574;
    public static final int GL_OUTPUT_TEXTURE_COORD4_EXT = (int)0x87A1;
    public static final int GL_ELEMENT_ARRAY_TYPE_ATI = (int)0x8769;
    public static final int GL_DYNAMIC_DRAW = (int)0x88E8;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR = (int)0x93BA;
    public static final int GL_INT64_NV = (int)0x140E;
    public static final int GL_READ_FRAMEBUFFER = (int)0x8CA8;
    public static final int GL_MAX_VARYING_FLOATS_ARB = (int)0x8B4B;
    public static final int GL_POST_CONVOLUTION_BLUE_BIAS = (int)0x8022;
    public static final int GL_CONSTANT_BORDER = (int)0x8151;
    public static final int GL_FRAMEBUFFER_COMPLETE_EXT = (int)0x8CD5;
    public static final int GL_SURFACE_MAPPED_NV = (int)0x8700;
    public static final int GL_DUP_FIRST_CUBIC_CURVE_TO_NV = (int)0xF2;
    public static final int GL_NEAREST_MIPMAP_LINEAR = (int)0x2702;
    public static final int GL_SUNX_constant_data = (int)1;
    public static final int GL_ALPHA16_EXTENDED_RANGE_SGIX = (int)0x85F4;
    public static final int GL_POINT_SPRITE_CULL_CLIP_ATIX = (int)0x60B5;
    public static final int GL_4PASS_0_SGIS = (int)0x80A4;
    public static final int GL_STREAM_READ = (int)0x88E1;
    public static final int GL_ACCUM_CLEAR_VALUE = (int)0x0B80;
    public static final int GL_PATH_STROKE_WIDTH_NV = (int)0x9075;
    public static final int GL_OUTPUT_TEXTURE_COORD1_EXT = (int)0x879E;
    public static final int GL_GEOMETRY_SUBROUTINE_UNIFORM = (int)0x92F1;
    public static final int GL_DEPTH32F_STENCIL8 = (int)0x8CAD;
    public static final int GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = (int)0x00001000;
    public static final int GL_SIGNED_INTENSITY_NV = (int)0x8707;
    public static final int GL_RGBA16 = (int)0x805B;
    public static final int GL_INTERPOLATE_EXT = (int)0x8575;
    public static final int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = (int)0x817C;
    public static final int GL_MODELVIEW1_EXT = (int)0x850A;
    public static final int GL_CONSTANT_ATTENUATION = (int)0x1207;
    public static final int GL_QUERY_BUFFER = (int)0x9192;
    public static final int GL_RGBA12 = (int)0x805A;
    public static final int GL_TEXTURE_BINDING_RECTANGLE = (int)0x84F6;
    public static final int GL_CURRENT_PALETTE_MATRIX_ARB = (int)0x8843;
    public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = (int)0x8DE0;
    public static final int GL_QUERY_BY_REGION_NO_WAIT = (int)0x8E16;
    public static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = (int)0x00000020;
    public static final int GL_NV_blend_square = (int)1;
    public static final int GL_TEXTURE_1D_BINDING_EXT = (int)0x8068;
    public static final int GL_FASTEST = (int)0x1101;
    public static final int GL_SOURCE0_RGB_EXT = (int)0x8580;
    public static final int GL_INT_IMAGE_CUBE_EXT = (int)0x905B;
    public static final int GL_SCALED_RESOLVE_NICEST_EXT = (int)0x90BB;
    public static final int GL_HISTOGRAM = (int)0x8024;
    public static final int GL_MIN_EXT = (int)0x8007;
    public static final int GL_TANGENT_ARRAY_EXT = (int)0x8439;
    public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = (int)0x8247;
    public static final int GL_PROGRAM_BINARY_ANGLE = (int)0x93A6;
    public static final int GL_ACCUM_ALPHA_BITS = (int)0x0D5B;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = (int)0x8213;
    public static final int GL_MODELVIEW5_ARB = (int)0x8725;
    public static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI = (int)0x87F3;
    public static final int GL_MULT = (int)0x0103;
    public static final int GL_AUX_DEPTH_STENCIL_APPLE = (int)0x8A14;
    public static final int GL_COMBINER_MAPPING_NV = (int)0x8543;
    public static final int GL_DEPTH_RENDERABLE = (int)0x8287;
    public static final int GL_PROJECTION_MATRIX = (int)0x0BA7;
    public static final int GL_POINT_SPRITE_CULL_MODE_ATIX = (int)0x60B3;
    public static final int GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = (int)0x91BF;
    public static final int GL_COMBINER4_NV = (int)0x8554;
    public static final int GL_INT16_VEC2_NV = (int)0x8FE5;
    public static final int GL_TEXTURE = (int)0x1702;
    public static final int GL_RGB16F = (int)0x881B;
    public static final int GL_SOURCE0_ALPHA_ARB = (int)0x8588;
    public static final int GL_COMPRESSED_RED_GREEN_RGTC2_EXT = (int)0x8DBD;
    public static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = (int)0x8805;
    public static final int GL_RGB16I = (int)0x8D89;
    public static final int GL_SAMPLER_CUBE_SHADOW = (int)0x8DC5;
    public static final int GL_TEXTURE_IMAGE_TYPE = (int)0x8290;
    public static final int GL_COLOR_TABLE_GREEN_SIZE = (int)0x80DB;
    public static final int GL_ARB_compatibility = (int)1;
    public static final int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = (int)0x8089;
    public static final int GL_NV_vertex_array_range2 = (int)1;
    public static final int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = (int)0x8360;
    public static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = (int)0x9056;
    public static final int GL_EXT_texture = (int)1;
    public static final int GL_NUM_COMPATIBLE_SUBROUTINES = (int)0x8E4A;
    public static final int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = (int)0x83F0;
    public static final int GL_ARB_shader_bit_encoding = (int)1;
    public static final int GL_EDGE_FLAG_ARRAY_STRIDE = (int)0x808C;
    public static final int GL_COLOR_TABLE_ALPHA_SIZE = (int)0x80DD;
    public static final int GL_FOG_DISTANCE_MODE_NV = (int)0x855A;
    public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = (int)0x90D8;
    public static final int GL_FLOAT_RG16_NV = (int)0x8886;
    public static final int GL_NO_RESET_NOTIFICATION_ARB = (int)0x8261;
    public static final int GL_MIN_LUMINANCE_SGIS = (int)0x85F8;
    public static final int GL_APPLE_row_bytes = (int)1;
    public static final int GL_PATCH_VERTICES = (int)0x8E72;
    public static final int GL_TEXTURE26_ARB = (int)0x84DA;
    public static final int GL_ARB_texture_stencil8 = (int)1;
    public static final int GL_CURRENT_RASTER_POSITION = (int)0x0B07;
    public static final int GL_COMPRESSED_RGBA_FXT1_3DFX = (int)0x86B1;
    public static final int GL_PROGRAM_BINDING_ARB = (int)0x8677;
    public static final int GL_MAX_CLIP_PLANES = (int)0x0D32;
    public static final int GL_ACTIVE_UNIFORMS = (int)0x8B86;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARB = (int)0x851B;
    public static final int GL_ALPHA16UI_EXT = (int)0x8D78;
    public static final int GL_OFFSET_HILO_TEXTURE_2D_NV = (int)0x8854;
    public static final int GL_FRAGMENT_DEPTH_EXT = (int)0x8452;
    public static final int GL_TRIANGLE_STRIP = (int)0x0005;
    public static final int GL_MATRIX_MODE = (int)0x0BA0;
    public static final int GL_VERSION_2_1 = (int)1;
    public static final int GL_VERSION_2_0 = (int)1;
    public static final int GL_EXT_packed_depth_stencil = (int)1;
    public static final int GL_COMBINE_RGB_EXT = (int)0x8571;
    public static final int GL_RGBA8I = (int)0x8D8E;
    public static final int GL_UPPER_LEFT = (int)0x8CA2;
    public static final int GL_MAX_PROGRAM_MATRICES_ARB = (int)0x862F;
    public static final int GL_SUN_triangle_list = (int)1;
    public static final int GL_NAMED_STRING_TYPE_ARB = (int)0x8DEA;
    public static final int GL_COLOR_INDEX8_EXT = (int)0x80E5;
    public static final int GL_CURRENT_RASTER_POSITION_VALID = (int)0x0B08;
    public static final int GL_FOG_SPECULAR_TEXTURE_WIN = (int)0x80EC;
    public static final int GL_OUTPUT_TEXTURE_COORD25_EXT = (int)0x87B6;
    public static final int GL_EXT_fog_coord = (int)1;
    public static final int GL_ARB_gpu_shader_fp64 = (int)1;
    public static final int GL_ARB_transform_feedback_instanced = (int)1;
    public static final int GL_COLOR_ATTACHMENT13_EXT = (int)0x8CED;
    public static final int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = (int)0x8532;
    public static final int GL_FOG_BIT = (int)0x00000080;
    public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = (int)0x87CD;
    public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = (int)0x8DDF;
    public static final int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = (int)0x8DDE;
    public static final int GL_RGB_S3TC = (int)0x83A0;
    public static final int GL_TEXTURE_BLUE_SIZE = (int)0x805E;
    public static final int GL_PIXEL_MAP_R_TO_R = (int)0x0C76;
    public static final int GL_EXT_vertex_array = (int)1;
    public static final int GL_STENCIL_BACK_FAIL = (int)0x8801;
    public static final int GL_TEXTURE_POINT_SPRITE_ATIX = (int)0x60B2;
    public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = (int)0x824E;
    public static final int GL_INT_IMAGE_2D_ARRAY = (int)0x905E;
    public static final int GL_FILL = (int)0x1B02;
    public static final int GL_RGBA_FLOAT32_ATI = (int)0x8814;
    public static final int GL_AMD_query_buffer_object = (int)1;
    public static final int GL_TEXTURE_SWIZZLE_RGBA_EXT = (int)0x8E46;
    public static final int GL_PROGRAM_POINT_SIZE = (int)0x8642;
    public static final int GL_VERTEX_ARRAY_STRIDE = (int)0x807C;
    public static final int GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = (int)0x83F3;
    public static final int GL_CURRENT_BIT = (int)0x00000001;
    public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = (int)0x910B;
    public static final int GL_SOURCE1_RGB = (int)0x8581;
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = (int)0x8B4D;
    public static final int GL_EXT_texture_array = (int)1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_ANGLE = (int)0x93A3;
    public static final int GL_EXT_draw_instanced = (int)1;
    public static final int GL_LO_BIAS_NV = (int)0x8715;
    public static final int GL_GENERATE_MIPMAP_SGIS = (int)0x8191;
    public static final int GL_EXT_texture_perturb_normal = (int)1;
    public static final int GL_ALLOW_DRAW_WIN_HINT_PGI = (int)107023;
    public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = (int)0x8DD8;
    public static final int GL_DYNAMIC_READ = (int)0x88E9;
    public static final int GL_UNSIGNED_INT_VEC2_EXT = (int)0x8DC6;
    public static final int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = (int)0x8B89;
    public static final int GL_UNSIGNED_INT_2_10_10_10_REV = (int)0x8368;
    public static final int GL_DEBUG_SOURCE_API = (int)0x8246;
    public static final int GL_DEPTH_COMPONENT32_ARB = (int)0x81A7;
    public static final int GL_DEBUG_CALLBACK_FUNCTION = (int)0x8244;
    public static final int GL_ARB_map_buffer_alignment = (int)1;
    public static final int GL_DEPTH_COMPONENT16 = (int)0x81A5;
    public static final int GL_TEXTURE_POINT_MODE_ATIX = (int)0x60B0;
    public static final int GL_SRC_OUT_NV = (int)0x928C;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_EXT = (int)0x8C8E;
    public static final int GL_DSDT8_MAG8_NV = (int)0x870A;
    public static final int GL_MAX_TESS_PATCH_COMPONENTS = (int)0x8E84;
    public static final int GL_FLOAT_MAT3 = (int)0x8B5B;
    public static final int GL_FLOAT_MAT4 = (int)0x8B5C;
    public static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT = (int)0x87C9;
    public static final int GL_PIXEL_MAP_B_TO_B_SIZE = (int)0x0CB8;
    public static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = (int)0x880F;
    public static final int GL_POLYGON_OFFSET_UNITS = (int)0x2A00;
    public static final int GL_DEPTH_COMPONENT24 = (int)0x81A6;
    public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = (int)0x906A;
    public static final int GL_EVAL_2D_NV = (int)0x86C0;
    public static final int GL_BUMP_ENVMAP_ATI = (int)0x877B;
    public static final int GL_FLOAT_MAT2 = (int)0x8B5A;
    public static final int GL_STATIC_READ = (int)0x88E5;
    public static final int GL_ARB_shader_group_vote = (int)1;
    public static final int GL_OUTPUT_TEXTURE_COORD15_EXT = (int)0x87AC;
    public static final int GL_AUX2 = (int)0x040B;
    public static final int GL_PROGRAM_ERROR_POSITION_NV = (int)0x864B;
    public static final int GL_AUX3 = (int)0x040C;
    public static final int GL_AUX0 = (int)0x0409;
    public static final int GL_AUX1 = (int)0x040A;
    public static final int GL_DEPTH_COMPONENT32 = (int)0x81A7;
    public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = (int)0x8A35;
    public static final int GL_MATRIX0_ARB = (int)0x88C0;
    public static final int GL_WRITE_ONLY = (int)0x88B9;
    public static final int GL_INTERNALFORMAT_BLUE_SIZE = (int)0x8273;
    public static final int GL_DEBUG_SOURCE_THIRD_PARTY = (int)0x8249;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = (int)0x8C84;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = (int)0x8C7F;
    public static final int GL_MAP1_VERTEX_ATTRIB5_4_NV = (int)0x8665;
    public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = (int)0x90CD;
    public static final int GL_LOG_STATUS_REGAL = (int)0x9320;
    public static final int GL_DEPTH_STENCIL_TEXTURE_MODE = (int)0x90EA;
    public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = (int)0x8E81;
    public static final int GL_SRGB_ALPHA_EXT = (int)0x8C42;
    public static final int GL_MAP1_VERTEX_ATTRIB13_4_NV = (int)0x866D;
    public static final int GL_DT_SCALE_NV = (int)0x8711;
    public static final int GL_NV_fragment_program4 = (int)1;
    public static final int GL_NV_fragment_program2 = (int)1;
    public static final int GL_VIRTUAL_PAGE_SIZE_X_ARB = (int)0x9195;
    public static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = (int)0x87C8;
    public static final int GL_RGB10_EXT = (int)0x8052;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = (int)0x8DA7;
    public static final int GL_EXT_Cg_shader = (int)1;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = (int)0x8515;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = (int)0x8517;
    public static final int GL_HP_occlusion_test = (int)1;
    public static final int GL_KHR_texture_compression_astc_ldr = (int)1;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = (int)0x8519;
    public static final int GL_MODELVIEW19_ARB = (int)0x8733;
    public static final int GL_GEOMETRY_VERTICES_OUT_EXT = (int)0x8DDA;
    public static final int GL_EXT_texture_env_add = (int)1;
    public static final int GL_GLYPH_HEIGHT_BIT_NV = (int)0x02;
    public static final int GL_LUMINANCE = (int)0x1909;
    public static final int GL_SAMPLER_2D_ARB = (int)0x8B5E;
    public static final int GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = (int)0x9345;
    public static final int GL_BUFFER_ACCESS = (int)0x88BB;
    public static final int GL_ARB_internalformat_query = (int)1;
    public static final int GL_UNPACK_SKIP_ROWS = (int)0x0CF3;
    public static final int GL_OBJECT_BUFFER_USAGE_ATI = (int)0x8765;
    public static final int GL_DOT_PRODUCT_PASS_THROUGH_NV = (int)0x885B;
    public static final int GL_IMAGE_2D_RECT_EXT = (int)0x904F;
    public static final int GL_SMALL_CCW_ARC_TO_NV = (int)0x12;
    public static final int GL_DRAW_BUFFER14 = (int)0x8833;
    public static final int GL_DRAW_BUFFER15 = (int)0x8834;
    public static final int GL_DRAW_BUFFER12 = (int)0x8831;
    public static final int GL_TEXTURE_PRIORITY = (int)0x8066;
    public static final int GL_DRAW_BUFFER13 = (int)0x8832;
    public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = (int)0x8E5A;
    public static final int GL_DRAW_BUFFER10 = (int)0x882F;
    public static final int GL_DRAW_BUFFER11 = (int)0x8830;
    public static final int GL_EMULATION_REGAL = (int)0x9325;
    public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = (int)0x8365;
    public static final int GL_QUERY_RESULT_ANGLE = (int)0x8866;
    public static final int GL_AMD_multi_draw_indirect = (int)1;
    public static final int GL_BGR_INTEGER = (int)0x8D9A;
    public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = (int)0x84F8;
    public static final int GL_MATRIX18_ARB = (int)0x88D2;
    public static final int GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = (int)0x8C75;
    public static final int GL_RELATIVE_MOVE_TO_NV = (int)0x03;
    public static final int GL_CON_1_ATI = (int)0x8942;
    public static final int GL_ARRAY_SIZE = (int)0x92FB;
    public static final int GL_MAX_VARYING_FLOATS = (int)0x8B4B;
    public static final int GL_EVAL_VERTEX_ATTRIB6_NV = (int)0x86CC;
    public static final int GL_LINEAR_MIPMAP_NEAREST = (int)0x2701;
    public static final int GL_LOCATION_COMPONENT = (int)0x934A;
    public static final int GL_ALWAYS = (int)0x0207;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = (int)0x8DD5;
    public static final int GL_NORMAL_MAP_EXT = (int)0x8511;
    public static final int GL_SGIX_sprite = (int)1;
    public static final int GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = (int)0x04;
    public static final int GL_BOOL_VEC2 = (int)0x8B57;
    public static final int GL_BOOL_VEC4 = (int)0x8B59;
    public static final int GL_BOOL_VEC3 = (int)0x8B58;
    public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = (int)0x9101;
    public static final int GL_PRIMARY_COLOR_EXT = (int)0x8577;
    public static final int GL_VERTEX_ARRAY_POINTER_EXT = (int)0x808E;
    public static final int GL_IBM_texture_mirrored_repeat = (int)1;
    public static final int GL_VIRTUAL_PAGE_SIZE_X_AMD = (int)0x9195;
    public static final int GL_MODELVIEW10_ARB = (int)0x872A;
    public static final int GL_DRAW_BUFFER13_ARB = (int)0x8832;
    public static final int GL_POINT_SIZE = (int)0x0B11;
    public static final int GL_ARB_seamless_cubemap_per_texture = (int)1;
    public static final int GL_REFERENCED_BY_VERTEX_SHADER = (int)0x9306;
    public static final int GL_TRIANGLE_FAN = (int)0x0006;
    public static final int GL_RELATIVE_SMALL_CW_ARC_TO_NV = (int)0x15;
    public static final int GL_TEXTURE_VIEW_MIN_LEVEL = (int)0x82DB;
    public static final int GL_IMAGE_CUBE_MAP_ARRAY = (int)0x9054;
    public static final int GL_NV_texture_env_combine4 = (int)1;
    public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = (int)0x8E86;
    public static final int GL_SHADER_STORAGE_BARRIER_BIT = (int)0x2000;
    public static final int GL_PACK_SKIP_ROWS = (int)0x0D03;
    public static final int GL_ANGLE_instanced_arrays = (int)1;
    public static final int GL_POST_CONVOLUTION_BLUE_SCALE_EXT = (int)0x801E;
    public static final int GL_SGIX_texture_range = (int)1;
    public static final int GL_DRAW_BUFFER13_ATI = (int)0x8832;
    public static final int GL_SGIX_ir_instrument1 = (int)1;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = (int)0x889F;
    public static final int GL_OES_read_format = (int)1;
    public static final int GL_MAX_COMBINED_DIMENSIONS = (int)0x8282;
    public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = (int)0x851C;
    public static final int GL_SGI_texture_color_table = (int)1;
    public static final int GL_IMAGE_BUFFER_EXT = (int)0x9051;
    public static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = (int)0x8DBE;
    public static final int GL_CLOSE_PATH_NV = (int)0x00;
    public static final int GL_WRITE_PIXEL_DATA_RANGE_NV = (int)0x8878;
    public static final int GL_SAMPLES_3DFX = (int)0x86B4;
    public static final int GL_CONVOLUTION_FILTER_SCALE_EXT = (int)0x8014;
    public static final int GL_TESS_GEN_VERTEX_ORDER = (int)0x8E78;
    public static final int GL_MAT_SHININESS_BIT_PGI = (int)0x02000000;
    public static final int GL_ACTIVE_ATTRIBUTES = (int)0x8B89;
    public static final int GL_MAX_ELEMENTS_VERTICES_EXT = (int)0x80E8;
    public static final int GL_ARB_ES3_compatibility = (int)1;
    public static final int GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = (int)0x90BD;
    public static final int GL_INT64_VEC3_NV = (int)0x8FEA;
    public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = (int)0x83F2;
    public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = (int)0x8E8A;
    public static final int GL_MVP_MATRIX_EXT = (int)0x87E3;
    public static final int GL_TEXTURE_BINDING_RECTANGLE_NV = (int)0x84F6;
    public static final int GL_REGISTER_COMBINERS_NV = (int)0x8522;
    public static final int GL_COLOR_MATERIAL_PARAMETER = (int)0x0B56;
    public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = (int)0x88FD;
    public static final int GL_VIEW_CLASS_64_BITS = (int)0x82C6;
    public static final int GL_INT_SAMPLER_CUBE_EXT = (int)0x8DCC;
    public static final int GL_REPLACE_OLDEST_SUN = (int)0x03;
    public static final int GL_VIEWPORT = (int)0x0BA2;
    public static final int GL_RGBA_SNORM = (int)0x8F93;
    public static final int GL_DOUBLE_EXT = (int)0x140A;
    public static final int GL_SCREEN_COORDINATES_REND = (int)0x8490;
    public static final int GL_SWIZZLE_STRQ_DQ_ATI = (int)0x897B;
    public static final int GL_APPLE_flush_buffer_range = (int)1;
    public static final int GL_AMD_depth_clamp_separate = (int)1;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = (int)0x900D;
    public static final int GL_INCR_WRAP = (int)0x8507;
    public static final int GL_CURRENT_MATRIX_ARB = (int)0x8641;
    public static final int GL_INT_SAMPLER_1D = (int)0x8DC9;
    public static final int GL_RG_INTEGER = (int)0x8228;
    public static final int GL_MAX_PROGRAM_CALL_DEPTH_NV = (int)0x88F5;
    public static final int GL_LOCAL_CONSTANT_DATATYPE_EXT = (int)0x87ED;
    public static final int GL_RED_BITS = (int)0x0D52;
    public static final int GL_LAST_VERTEX_CONVENTION = (int)0x8E4E;
    public static final int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = (int)0x914A;
    public static final int GL_PROJECTION_STACK_DEPTH = (int)0x0BA4;
    public static final int GL_INDEX_ARRAY_EXT = (int)0x8077;
    public static final int GL_INTENSITY_EXTENDED_RANGE_SGIX = (int)0x85F0;
    public static final int GL_FONT_X_MAX_BOUNDS_BIT_NV = (int)0x00040000;
    public static final int GL_RGB5_A1 = (int)0x8057;
    public static final int GL_SGIS_generate_mipmap = (int)1;
    public static final int GL_GREEN_MAX_CLAMP_INGR = (int)0x8565;
    public static final int GL_STATISTICS_REGAL = (int)0x9364;
    public static final int GL_ATTACHED_SHADERS = (int)0x8B85;
    public static final int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = (int)0x81A8;
    public static final int GL_PATH_COVER_DEPTH_FUNC_NV = (int)0x90BF;
    public static final int GL_ACCUM_BLUE_BITS = (int)0x0D5A;
    public static final int GL_STENCIL_TAG_BITS_EXT = (int)0x88F2;
    public static final int GL_HP_convolution_border_modes = (int)1;
    public static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = (int)0x8F2F;
    public static final int GL_FLOAT_VEC3_ARB = (int)0x8B51;
    public static final int GL_ELEMENT_ARRAY_BUFFER_ARB = (int)0x8893;
    public static final int GL_NORMAL_ARRAY_COUNT_EXT = (int)0x8080;
    public static final int GL_RELATIVE_SMALL_CCW_ARC_TO_NV = (int)0x13;
    public static final int GL_POST_CONVOLUTION_RED_BIAS_EXT = (int)0x8020;
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = (int)0x8B49;
    public static final int GL_EXPAND_NORMAL_NV = (int)0x8538;
    public static final int GL_CURRENT_VERTEX_WEIGHT_EXT = (int)0x850B;
    public static final int GL_DRAW_BUFFER7_ARB = (int)0x882C;
    public static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = (int)0x8DBC;
    public static final int GL_POINT_SPRITE_COORD_ORIGIN = (int)0x8CA0;
    public static final int GL_BUFFER_UPDATE_BARRIER_BIT = (int)0x00000200;
    public static final int GL_WIN_phong_shading = (int)1;
    public static final int GL_VERTEX_WEIGHTING_EXT = (int)0x8509;
    public static final int GL_VERSION_1_2 = (int)1;
    public static final int GL_VERSION_1_1 = (int)1;
    public static final int GL_CLAMP_TO_BORDER_SGIS = (int)0x812D;
    public static final int GL_VERSION_1_5 = (int)1;
    public static final int GL_DEPTH_COMPONENT24_ARB = (int)0x81A6;
    public static final int GL_VERSION_1_4 = (int)1;
    public static final int GL_VERSION_1_3 = (int)1;
    public static final int GL_MATRIX7_NV = (int)0x8637;
    public static final int GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT = (int)0x8402;
    public static final int GL_COMPRESSED_SRGB8_ETC2 = (int)0x9275;
    public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = (int)0x8E80;
    public static final int GL_RENDERBUFFER_BINDING_EXT = (int)0x8CA7;
    public static final int GL_KEEP = (int)0x1E00;
    public static final int GL_RELATIVE_ARC_TO_NV = (int)0xFF;
    public static final int GL_WRAP_BORDER = (int)0x8152;
    public static final int GL_APPLE_vertex_program_evaluators = (int)1;
    public static final int GL_COLOR_TABLE_SCALE_SGI = (int)0x80D6;
    public static final int GL_MAX_PIXEL_MAP_TABLE = (int)0x0D34;
    public static final int GL_STENCIL_BACK_WRITEMASK = (int)0x8CA5;
    public static final int GL_SGIX_fog_offset = (int)1;
    public static final int GL_DRAW_BUFFER7_ATI = (int)0x882C;
    public static final int GL_MAX_FRAMEBUFFER_LAYERS = (int)0x9317;
    public static final int GL_MAX_CONVOLUTION_WIDTH_EXT = (int)0x801A;
    public static final int GL_DEPTH_TEXTURE_MODE = (int)0x884B;
    public static final int GL_FRAGMENT_NORMAL_EXT = (int)0x834A;
    public static final int GL_RGB_FLOAT16_ATI = (int)0x881B;
    public static final int GL_NORMAL_ARRAY_TYPE_EXT = (int)0x807E;
    public static final int GL_FENCE_CONDITION_NV = (int)0x84F4;
    public static final int GL_SAMPLE_MASK_EXT = (int)0x80A0;
    public static final int GL_SYNC_CONDITION = (int)0x9113;
    public static final int GL_TESS_EVALUATION_SHADER_BIT = (int)0x00000010;
    public static final int GL_MAP1_VERTEX_ATTRIB15_4_NV = (int)0x866F;
    public static final int GL_INDEX_ARRAY_TYPE = (int)0x8085;
    public static final int GL_QUERY_BY_REGION_WAIT = (int)0x8E15;
    public static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = (int)0x880C;
    public static final int GL_IMAGE_1D_ARRAY = (int)0x9052;
    public static final int GL_ALPHA4 = (int)0x803B;
    public static final int GL_SLUMINANCE8 = (int)0x8C47;
    public static final int GL_ALPHA8 = (int)0x803C;
    public static final int GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = (int)103087;
    public static final int GL_PROGRAM_ATTRIB_COMPONENTS_NV = (int)0x8906;
    public static final int GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = (int)0x9048;
    public static final int GL_MAP2_TEXTURE_COORD_4 = (int)0x0DB6;
    public static final int GL_MAP2_TEXTURE_COORD_3 = (int)0x0DB5;
    public static final int GL_MAP2_TEXTURE_COORD_2 = (int)0x0DB4;
    public static final int GL_MAP2_TEXTURE_COORD_1 = (int)0x0DB3;
    public static final int GL_RGB_EXTENDED_RANGE_SGIX = (int)0x85EC;
    public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS = (int)0x9312;
    public static final int GL_RELATIVE_LARGE_CW_ARC_TO_NV = (int)0x19;
    public static final int GL_NUM_ACTIVE_VARIABLES = (int)0x9304;
    public static final int GL_NORMAL_MAP = (int)0x8511;
    public static final int GL_CURRENT_RASTER_COLOR = (int)0x0B04;
    public static final int GL_DOUBLE_MAT2x4_EXT = (int)0x8F4A;
    public static final int GL_INT_SAMPLER_2D = (int)0x8DCA;
    public static final int GL_TRANSPOSE_PROJECTION_MATRIX = (int)0x84E4;
    public static final int GL_READ_PIXELS_FORMAT = (int)0x828D;
    public static final int GL_COMBINER6_NV = (int)0x8556;
    public static final int GL_ATOMIC_COUNTER_BUFFER_START = (int)0x92C2;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = (int)0x8519;
    public static final int GL_PIXEL_MAP_G_TO_G_SIZE = (int)0x0CB7;
    public static final int GL_MIPMAP = (int)0x8293;
    public static final int GL_TEXTURE_MAG_SIZE_NV = (int)0x871F;
    public static final int GL_RG32UI = (int)0x823C;
    public static final int GL_PREVIOUS_EXT = (int)0x8578;
    public static final int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = (int)0x9025;
    public static final int GL_TEXTURE19_ARB = (int)0x84D3;
    public static final int GL_INT_SAMPLER_3D = (int)0x8DCB;
    public static final int GL_FRAMEBUFFER_SRGB = (int)0x8DB9;
    public static final int GL_MODULATE_SUBTRACT_ATIX = (int)0x8746;
    public static final int GL_INTENSITY16_SIGNED_SGIX = (int)0x85EA;
    public static final int GL_ARB_transform_feedback2 = (int)1;
    public static final int GL_ARB_transform_feedback3 = (int)1;
    public static final int GL_PURGEABLE_APPLE = (int)0x8A1D;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = (int)0x90ED;
    public static final int GL_SRGB_READ = (int)0x8297;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = (int)0x8C8B;
    public static final int GL_EXTENDED_RANGE_SGIS = (int)0x85A5;
    public static final int GL_INTENSITY16 = (int)0x804D;
    public static final int GL_VERTEX_ARRAY_BINDING = (int)0x85B5;
    public static final int GL_DEBUG_TYPE_PUSH_GROUP = (int)0x8269;
    public static final int GL_INTENSITY12 = (int)0x804C;
    public static final int GL_MINMAX_SINK = (int)0x8030;
    public static final int GL_MODELVIEW25_ARB = (int)0x8739;
    public static final int GL_OP_FLOOR_EXT = (int)0x878F;
    public static final int GL_MAX_RATIONAL_EVAL_ORDER_NV = (int)0x86D7;
    public static final int GL_TEXTURE9_ARB = (int)0x84C9;
    public static final int GL_FRAMEBUFFER_UNSUPPORTED_EXT = (int)0x8CDD;
    public static final int GL_TESS_GEN_MODE = (int)0x8E76;
    public static final int GL_ARB_texture_cube_map = (int)1;
    public static final int GL_SELECTION_BUFFER_POINTER = (int)0x0DF3;
    public static final int GL_VIDEO_COLOR_CONVERSION_MIN_NV = (int)0x902B;
    public static final int GL_SGIX_async_pixel = (int)1;
    public static final int GL_EYE_DISTANCE_TO_LINE_SGIS = (int)0x81F2;
    public static final int GL_SGIX_fog_texture = (int)1;
    public static final int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = (int)0x92EF;
    public static final int GL_AMD_debug_output = (int)1;
    public static final int GL_OBJECT_BUFFER_SIZE_ATI = (int)0x8764;
    public static final int GL_PATH_OBJECT_BOUNDING_BOX_NV = (int)0x908A;
    public static final int GL_AUX_BUFFERS = (int)0x0C00;
    public static final int GL_FLOAT_R32_NV = (int)0x8885;
    public static final int GL_PIXEL_MAP_I_TO_B_SIZE = (int)0x0CB4;
    public static final int GL_IMAGE_PIXEL_TYPE = (int)0x82AA;
    public static final int GL_REPEAT = (int)0x2901;
    public static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = (int)0x00000001;
    public static final int GL_SYNC_FENCE = (int)0x9116;
    public static final int GL_TESSELLATION_MODE_AMD = (int)0x9004;
    public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS = (int)0x8DFD;
    public static final int GL_ASYNC_DRAW_PIXELS_SGIX = (int)0x835D;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = (int)0x8D56;
    public static final int GL_MIN_SAMPLE_SHADING_VALUE_ARB = (int)0x8C37;
    public static final int GL_TEXTURE_BUFFER_FORMAT_ARB = (int)0x8C2E;
    public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = (int)0x8E85;
    public static final int GL_KTX_Z_REGION = (int)0x2;
    public static final int GL_MAP_INVALIDATE_BUFFER_BIT = (int)0x0008;
    public static final int GL_VIEW_CLASS_24_BITS = (int)0x82C9;
    public static final int GL_VARIABLE_G_NV = (int)0x8529;
    public static final int GL_DOUBLE_MAT3x2_EXT = (int)0x8F4B;
    public static final int GL_CURRENT_MATRIX_INDEX_ARB = (int)0x8845;
    public static final int GL_BUFFER_MAPPED_ARB = (int)0x88BC;
    public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = (int)0x84F8;
    public static final int GL_MIN_RED_SGIS = (int)0x85A6;
    public static final int GL_RECT_NV = (int)0xF6;
    public static final int GL_COMPRESSED_RGBA = (int)0x84EE;
    public static final int GL_LUMINANCE32I_EXT = (int)0x8D86;
    public static final int GL_SAMPLER_2D_SHADOW_ARB = (int)0x8B62;
    public static final int GL_ARRAY_BUFFER = (int)0x8892;
    public static final int GL_LINE_STRIP_ADJACENCY = (int)0x000B;
    public static final int GL_EMBOSS_LIGHT_NV = (int)0x855D;
    public static final int GL_FRAGMENT_COLOR_MATERIAL_EXT = (int)0x8401;
    public static final int GL_LUMINANCE4_ALPHA4_EXT = (int)0x8043;
    public static final int GL_DRAW_FRAMEBUFFER = (int)0x8CA9;
    public static final int GL_ISOLINES = (int)0x8E7A;
    public static final int GL_NVX_conditional_render = (int)1;
    public static final int GL_COLOR_ATTACHMENT10_EXT = (int)0x8CEA;
    public static final int GL_ZERO = (int)0;
    public static final int GL_DEBUG_CATEGORY_APPLICATION_AMD = (int)0x914F;
    public static final int GL_OFFSET_TEXTURE_2D_BIAS_NV = (int)0x86E3;
    public static final int GL_PROVOKING_VERTEX_EXT = (int)0x8E4F;
    public static final int GL_COPY = (int)0x1503;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = (int)0x8C8F;
    public static final int GL_LINE_STRIP_ADJACENCY_EXT = (int)0xB;
    public static final int GL_OFFSET_TEXTURE_BIAS_NV = (int)0x86E3;
    public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = (int)0x886C;
    public static final int GL_HISTOGRAM_RED_SIZE_EXT = (int)0x8028;
    public static final int GL_EXT_shader_image_load_store = (int)1;
    public static final int GL_ARB_gpu_shader5 = (int)1;
    public static final int GL_MAX_LIST_NESTING = (int)0x0B31;
    public static final int GL_INDEX = (int)0x8222;
    public static final int GL_TIMESTAMP_ANGLE = (int)0x8E28;
    public static final int GL_ARB_fragment_program = (int)1;
    public static final int GL_EVAL_VERTEX_ATTRIB5_NV = (int)0x86CB;
    public static final int GL_VIEW_CLASS_48_BITS = (int)0x82C7;
    public static final int GL_LUMINANCE4_EXT = (int)0x803F;
    public static final int GL_APPLE_client_storage = (int)1;
    public static final int GL_INVERSE_TRANSPOSE_NV = (int)0x862D;
    public static final int GL_MINOR_VERSION = (int)0x821C;
    public static final int GL_MAX_LAYERS = (int)0x8281;
    public static final int GL_QUERY_WAIT_NV = (int)0x8E13;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = (int)0x84F1;
    public static final int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = (int)0x80B5;
    public static final int GL_OP_MIN_EXT = (int)0x878B;
    public static final int GL_TEXTURE_COORD_ARRAY_SIZE = (int)0x8088;
    public static final int GL_GEQUAL = (int)0x0206;
    public static final int GL_Y_EXT = (int)0x87D6;
    public static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = (int)0x8809;
    public static final int GL_SOURCE2_RGB_ARB = (int)0x8582;
    public static final int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = (int)0x8DED;
    public static final int GL_MAP2_VERTEX_ATTRIB4_4_NV = (int)0x8674;
    public static final int GL_DRAW_PIXELS_APPLE = (int)0x8A0A;
    public static final int GL_SYNC_STATUS = (int)0x9114;
    public static final int GL_VARIABLE_D_NV = (int)0x8526;
    public static final int GL_DEPTH_COMPONENT24_SGIX = (int)0x81A6;
    public static final int GL_TRANSPOSE_NV = (int)0x862C;
    public static final int GL_CIRCULAR_CW_ARC_TO_NV = (int)0xFA;
    public static final int GL_LUMINANCE16_SNORM = (int)0x9019;
    public static final int GL_ACCUM = (int)0x0100;
    public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = (int)0x86A0;
    public static final int GL_TEXTURE_FREE_MEMORY_ATI = (int)0x87FC;
    public static final int GL_PACK_IMAGE_HEIGHT_EXT = (int)0x806C;
    public static final int GL_TEXTURE_MAX_CLAMP_S_SGIX = (int)0x8369;
    public static final int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = (int)0x8CAB;
    public static final int GL_FLAT = (int)0x1D00;
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = (int)0x8A43;
    public static final int GL_DEPTH_STENCIL_ATTACHMENT = (int)0x821A;
    public static final int GL_RENDERBUFFER_STENCIL_SIZE_EXT = (int)0x8D55;
    public static final int GL_EVAL_VERTEX_ATTRIB14_NV = (int)0x86D4;
    public static final int GL_VERTEX_ID_SWIZZLE_AMD = (int)0x91A5;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = (int)0x93DC;
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS = (int)0x8C83;
    public static final int GL_VARIANT_ARRAY_POINTER_EXT = (int)0x87E9;
    public static final int GL_DOUBLEBUFFER = (int)0x0C32;
    public static final int GL_VERTEX_ATTRIB_ARRAY15_NV = (int)0x865F;
    public static final int GL_MAX_WIDTH = (int)0x827E;
    public static final int GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE = (int)0x83F0;
    public static final int GL_SECONDARY_COLOR_ARRAY = (int)0x845E;
    public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = (int)0x919F;
    public static final int GL_OUTPUT_TEXTURE_COORD10_EXT = (int)0x87A7;
    public static final int GL_MAP2_VERTEX_ATTRIB0_4_NV = (int)0x8670;
    public static final int GL_MAP2_VERTEX_3 = (int)0x0DB7;
    public static final int GL_MAP2_VERTEX_4 = (int)0x0DB8;
    public static final int GL_MATRIX15_ARB = (int)0x88CF;
    public static final int GL_SAMPLES_PASSED_ARB = (int)0x8914;
    public static final int GL_MAX_PROJECTION_STACK_DEPTH = (int)0x0D38;
    public static final int GL_LOCAL_CONSTANT_EXT = (int)0x87C3;
    public static final int GL_NORMAL_ARRAY_TYPE = (int)0x807E;
    public static final int GL_ELEMENT_ARRAY_BARRIER_BIT = (int)0x00000002;
    public static final int GL_INDEX_BITS = (int)0x0D51;
    public static final int GL_TEXTURE_IMAGE_FORMAT = (int)0x828F;
    public static final int GL_OP_INDEX_EXT = (int)0x8782;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = (int)0x8211;
    public static final int GL_SIGNED_RGB_NV = (int)0x86FE;
    public static final int GL_EXT_vertex_shader = (int)1;
    public static final int GL_RGBA32I = (int)0x8D82;
    public static final int GL_EXT_framebuffer_multisample = (int)1;
    public static final int GL_RGBA32F = (int)0x8814;
    public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = (int)0x8E4C;
    public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB = (int)0x884F;
    public static final int GL_APPLE_vertex_array_object = (int)1;
    public static final int GL_NORMAL_ARRAY_LIST_IBM = (int)103071;
    public static final int GL_TEXTURE_INTENSITY_TYPE = (int)0x8C15;
    public static final int GL_POLYGON_TOKEN = (int)0x0703;
    public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = (int)0x92CF;
    public static final int GL_DISCARD_NV = (int)0x8530;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = (int)0x93D2;
    public static final int GL_HALF_FLOAT = (int)0x140B;
    public static final int GL_NV_shader_atomic_counters = (int)1;
    public static final int GL_RGB_INTEGER_EXT = (int)0x8D98;
    public static final int GL_CAVEAT_SUPPORT = (int)0x82B8;
    public static final int GL_POINT_DISTANCE_ATTENUATION_ARB = (int)0x8129;
    public static final int GL_PROGRAM_PARAMETER_NV = (int)0x8644;
    public static final int GL_TEXTURE_MAX_LOD = (int)0x813B;
    public static final int GL_EXT_cull_vertex = (int)1;
    public static final int GL_PATCH_DEFAULT_OUTER_LEVEL = (int)0x8E74;
    public static final int GL_IMAGE_CLASS_1_X_16 = (int)0x82BE;
    public static final int GL_DRAW_BUFFER2_ATI = (int)0x8827;
    public static final int GL_PIXEL_MAP_I_TO_I_SIZE = (int)0x0CB0;
    public static final int GL_EXT_compiled_vertex_array = (int)1;
    public static final int GL_CONVOLUTION_BORDER_MODE_EXT = (int)0x8013;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = (int)0x93D4;
    public static final int GL_SIGNED_INTENSITY8_NV = (int)0x8708;
    public static final int GL_BLUE_SCALE = (int)0x0D1A;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = (int)0x8C80;
    public static final int GL_EXT_gpu_shader4 = (int)1;
    public static final int GL_DOUBLE_MAT2_EXT = (int)0x8F46;
    public static final int GL_FRAGMENT_SHADER = (int)0x8B30;
    public static final int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT = (int)0x8408;
    public static final int GL_CURRENT_WEIGHT_ARB = (int)0x86A8;
    public static final int GL_REPLACE_VALUE_AMD = (int)0x874B;
    public static final int GL_OUTPUT_TEXTURE_COORD22_EXT = (int)0x87B3;
    public static final int GL_SAMPLE_POSITION_NV = (int)0x8E50;
    public static final int GL_VERTEX23_BIT_PGI = (int)0x00000004;
    public static final int GL_POST_CONVOLUTION_ALPHA_SCALE = (int)0x801F;
    public static final int GL_GEOMETRY_SHADER = (int)0x8DD9;
    public static final int GL_IMAGE_CLASS_1_X_32 = (int)0x82BB;
    public static final int GL_FORCE_BLUE_TO_ONE_NV = (int)0x8860;
    public static final int GL_DRAW_BUFFER2_ARB = (int)0x8827;
    public static final int GL_POINT_SMOOTH_HINT = (int)0x0C51;
    public static final int GL_VERTEX_ARRAY = (int)0x8074;
    public static final int GL_BUFFER_MAP_POINTER_ARB = (int)0x88BD;
    public static final int GL_COMPUTE_PROGRAM_NV = (int)0x90FB;
    public static final int GL_DOT_PRODUCT_TEXTURE_1D_NV = (int)0x885C;
    public static final int GL_COMPRESSED_SLUMINANCE_EXT = (int)0x8C4A;
    public static final int GL_LOCAL_EXT = (int)0x87C4;
    public static final int GL_RIGHT = (int)0x0407;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = (int)0x82AF;
    public static final int GL_MIRROR_CLAMP_TO_EDGE_ATI = (int)0x8743;
    public static final int GL_CON_4_ATI = (int)0x8945;
    public static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = (int)0x8F31;
    public static final int GL_DEBUG_OUTPUT = (int)0x92E0;
    public static final int GL_MULTISAMPLE_3DFX = (int)0x86B2;
    public static final int GL_PROVOKING_VERTEX = (int)0x8E4F;
    public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = (int)0x90CE;
    public static final int GL_CCW = (int)0x0901;
    public static final int GL_T2F_C4UB_V3F = (int)0x2A29;
    public static final int GL_BLEND_DST_ALPHA_EXT = (int)0x80CA;
    public static final int GL_DEBUG_SEVERITY_MEDIUM = (int)0x9147;
    public static final int GL_UNSIGNED_SHORT = (int)0x1403;
    public static final int GL_SLUMINANCE_ALPHA_EXT = (int)0x8C44;
    public static final int GL_EXT_texture_integer = (int)1;
    public static final int GL_VIDEO_BUFFER_BINDING_NV = (int)0x9021;
    public static final int GL_SAMPLE_BUFFERS_ARB = (int)0x80A8;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = (int)0x8515;
    public static final int GL_PATH_INITIAL_DASH_CAP_NV = (int)0x907C;
    public static final int GL_STENCIL_PASS_DEPTH_FAIL = (int)0x0B95;
    public static final int GL_SOURCE1_ALPHA_EXT = (int)0x8589;
    public static final int GL_ELEMENT_ARRAY_APPLE = (int)0x8A0C;
    public static final int GL_MATRIX20_ARB = (int)0x88D4;
    public static final int GL_POST_CONVOLUTION_GREEN_SCALE_EXT = (int)0x801D;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_EXT = (int)0x9063;
    public static final int GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = (int)0x00004000;
    public static final int GL_RGB2_EXT = (int)0x804E;
    public static final int GL_IMAGE_2D_ARRAY = (int)0x9053;
    public static final int GL_EXT_texture_env = (int)1;
    public static final int GL_GEOMETRY_OUTPUT_TYPE = (int)0x8918;
    public static final int GL_COLOR_TABLE_INTENSITY_SIZE_EXT = (int)0x80DF;
    public static final int GL_TEXTURE_DEPTH_TYPE_ARB = (int)0x8C16;
    public static final int GL_NUM_EXTENSIONS = (int)0x821D;
    public static final int GL_ATI_separate_stencil = (int)1;
    public static final int GL_COLOR_MATERIAL = (int)0x0B57;
    public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = (int)0x910F;
    public static final int GL_ATI_vertex_attrib_array_object = (int)1;
    public static final int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = (int)0x8DE4;
    public static final int GL_COLOR_TABLE_SCALE = (int)0x80D6;
    public static final int GL_RGB16F_ARB = (int)0x881B;
    public static final int GL_PATH_FORMAT_PS_NV = (int)0x9071;
    public static final int GL_LIST_MODE = (int)0x0B30;
    public static final int GL_LUMINANCE8_ALPHA8_EXT = (int)0x8045;
    public static final int GL_MATRIX3_ARB = (int)0x88C3;
    public static final int GL_PATH_FOG_GEN_MODE_NV = (int)0x90AC;
    public static final int GL_FOG_COORD_ARRAY_POINTER = (int)0x8456;
    public static final int GL_4PASS_0_EXT = (int)0x80A4;
    public static final int GL_AUTO_GENERATE_MIPMAP = (int)0x8295;
    public static final int GL_COLOR_TABLE = (int)0x80D0;
    public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = (int)0x8E1F;
    public static final int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT = (int)0x840B;
    public static final int GL_INT16_VEC4_NV = (int)0x8FE7;
    public static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = (int)0x88A6;
    public static final int GL_PATH_DASH_OFFSET_RESET_NV = (int)0x90B4;
    public static final int GL_PLUS_CLAMPED_NV = (int)0x92B1;
    public static final int GL_UNSIGNED_INT16_VEC4_NV = (int)0x8FF3;
    public static final int GL_EXT_stencil_clear_tag = (int)1;
    public static final int GL_NV_transform_feedback2 = (int)1;
    public static final int GL_NV_present_video = (int)1;
    public static final int GL_MINMAX_FORMAT_EXT = (int)0x802F;
    public static final int GL_ARB_arrays_of_arrays = (int)1;
    public static final int GL_VIEW_COMPATIBILITY_CLASS = (int)0x82B6;
    public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = (int)0x9310;
    public static final int GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = (int)0x8C7E;
    public static final int GL_TEXTURE_COORD_ARRAY = (int)0x8078;
    public static final int GL_INTENSITY8_SNORM = (int)0x9017;
    public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = (int)0x8C29;
    public static final int GL_OES_compressed_paletted_texture = (int)1;
    public static final int GL_REPLACEMENT_CODE_SUN = (int)0x81D8;
    public static final int GL_RESAMPLE_REPLICATE_OML = (int)0x8986;
    public static final int GL_BLOCK_INDEX = (int)0x92FD;
    public static final int GL_DATA_BUFFER_AMD = (int)0x9151;
    public static final int GL_LUMINANCE12_ALPHA4_EXT = (int)0x8046;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = (int)0x8C8F;
    public static final int GL_DEPTH = (int)0x1801;
    public static final int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = (int)0x870C;
    public static final int GL_CLAMP_READ_COLOR = (int)0x891C;
    public static final int GL_QUERY_BY_REGION_NO_WAIT_NV = (int)0x8E16;
    public static final int GL_TEXTURE_RECTANGLE_EXT = (int)0x84F5;
    public static final int GL_MAP_ATTRIB_U_ORDER_NV = (int)0x86C3;
    public static final int GL_DEPTH_ATTACHMENT_EXT = (int)0x8D00;
    public static final int GL_POINT_SIZE_MIN_ARB = (int)0x8126;
    public static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = (int)0x88B3;
    public static final int GL_FLOAT_RG32_NV = (int)0x8887;
    public static final int GL_NV_transform_feedback = (int)1;
    public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR = (int)0x93B1;
    public static final int GL_TRANSFORM_FEEDBACK_VARYINGS_NV = (int)0x8C83;
    public static final int GL_FRAMEBUFFER_UNSUPPORTED = (int)0x8CDD;
    public static final int GL_COMBINER5_NV = (int)0x8555;
    public static final int GL_UNSIGNED_INT_SAMPLER_1D_EXT = (int)0x8DD1;
    public static final int GL_RESAMPLE_ZERO_FILL_OML = (int)0x8987;
    public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = (int)0x8E82;
    public static final int GL_MODELVIEW22_ARB = (int)0x8736;
    public static final int GL_ACTIVE_PROGRAM = (int)0x8259;
    public static final int GL_LUMINANCE_SNORM = (int)0x9011;
    public static final int GL_ARB_ES2_compatibility = (int)1;
    public static final int GL_VERTEX_ATTRIB_ARRAY12_NV = (int)0x865C;
    public static final int GL_EXP2 = (int)0x0801;
    public static final int GL_ARB_multitexture = (int)1;
    public static final int GL_EXT_blend_equation_separate = (int)1;
    public static final int GL_ARB_compute_shader = (int)1;
    public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = (int)0x8B4D;
    public static final int GL_INT_SAMPLER_BUFFER = (int)0x8DD0;
    public static final int GL_COMPRESSED_ALPHA_ARB = (int)0x84E9;
    public static final int GL_GREEN_BIAS = (int)0x0D19;
    public static final int GL_MATRIX26_ARB = (int)0x88DA;
    public static final int GL_TEXCOORD3_BIT_PGI = (int)0x40000000;
    public static final int GL_LUMINANCE_ALPHA8I_EXT = (int)0x8D93;
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = (int)0x8B9B;
    public static final int GL_HISTOGRAM_LUMINANCE_SIZE_EXT = (int)0x802C;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = (int)0x8CDC;
    public static final int GL_SYSTEM_FONT_NAME_NV = (int)0x9073;
    public static final int GL_MESAX_texture_stack = (int)1;
    public static final int GL_FORMAT_SUBSAMPLE_244_244_OML = (int)0x8983;
    public static final int GL_TEXTURE_INTERNAL_FORMAT = (int)0x1003;
    public static final int GL_FOG_COORD_ARRAY_STRIDE = (int)0x8455;
    public static final int GL_TEXTURE28_ARB = (int)0x84DC;
    public static final int GL_ONE_MINUS_SRC_COLOR = (int)0x0301;
    public static final int GL_VARIANT_ARRAY_STRIDE_EXT = (int)0x87E6;
    public static final int GL_VERTEX_ARRAY_SIZE_EXT = (int)0x807A;
    public static final int GL_OUTPUT_TEXTURE_COORD19_EXT = (int)0x87B0;
    public static final int GL_VIEW_CLASS_BPTC_FLOAT = (int)0x82D3;
    public static final int GL_ARB_geometry_shader4 = (int)1;
    public static final int GL_INDEX_ARRAY_POINTER_EXT = (int)0x8091;
    public static final int GL_DOT3_RGBA_EXT = (int)0x8741;
    public static final int GL_FOG_OFFSET_VALUE_SGIX = (int)0x8199;
    public static final int GL_FLOAT_RGB16_NV = (int)0x8888;
    public static final int GL_DEBUG_CATEGORY_API_ERROR_AMD = (int)0x9149;
    public static final int GL_RGB8_SNORM = (int)0x8F96;
    public static final int GL_FLOAT_CLEAR_COLOR_VALUE_NV = (int)0x888D;
    public static final int GL_ERROR_REGAL = (int)0x9322;
    public static final int GL_COMPRESSED_LUMINANCE_ALPHA_ARB = (int)0x84EB;
    public static final int GL_ACCUM_GREEN_BITS = (int)0x0D59;
    public static final int GL_QUERY_RESULT_NO_WAIT = (int)0x9194;
    public static final int GL_MODELVIEW28_ARB = (int)0x873C;
    public static final int GL_ARB_fragment_layer_viewport = (int)1;
    public static final int GL_TIME_ELAPSED_EXT = (int)0x88BF;
    public static final int GL_PACK_ROW_BYTES_APPLE = (int)0x8A15;
    public static final int GL_NEAREST = (int)0x2600;
    public static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = (int)0x0001;
    public static final int GL_UNSIGNED_SHORT_8_8_MESA = (int)0x85BA;
    public static final int GL_EDGE_FLAG_ARRAY_COUNT_EXT = (int)0x808D;
    public static final int GL_ONE_MINUS_DST_COLOR = (int)0x0307;
    public static final int GL_BINORMAL_ARRAY_STRIDE_EXT = (int)0x8441;
    public static final int GL_COMPRESSED_SRGB_EXT = (int)0x8C48;
    public static final int GL_RGBA8_SNORM = (int)0x8F97;
    public static final int GL_DEBUG_TYPE_OTHER_ARB = (int)0x8251;
    public static final int GL_2D = (int)0x0600;
    public static final int GL_HORIZONTAL_LINE_TO_NV = (int)0x06;
    public static final int GL_COLOR_ARRAY_TYPE_EXT = (int)0x8082;
    public static final int GL_DISPATCH_INDIRECT_BUFFER = (int)0x90EE;
    public static final int GL_SRC0_ALPHA = (int)0x8588;
    public static final int GL_SMOOTH_QUADRATIC_CURVE_TO_NV = (int)0x0E;
    public static final int GL_LUMINANCE16_ALPHA16_EXT = (int)0x8048;
    public static final int GL_DEPTH_BUFFER_FLOAT_MODE_NV = (int)0x8DAF;
    public static final int GL_PROGRAM_POINT_SIZE_EXT = (int)0x8642;
    public static final int GL_GENERATE_MIPMAP = (int)0x8191;
    public static final int GL_COLOR_TABLE_WIDTH_SGI = (int)0x80D9;
    public static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = (int)0x8A06;
    public static final int GL_APPLE_rgb_422 = (int)1;
    public static final int GL_LUMINANCE16_EXT = (int)0x8042;
    public static final int GL_INTERNALFORMAT_PREFERRED = (int)0x8270;
    public static final int GL_NUM_SAMPLE_COUNTS = (int)0x9380;
    public static final int GL_DRAW_BUFFER0 = (int)0x8825;
    public static final int GL_FONT_X_MIN_BOUNDS_BIT_NV = (int)0x00010000;
    public static final int GL_COLOR_ATTACHMENT0_EXT = (int)0x8CE0;
    public static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = (int)0x880B;
    public static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = (int)0x80B3;
    public static final int GL_ONE_MINUS_SRC1_ALPHA = (int)0x88FB;
    public static final int GL_RENDERBUFFER_COLOR_SAMPLES_NV = (int)0x8E10;
    public static final int GL_UNSIGNED_INT_VEC4_EXT = (int)0x8DC8;
    public static final int GL_SAMPLER_BUFFER_AMD = (int)0x9001;
    public static final int GL_DRAW_BUFFER9 = (int)0x882E;
    public static final int GL_DRAW_BUFFER7 = (int)0x882C;
    public static final int GL_DRAW_BUFFER8 = (int)0x882D;
    public static final int GL_VARIABLE_E_NV = (int)0x8527;
    public static final int GL_DRAW_BUFFER5 = (int)0x882A;
    public static final int GL_DRAW_BUFFER6 = (int)0x882B;
    public static final int GL_OUTPUT_TEXTURE_COORD3_EXT = (int)0x87A0;
    public static final int GL_DRAW_BUFFER3 = (int)0x8828;
    public static final int GL_DRAW_BUFFER4 = (int)0x8829;
    public static final int GL_DRAW_BUFFER1 = (int)0x8826;
    public static final int GL_DRAW_BUFFER2 = (int)0x8827;
    public static final int GL_VIDEO_BUFFER_PITCH_NV = (int)0x9028;
    public static final int GL_WIN_specular_fog = (int)1;
    public static final int GL_OPERAND1_RGB_ARB = (int)0x8591;
    public static final int GL_DEBUG_REGAL = (int)0x9323;
    public static final int GL_MAP1_VERTEX_ATTRIB4_4_NV = (int)0x8664;
    public static final int GL_TIME_ELAPSED = (int)0x88BF;
    public static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = (int)0x850D;
    public static final int GL_OBJECT_DISTANCE_TO_LINE_SGIS = (int)0x81F3;
    public static final int GL_GEOMETRY_INPUT_TYPE_EXT = (int)0x8DDB;
    public static final int GL_OBJECT_SUBTYPE_ARB = (int)0x8B4F;
    public static final int GL_POLYGON_OFFSET_FACTOR = (int)0x8038;
    public static final int GL_ALPHA16_EXT = (int)0x803E;
    public static final int GL_COLOR_ARRAY_LIST_IBM = (int)103072;
    public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = (int)0x9311;
    public static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = (int)0x87F6;
    public static final int GL_UNSIGNED_BYTE_3_3_2_EXT = (int)0x8032;
    public static final int GL_SINGLE_COLOR = (int)0x81F9;
    public static final int GL_OPERAND0_RGB = (int)0x8590;
    public static final int GL_COMPRESSED_RGB_FXT1_3DFX = (int)0x86B0;
    public static final int GL_MESA_window_pos = (int)1;
    public static final int GL_OUTPUT_TEXTURE_COORD12_EXT = (int)0x87A9;
    public static final int GL_INVALID_ENUM = (int)0x0500;
    public static final int GL_INDEX_ARRAY_ADDRESS_NV = (int)0x8F24;
    public static final int GL_ARB_draw_indirect = (int)1;
    public static final int GL_SMOOTH = (int)0x1D01;
    public static final int GL_EDGE_FLAG_ARRAY_LIST_IBM = (int)103075;
    public static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = (int)0x8A04;
    public static final int GL_PATH_COMPUTED_LENGTH_NV = (int)0x90A0;
    public static final int GL_SET = (int)0x150F;
    public static final int GL_COMPRESSED_RGBA_ARB = (int)0x84EE;
    public static final int GL_POST_COLOR_MATRIX_RED_BIAS_SGI = (int)0x80B8;
    public static final int GL_CURRENT_INDEX = (int)0x0B01;
    public static final int GL_INTERPOLATE_ARB = (int)0x8575;
    public static final int GL_NV_register_combiners = (int)1;
    public static final int GL_ARB_occlusion_query = (int)1;
    public static final int GL_TEXTURE_VIEW = (int)0x82B5;
    public static final int GL_DIFFERENCE_NV = (int)0x929E;
    public static final int GL_UNPACK_SKIP_IMAGES_EXT = (int)0x806D;
    public static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = (int)0x8F26;
    public static final int GL_ALPHA16I_EXT = (int)0x8D8A;
    public static final int GL_UNSIGNED_NORMALIZED = (int)0x8C17;
    public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR = (int)0x93B2;
    public static final int GL_ALPHA_MAX_SGIX = (int)0x8321;
    public static final int GL_CONSERVE_MEMORY_HINT_PGI = (int)107005;
    public static final int GL_CURRENT_RASTER_INDEX = (int)0x0B05;
    public static final int GL_MODELVIEW_STACK_DEPTH = (int)0x0BA3;
    public static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB = (int)0x8807;
    public static final int GL_SOURCE0_ALPHA = (int)0x8588;
    public static final int GL_PREVIOUS = (int)0x8578;
    public static final int GL_ARB_cl_event = (int)1;
    public static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = (int)0x862E;
    public static final int GL_ARB_shader_precision = (int)1;
    public static final int GL_SAMPLE_MASK_VALUE = (int)0x8E52;
    public static final int GL_SRC_ALPHA_SATURATE = (int)0x0308;
    public static final int GL_INTERNALFORMAT_GREEN_SIZE = (int)0x8272;
    public static final int GL_INT_VEC3_ARB = (int)0x8B54;
    public static final int GL_RGBA32I_EXT = (int)0x8D82;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = (int)0x906B;
    public static final int GL_STENCIL_INDEX = (int)0x1901;
    public static final int GL_MAX_DEBUG_LOGGED_MESSAGES = (int)0x9144;
    public static final int GL_SIGNED_ALPHA_NV = (int)0x8705;
    public static final int GL_INDEX_ARRAY_LENGTH_NV = (int)0x8F2E;
    public static final int GL_PATH_COMMAND_COUNT_NV = (int)0x909D;
    public static final int GL_VERTEX_ATTRIB_ARRAY3_NV = (int)0x8653;
    public static final int GL_TEXTURE12_ARB = (int)0x84CC;
    public static final int GL_INDEX_ARRAY_LIST_STRIDE_IBM = (int)103083;
    public static final int GL_INT_SAMPLER_BUFFER_AMD = (int)0x9002;
    public static final int GL_ARB_texture_compression = (int)1;
    public static final int GL_MAX_TEXTURE_LOD_BIAS_EXT = (int)0x84FD;
    public static final int GL_RGB565 = (int)0x8D62;
    public static final int GL_SAMPLES_ARB = (int)0x80A9;
    public static final int GL_TEXTURE_USAGE_ANGLE = (int)0x93A2;
    public static final int GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = (int)0x90EB;
    public static final int GL_BUFFER_USAGE = (int)0x8765;
    public static final int GL_MIRRORED_REPEAT_IBM = (int)0x8370;
    public static final int GL_STENCIL_ATTACHMENT = (int)0x8D20;
    public static final int GL_INT_SAMPLER_2D_ARRAY_EXT = (int)0x8DCF;
    public static final int GL_TEXTURE16_ARB = (int)0x84D0;
    public static final int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = (int)0x8088;
    public static final int GL_ARB_bindless_texture = (int)1;
    public static final int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = (int)0x9198;
    public static final int GL_TEXTURE_INTENSITY_SIZE_EXT = (int)0x8061;
    public static final int GL_LINE_STIPPLE_PATTERN = (int)0x0B25;
    public static final int GL_TEXTURE_LO_SIZE_NV = (int)0x871C;
    public static final int GL_C4UB_V2F = (int)0x2A22;
    public static final int GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = (int)0x01000000;
    public static final int GL_VIEW_CLASS_16_BITS = (int)0x82CA;
    public static final int GL_SRGB_DECODE_ARB = (int)0x8299;
    public static final int GL_EXT_framebuffer_sRGB = (int)1;
    public static final int GL_PATH_STROKE_COVER_MODE_NV = (int)0x9083;
    public static final int GL_ACTIVE_TEXTURE_ARB = (int)0x84E0;
    public static final int GL_DEPTH_CLAMP_FAR_AMD = (int)0x901F;
    public static final int GL_RGB8_EXT = (int)0x8051;
    public static final int GL_FLOAT_RGBA_NV = (int)0x8883;
    public static final int GL_PIXEL_UNPACK_BUFFER = (int)0x88EC;
    public static final int GL_CLAMP_TO_EDGE_SGIS = (int)0x812F;
    public static final int GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = (int)0x93A0;
    public static final int GL_ATI_texture_env_combine3 = (int)1;
    public static final int GL_SUN_convolution_border_modes = (int)1;
    public static final int GL_SHININESS = (int)0x1601;
    public static final int GL_C4UB_V3F = (int)0x2A23;
    public static final int GL_SRC_COLOR = (int)0x0300;
    public static final int GL_BACK = (int)0x0405;
    public static final int GL_MEDIUM_INT = (int)0x8DF4;
    public static final int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT = (int)0x8403;
    public static final int GL_MATRIX_STRIDE = (int)0x92FF;
    public static final int GL_MAX_PROGRAM_IF_DEPTH_NV = (int)0x88F6;
    public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = (int)0x90CC;
    public static final int GL_INTENSITY16_EXT = (int)0x804D;
    public static final int GL_ADD = (int)0x0104;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = (int)0x8E24;
    public static final int GL_TEXTURE_BUFFER_SIZE = (int)0x919E;
    public static final int GL_ARB_shading_language_include = (int)1;
    public static final int GL_VERTEX_SHADER_EXT = (int)0x8780;
    public static final int GL_TEXTURE_MIN_LOD_SGIS = (int)0x813A;
    public static final int GL_TEXTURE_COORD_ARRAY_STRIDE = (int)0x808A;
    public static final int GL_MAX_TEXTURE_COORDS_ARB = (int)0x8871;
    public static final int GL_EXT_point_parameters = (int)1;
    public static final int GL_SGIX_flush_raster = (int)1;
    public static final int GL_MAX_SHININESS_NV = (int)0x8504;
    public static final int GL_BUFFER_ACCESS_ARB = (int)0x88BB;
    public static final int GL_STENCIL_COMPONENTS = (int)0x8285;
    public static final int GL_MAX_SPARSE_TEXTURE_SIZE_AMD = (int)0x9198;
    public static final int GL_ANGLE_timer_query = (int)1;
    public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = (int)0x91BF;
    public static final int GL_COMPRESSED_LUMINANCE = (int)0x84EA;
    public static final int GL_LIGHTING = (int)0x0B50;
    public static final int GL_MAX_GREEN_SGIS = (int)0x85A9;
    public static final int GL_ARB_shader_atomic_counters = (int)1;
    public static final int GLEW_OK = (int)0;
    public static final int GL_SGIS_texture_select = (int)1;
    public static final int GL_SAMPLE_COVERAGE_VALUE = (int)0x80AA;
    public static final int GL_ARB_texture_non_power_of_two = (int)1;
    public static final int GL_INTERLACE_SGIX = (int)0x8094;
    public static final int GL_FRAGMENT_SHADER_BIT = (int)0x00000002;
    public static final int GL_HISTOGRAM_BLUE_SIZE_EXT = (int)0x802A;
    public static final int GL_RGBA16F_ARB = (int)0x881A;
    public static final int GL_BLEND_EQUATION_RGB_EXT = (int)0x8009;
    public static final int GL_VERSION = (int)0x1F02;
    public static final int GL_COLOR_ARRAY_BUFFER_BINDING = (int)0x8898;
    public static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = (int)0x8336;
    public static final int GL_QUAD_STRIP = (int)0x0008;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = (int)0x906C;
    public static final int GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = (int)0x80DE;
    public static final int GL_VERTEX_PROGRAM_NV = (int)0x8620;
    public static final int GL_FONT_HEIGHT_BIT_NV = (int)0x00800000;
    public static final int GL_MAX_TEXTURE_LOD_BIAS = (int)0x84FD;
    public static final int GL_4PASS_2_SGIS = (int)0x80A6;
    public static final int GL_EQUAL = (int)0x0202;
    public static final int GL_CLAMP_FRAGMENT_COLOR = (int)0x891B;
    public static final int GL_BUFFER_UPDATE_BARRIER_BIT_EXT = (int)0x00000200;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = (int)0x8C7F;
    public static final int GL_UNIFORM_BLOCK_NAME_LENGTH = (int)0x8A41;
    public static final int GL_MODELVIEW4_ARB = (int)0x8724;
    public static final int GL_COMPRESSED_SIGNED_RG11_EAC = (int)0x9273;
    public static final int GL_PATH_MITER_LIMIT_NV = (int)0x907A;
    public static final int GL_REG_2_ATI = (int)0x8923;
    public static final int GL_COMPRESSED_RGB8_ETC2 = (int)0x9274;
    public static final int GL_FRONT_RIGHT = (int)0x0401;
    public static final int GL_TRIANGULAR_NV = (int)0x90A5;
    public static final int GL_COMPRESSED_SLUMINANCE = (int)0x8C4A;
    public static final int GL_COUNTER_TYPE_AMD = (int)0x8BC0;
    public static final int GL_FIELD_UPPER_NV = (int)0x9022;
    public static final int GL_PATH_STENCIL_VALUE_MASK_NV = (int)0x90B9;
    public static final int GL_MAX_RENDERBUFFER_SIZE_EXT = (int)0x84E8;
    public static final int GL_HI_BIAS_NV = (int)0x8714;
    public static final int GL_STANDARD_FONT_NAME_NV = (int)0x9072;
    public static final int GL_POST_TEXTURE_FILTER_SCALE_SGIX = (int)0x817A;
    public static final int GL_PROXY_TEXTURE_RECTANGLE = (int)0x84F7;
    public static final int GL_EXT_misc_attribute = (int)1;
    public static final int GL_CONVOLUTION_BORDER_MODE = (int)0x8013;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = (int)0x8CDC;
    public static final int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = (int)0x8868;
    public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = (int)0x8E5F;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = (int)0x8216;
    public static final int GL_TEXTURE_BORDER = (int)0x1005;
    public static final int GL_SHADOW_AMBIENT_SGIX = (int)0x80BF;
    public static final int GL_SYNC_FLUSH_COMMANDS_BIT = (int)0x00000001;
    public static final int GL_SIGNED_LUMINANCE8_ALPHA8_NV = (int)0x8704;
    public static final int GL_UNSIGNED_INT64_VEC3_NV = (int)0x8FF6;
    public static final int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = (int)0x8909;
    public static final int GL_AND = (int)0x1501;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_ARB = (int)0x900C;
    public static final int GL_MODELVIEW0_MATRIX_EXT = (int)0x0BA6;
    public static final int GL_PALETTE4_RGB8_OES = (int)0x8B90;
    public static final int GL_VIEW_CLASS_RGTC1_RED = (int)0x82D0;
    public static final int GL_PROGRAM_ERROR_STRING_ARB = (int)0x8874;
    public static final int GL_PROXY_COLOR_TABLE_SGI = (int)0x80D3;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = (int)0x9069;
    public static final int GL_CURRENT_RASTER_TEXTURE_COORDS = (int)0x0B06;
    public static final int GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = (int)0x909C;
    public static final int GL_RENDERBUFFER_GREEN_SIZE = (int)0x8D51;
    public static final int GL_ONE_MINUS_DST_ALPHA = (int)0x0305;
    public static final int GL_PACK_SWAP_BYTES = (int)0x0D00;
    public static final int GL_SQUARE_NV = (int)0x90A3;
    public static final int GL_MATRIX23_ARB = (int)0x88D7;
    public static final int GL_EXT_light_texture = (int)1;
    public static final int GL_TEXTURE_COLOR_SAMPLES_NV = (int)0x9046;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = (int)0x8518;
    public static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = (int)0x887A;
    public static final int GL_DRAW_INDIRECT_UNIFIED_NV = (int)0x8F40;
    public static final int GL_TEXTURE_COVERAGE_SAMPLES_NV = (int)0x9045;
    public static final int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = (int)0x8848;
    public static final int GL_SIGNED_LUMINANCE_NV = (int)0x8701;
    public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = (int)0x92C5;
    public static final int GL_RGB32F_ARB = (int)0x8815;
    public static final int GL_ATTRIB_ARRAY_SIZE_NV = (int)0x8623;
    public static final int GL_OBJECT_TYPE_ARB = (int)0x8B4E;
    public static final int GL_DISCRETE_AMD = (int)0x9006;
    public static final int GL_FUNC_ADD = (int)0x8006;
    public static final int GL_TEXTURE_RANGE_LENGTH_APPLE = (int)0x85B7;
    public static final int GL_ELEMENT_ARRAY_BUFFER = (int)0x8893;
    public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = (int)0x91BB;
    public static final int GL_POINT_SPRITE = (int)0x8861;
    public static final int GL_UNSIGNED_SHORT_8_8_APPLE = (int)0x85BA;
    public static final int GL_SAMPLE_PATTERN_EXT = (int)0x80AC;
    public static final int GL_CULL_VERTEX_EXT = (int)0x81AA;
    public static final int GL_UNIFORM_BUFFER_BINDING = (int)0x8A28;
    public static final int GL_COMPRESSED_ALPHA = (int)0x84E9;
    public static final int GL_TEXTURE_FILTER_CONTROL = (int)0x8500;
    public static final int GL_ALPHA_FLOAT16_APPLE = (int)0x881C;
    public static final int GL_INVERTED_SCREEN_W_REND = (int)0x8491;
    public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = (int)0x905F;
    public static final int GL_PRIMITIVE_RESTART_INDEX = (int)0x8F9E;
    public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = (int)0x92CC;
    public static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI = (int)107000;
    public static final int GL_FLOAT_VEC3 = (int)0x8B51;
    public static final int GL_WAIT_FAILED = (int)0x911D;
    public static final int GL_FLOAT_VEC4 = (int)0x8B52;
    public static final int GL_W_EXT = (int)0x87D8;
    public static final int GL_FLOAT_VEC2 = (int)0x8B50;
    public static final int GL_RGB8 = (int)0x8051;
    public static final int GL_RGB4 = (int)0x804F;
    public static final int GL_BUFFER_VARIABLE = (int)0x92E5;
    public static final int GL_RGB5 = (int)0x8050;
    public static final int GL_RGBA = (int)0x1908;
    public static final int GL_ARB_vertex_attrib_binding = (int)1;
    public static final int GL_INT_IMAGE_1D_ARRAY_EXT = (int)0x905D;
    public static final int GL_VERTEX_ATTRIB_MAP2_APPLE = (int)0x8A01;
    public static final int GL_LINEARBURN_NV = (int)0x92A5;
    public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = (int)0x8C29;
    public static final int GL_SUCCESS_NV = (int)0x902F;
    public static final int GL_RGB_INTEGER = (int)0x8D98;
    public static final int GL_LOG_DEBUG_REGAL = (int)0x931F;
    public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = (int)0x8B49;
    public static final int GL_DEPTH_COMPONENT32F = (int)0x8CAC;
    public static final int GL_ARB_shader_image_load_store = (int)1;
    public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = (int)0x824D;
    public static final int GL_FOG_END = (int)0x0B64;
    public static final int GL_LINE_STIPPLE_REPEAT = (int)0x0B26;
    public static final int GL_DEPTH_STENCIL_TO_BGRA_NV = (int)0x886F;
    public static final int GL_LOCAL_CONSTANT_VALUE_EXT = (int)0x87EC;
    public static final int GL_QUERY_BUFFER_BARRIER_BIT = (int)0x00008000;
    public static final int GL_INDEX_WRITEMASK = (int)0x0C21;
    public static final int GL_RGBA_INTEGER_EXT = (int)0x8D99;
    public static final int GL_MODELVIEW1_MATRIX_EXT = (int)0x8506;
    public static final int GL_CONSTANT_ALPHA_EXT = (int)0x8003;
    public static final int GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = (int)2;
    public static final int GL_FRAGMENT_SHADER_ATI = (int)0x8920;
    public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = (int)0x8257;
    public static final int GL_PARAMETER_BUFFER_BINDING_ARB = (int)0x80EF;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = (int)0x8C85;
    public static final int GL_FOG_COORD_SRC = (int)0x8450;
    public static final int GL_R8I = (int)0x8231;
    public static final int GL_MAX_CONVOLUTION_HEIGHT_EXT = (int)0x801B;
    public static final int GL_BLUE_MIN_CLAMP_INGR = (int)0x8562;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP_EXT = (int)0x851B;
    public static final int GL_RGB5_EXT = (int)0x8050;
    public static final int GL_OR = (int)0x1507;
    public static final int GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = (int)0x8837;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = (int)0x900F;
    public static final int GL_EVAL_VERTEX_ATTRIB10_NV = (int)0x86D0;
    public static final int GL_LINE_RESET_TOKEN = (int)0x0707;
    public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = (int)0x90CB;
    public static final int GL_TEXTURE_BORDER_VALUES_NV = (int)0x871A;
    public static final int GL_POINT_SIZE_MAX_EXT = (int)0x8127;
    public static final int GL_AMD_pinned_memory = (int)1;
    public static final int GL_TEXTURE4_ARB = (int)0x84C4;
    public static final int GL_ELEMENT_ARRAY_LENGTH_NV = (int)0x8F33;
    public static final int GL_COMPRESSED_RG_RGTC2 = (int)0x8DBD;
    public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = (int)0x8E5D;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = (int)0x8C7F;
    public static final int GL_POINT_SPRITE_ARB = (int)0x8861;
    public static final int GL_DEPTH_CLAMP_NV = (int)0x864F;
    public static final int GL_PRIMITIVE_RESTART_INDEX_NV = (int)0x8559;
    public static final int GL_MULTISAMPLE_ARB = (int)0x809D;
    public static final int GL_COLOR_INDEX12_EXT = (int)0x80E6;
    public static final int GL_DEBUG_SEVERITY_HIGH = (int)0x9146;
    public static final int GL_APPLE_aux_depth_stencil = (int)1;
    public static final int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = (int)0x8454;
    public static final int GL_RG = (int)0x8227;
    public static final int GL_TEXTURE_BLUE_TYPE = (int)0x8C12;
    public static final int GL_R8 = (int)0x8229;
    public static final int GL_DSDT8_NV = (int)0x8709;
    public static final int GL_MATRIX27_ARB = (int)0x88DB;
    public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = (int)0x8F39;
    public static final int GL_FRAMEBUFFER_BARRIER_BIT = (int)0x00000400;
    public static final int GL_SECONDARY_COLOR_ARRAY_TYPE = (int)0x845B;
    public static final int GL_LUMINANCE_ALPHA32I_EXT = (int)0x8D87;
    public static final int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = (int)0x9034;
    public static final int GL_DEBUG_SOURCE_API_ARB = (int)0x8246;
    public static final int GL_AND_REVERSE = (int)0x1502;
    public static final int GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = (int)0x904B;
    public static final int GL_BLEND_SRC_ALPHA_EXT = (int)0x80CB;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = (int)0x8517;
    public static final int GL_ANGLE_program_binary = (int)1;
    public static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT = (int)0x8352;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = (int)0x8C85;
    public static final int GL_RGB_FLOAT16_APPLE = (int)0x881B;
    public static final int GL_COLOR_ATTACHMENT5_EXT = (int)0x8CE5;
    public static final int GL_MAP2_COLOR_4 = (int)0x0DB0;
    public static final int GL_STENCIL_REF = (int)0x0B97;
    public static final int GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = (int)0x801F;
    public static final int GL_COLOR_TABLE_BIAS = (int)0x80D7;
    public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = (int)0x8C2D;
    public static final int GL_MAX_TEXTURE_SIZE = (int)0x0D33;
    public static final int GL_FRAME_NV = (int)0x8E26;
    public static final int GL_CW = (int)0x0900;
    public static final int GL_PIXEL_MAP_A_TO_A = (int)0x0C79;
    public static final int GL_ARB_point_sprite = (int)1;
    public static final int GL_CMYKA_EXT = (int)0x800D;
    public static final int GL_TRIANGLE_MESH_SUN = (int)0x8615;
    public static final int GL_LINEAR_MIPMAP_LINEAR = (int)0x2703;
    public static final int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = (int)0x862E;
    public static final int GL_IMAGE_3D_EXT = (int)0x904E;
    public static final int GL_SGI_color_table = (int)1;
    public static final int GL_UNSIGNED_INT64_NV = (int)0x140F;
    public static final int GL_ALPHA_MIN_SGIX = (int)0x8320;
    public static final int GL_TESS_CONTROL_PROGRAM_NV = (int)0x891E;
    public static final int GL_HIGH_FLOAT = (int)0x8DF2;
    public static final int GL_TEXTURE_FOG_SGIX = (int)0;
    public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = (int)0x92D6;
    public static final int GL_RASTERIZER_DISCARD_EXT = (int)0x8C89;
    public static final int GL_R1UI_T2F_V3F_SUN = (int)0x85C9;
    public static final int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = (int)0x845D;
    public static final int GL_READ_BUFFER = (int)0x0C02;
    public static final int GL_INT_VEC4_ARB = (int)0x8B55;
    public static final int GL_LIGHT_MODEL_AMBIENT = (int)0x0B53;
    public static final int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = (int)0x914C;
    public static final int GL_IMAGE_1D_EXT = (int)0x904C;
    public static final int GL_WIDE_LINE_HINT_PGI = (int)107042;
    public static final int GL_CONSTANT_COLOR = (int)0x8001;
    public static final int GL_DRAW_BUFFER15_ATI = (int)0x8834;
    public static final int GL_VARIANT_EXT = (int)0x87C1;
    public static final int GL_RGBA_DXT5_S3TC = (int)0x83A4;
    public static final int GL_HISTOGRAM_BLUE_SIZE = (int)0x802A;
    public static final int GL_FRAGMENT_FOG_SGIX = (int)0;
    public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = (int)0x90DC;
    public static final int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = (int)0x81A9;
    public static final int GL_VERTEX_BINDING_DIVISOR = (int)0x82D6;
    public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR = (int)0x93B5;
    public static final int GL_PASS_THROUGH_TOKEN = (int)0x0700;
    public static final int GL_FLOAT_RGB32_NV = (int)0x8889;
    public static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = (int)0x9061;
    public static final int GL_EQUIV = (int)0x1509;
    public static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB = (int)0x88B7;
    public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = (int)0x8DD6;
    public static final int GL_COPY_INVERTED = (int)0x150C;
    public static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB = (int)0x88AE;
    public static final int GL_COMPRESSED_RED_RGTC1_EXT = (int)0x8DBB;
    public static final int GL_SAMPLE_ALPHA_TO_ONE = (int)0x809F;
    public static final int GL_TEXTURE_STORAGE_HINT_APPLE = (int)0x85BC;
    public static final int GL_DRAW_BUFFER15_ARB = (int)0x8834;
    public static final int GL_TEXTURE_BUFFER_OFFSET = (int)0x919D;
    public static final int GL_BIAS_BIT_ATI = (int)0x00000008;
    public static final int GL_DEPTH_BOUNDS_EXT = (int)0x8891;
    public static final int GL_UNIFORM_BUFFER = (int)0x8A11;
    public static final int GL_DOT3_ATI = (int)0x8966;
    public static final int GL_DECR_WRAP_EXT = (int)0x8508;
    public static final int GL_INDEX_ARRAY_COUNT_EXT = (int)0x8087;
    public static final int GL_SAMPLE_ALPHA_TO_MASK_EXT = (int)0x809E;
    public static final int GL_SGIX_texture_coordinate_clamp = (int)1;
    public static final int GL_ATI_texture_float = (int)1;
    public static final int GL_RASTERIZER_DISCARD_NV = (int)0x8C89;
    public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = (int)0x92D0;
    public static final int GL_POINT_SPRITE_CULL_CENTER_ATIX = (int)0x60B4;
    public static final int GL_PROGRAM_PIPELINE = (int)0x82E4;
    public static final int GL_TRANSFORM_FEEDBACK_BINDING_NV = (int)0x8E25;
    public static final int GL_PATH_DASH_ARRAY_COUNT_NV = (int)0x909F;
    public static final int GL_CURRENT_FOG_COORDINATE = (int)0x8453;
    public static final int GL_VERTEX_WEIGHT_ARRAY_EXT = (int)0x850C;
    public static final int GL_LUMINANCE16_ALPHA16_SNORM = (int)0x901A;
    public static final int GL_MODULATE_ADD_ATIX = (int)0x8744;
    public static final int GL_LOG_INFO_REGAL = (int)0x931B;
    public static final int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = (int)0x808A;
    public static final int GL_ARB_texture_storage = (int)1;
    public static final int GL_DISCARD_ATI = (int)0x8763;
    public static final int GL_DEPTH_BUFFER = (int)0x8223;
    public static final int GL_SIGNED_NORMALIZED = (int)0x8F9C;
    public static final int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = (int)0x845B;
    public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = (int)0x90DA;
    public static final int GL_LIGHT_MODEL_COLOR_CONTROL_EXT = (int)0x81F8;
    public static final int GL_NORMAL_ARRAY = (int)0x8075;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = (int)0x8DA7;
    public static final int GL_REGAL_enable = (int)1;
    public static final int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = (int)0x8C71;
    public static final int GL_CLIP_FAR_HINT_PGI = (int)107041;
    public static final int GL_AMD_sparse_texture = (int)1;
    public static final int GL_EVAL_VERTEX_ATTRIB13_NV = (int)0x86D3;
    public static final int GL_MAP2_VERTEX_ATTRIB15_4_NV = (int)0x867F;
    public static final int GL_OPERAND1_ALPHA = (int)0x8599;
    public static final int GL_COLOR_ATTACHMENT9 = (int)0x8CE9;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = (int)0x8CD2;
    public static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = (int)0x912D;
    public static final int GL_ONE_MINUS_CONSTANT_COLOR = (int)0x8002;
    public static final int GL_SAMPLE_COVERAGE_VALUE_ARB = (int)0x80AA;
    public static final int GL_LOGIC_OP_MODE = (int)0x0BF0;
    public static final int GL_PACK_ALIGNMENT = (int)0x0D05;
    public static final int GL_SCISSOR_TEST = (int)0x0C11;
    public static final int GL_COLOR_TABLE_GREEN_SIZE_SGI = (int)0x80DB;
    public static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = (int)107011;
    public static final int GL_BGR = (int)0x80E0;
    public static final int GL_FILTER = (int)0x829A;
    public static final int GL_WEIGHT_ARRAY_STRIDE_ARB = (int)0x86AA;
    public static final int GL_CLIENT_VERTEX_ARRAY_BIT = (int)0x00000002;
    public static final int GL_CLIENT_ACTIVE_TEXTURE_ARB = (int)0x84E1;
    public static final int GL_COMBINE_ALPHA_EXT = (int)0x8572;
    public static final int GL_COLOR_ATTACHMENT0 = (int)0x8CE0;
    public static final int GL_COLOR_ATTACHMENT4 = (int)0x8CE4;
    public static final int GL_COLOR_ATTACHMENT3 = (int)0x8CE3;
    public static final int GL_COLOR_ATTACHMENT2 = (int)0x8CE2;
    public static final int GL_COLOR_ATTACHMENT1 = (int)0x8CE1;
    public static final int GL_PROGRAM_ERROR_STRING_NV = (int)0x8874;
    public static final int GL_COLOR_ATTACHMENT8 = (int)0x8CE8;
    public static final int GL_VARIABLE_F_NV = (int)0x8528;
    public static final int GL_COLOR_ATTACHMENT7 = (int)0x8CE7;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = (int)0x934C;
    public static final int GL_COLOR_ATTACHMENT6 = (int)0x8CE6;
    public static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = (int)0x8F39;
    public static final int GL_COLOR_ATTACHMENT5 = (int)0x8CE5;
    public static final int GL_MAX_VERTEX_STREAMS = (int)0x8E71;
    public static final int GL_RGB16I_EXT = (int)0x8D89;
    public static final int GL_TEXTURE_GEN_MODE = (int)0x2500;
    public static final int GL_LINE_STRIP = (int)0x0003;
    public static final int GL_NAMED_STRING_LENGTH_ARB = (int)0x8DE9;
    public static final int GL_RESCALE_NORMAL_EXT = (int)0x803A;
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = (int)0x8B4C;
    public static final int GL_TEXTURE_FETCH_BARRIER_BIT = (int)0x00000008;
    public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = (int)0x8B4C;
    public static final int GL_PERCENTAGE_AMD = (int)0x8BC3;
    public static final int GL_SIGNED_LUMINANCE8_NV = (int)0x8702;
    public static final int GL_EXT_shadow_funcs = (int)1;
    public static final int GL_RGB = (int)0x1907;
    public static final int GL_TEXTURE_LUMINANCE_TYPE_ARB = (int)0x8C14;
    public static final int GL_NV_bindless_texture = (int)1;
    public static final int GL_COMPARE_R_TO_TEXTURE = (int)0x884E;
    public static final int GL_DEBUG_SOURCE_THIRD_PARTY_ARB = (int)0x8249;
    public static final int GL_APPLE_element_array = (int)1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = (int)0x8CD0;
    public static final int GL_RG8 = (int)0x822B;
    public static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = (int)0x887B;
    public static final int GL_VIEW_CLASS_8_BITS = (int)0x82CB;
    public static final int GL_ATTRIB_ARRAY_STRIDE_NV = (int)0x8624;
    public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = (int)0x84FF;
    public static final int GL_TEXTURE_VIEW_NUM_LEVELS = (int)0x82DC;
    public static final int GL_ARB_program_interface_query = (int)1;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = (int)0x9129;
    public static final int GL_MAX_BLUE_SGIS = (int)0x85AB;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = (int)0x900A;
    public static final int GL_STATIC_COPY_ARB = (int)0x88E6;
    public static final int GL_OUTPUT_TEXTURE_COORD16_EXT = (int)0x87AD;
    public static final int GL_STENCIL_WRITEMASK = (int)0x0B98;
    public static final int GL_EXT_vertex_array_bgra = (int)1;
    public static final int GL_SGIX_ycrcb = (int)1;
    public static final int GL_ARB_vertex_shader = (int)1;
    public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = (int)0x889B;
    public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = (int)0x8625;
    public static final int GL_DS_BIAS_NV = (int)0x8716;
    public static final int GL_LEQUAL = (int)0x0203;
    public static final int GL_REGAL_ES1_0_compatibility = (int)1;
    public static final int GL_RED = (int)0x1903;
    public static final int GL_COMPRESSED_TEXTURE_FORMATS_ARB = (int)0x86A3;
    public static final int GL_422_EXT = (int)0x80CC;
    public static final int GL_ARB_vertex_array_bgra = (int)1;
    public static final int GL_TEXTURE_FETCH_BARRIER_BIT_EXT = (int)0x00000008;
    public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = (int)0x910C;
    public static final int GL_ALPHA16F_ARB = (int)0x881C;
    public static final int GL_CON_0_ATI = (int)0x8941;
    public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = (int)0xD;
    public static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = (int)0x88A7;
    public static final int GL_DEBUG_TYPE_PORTABILITY = (int)0x824F;
    public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = (int)0x8520;
    public static final int GL_LIGHT5 = (int)0x4005;
    public static final int GL_MODELVIEW6_ARB = (int)0x8726;
    public static final int GL_LIGHT4 = (int)0x4004;
    public static final int GL_LIGHT7 = (int)0x4007;
    public static final int GL_LIGHT6 = (int)0x4006;
    public static final int GL_LIGHT1 = (int)0x4001;
    public static final int GL_LIGHT0 = (int)0x4000;
    public static final int GL_LIGHT3 = (int)0x4003;
    public static final int GL_LIGHT2 = (int)0x4002;
    public static final int GL_SAMPLER_1D = (int)0x8B5D;
    public static final int GL_REG_0_ATI = (int)0x8921;
    public static final int GL_NEGATE_BIT_ATI = (int)0x00000004;
    public static final int GL_TEXTURE_INDEX_SIZE_EXT = (int)0x80ED;
    public static final int GL_ANGLE_translated_shader_source = (int)1;
    public static final int GL_LIGHT_MODEL_LOCAL_VIEWER = (int)0x0B51;
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = (int)0x8895;
    public static final int GL_S3_s3tc = (int)1;
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET = (int)0x8904;
    public static final int GL_PATH_FILL_BOUNDING_BOX_NV = (int)0x90A1;
    public static final int GL_SRGB_WRITE = (int)0x8298;
    public static final int GL_SAMPLER_2D = (int)0x8B5E;
    public static final int GL_EVAL_TRIANGULAR_2D_NV = (int)0x86C1;
    public static final int GL_PIXEL_MAP_G_TO_G = (int)0x0C77;
    public static final int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = (int)0x8904;
    public static final int GL_3D = (int)0x0601;
    public static final int GL_PATH_FILL_MASK_NV = (int)0x9081;
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT = (int)0x8D44;
    public static final int GL_STORAGE_CACHED_APPLE = (int)0x85BE;
    public static final int GL_MULTISAMPLE_BIT = (int)0x20000000;
    public static final int GL_RGB_SIGNED_SGIX = (int)0x85E0;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = (int)0x8516;
    public static final int GL_COEFF = (int)0x0A00;
    public static final int GL_MAX_LUMINANCE_SGIS = (int)0x85F9;
    public static final int GL_MAX_SERVER_WAIT_TIMEOUT = (int)0x9111;
    public static final int GL_SAMPLER_3D = (int)0x8B5F;
    public static final int GL_MATRIX10_ARB = (int)0x88CA;
    public static final int GL_SPHERE_MAP = (int)0x2402;
    public static final int GL_UNSIGNED_INT16_VEC2_NV = (int)0x8FF1;
    public static final int GL_ARB_texture_view = (int)1;
    public static final int GL_LOSE_CONTEXT_ON_RESET_ARB = (int)0x8252;
    public static final int GL_ARB_draw_buffers_blend = (int)1;
    public static final int GL_CONJOINT_NV = (int)0x9284;
    public static final int GL_VARIANT_ARRAY_EXT = (int)0x87E8;
    public static final int GL_INTENSITY_FLOAT32_APPLE = (int)0x8817;
    public static final int GL_SAMPLE_SHADING = (int)0x8C36;
    public static final int GL_SPOT_CUTOFF = (int)0x1206;
    public static final int GL_INTENSITY32F_ARB = (int)0x8817;
    public static final int GL_DOT2_ADD_ATI = (int)0x896C;
    public static final int GL_INT8_VEC3_NV = (int)0x8FE2;
    public static final int GL_BUFFER_ACCESS_FLAGS = (int)0x911F;
    public static final int GL_OPERAND0_RGB_ARB = (int)0x8590;
    public static final int GL_TRANSLATE_2D_NV = (int)0x9090;
    public static final int GL_TEXTURE_BINDING_2D_ARRAY_EXT = (int)0x8C1D;
    public static final int GL_MATRIX9_ARB = (int)0x88C9;
    public static final int GL_FRAGMENT_SHADER_ARB = (int)0x8B30;
    public static final int GL_UNKNOWN_CONTEXT_RESET_ARB = (int)0x8255;
    public static final int GL_GEOMETRY_PROGRAM_NV = (int)0x8C26;
    public static final int GL_TEXTURE10_ARB = (int)0x84CA;
    public static final int GL_INTENSITY_FLOAT16_APPLE = (int)0x881D;
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = (int)0x8B9A;
    public static final int GL_BEVEL_NV = (int)0x90A6;
    public static final int GL_READ_ONLY = (int)0x88B8;
    public static final int GL_VIEW_CLASS_RGTC2_RG = (int)0x82D1;
    public static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = (int)0x80D5;
    public static final int GL_RGB16UI = (int)0x8D77;
    public static final int GL_GEOMETRY_SHADER_EXT = (int)0x8DD9;
    public static final int GL_AMD_transform_feedback3_lines_triangles = (int)1;
    public static final int GL_DEBUG_TYPE_PERFORMANCE_ARB = (int)0x8250;
    public static final int GL_SUBSAMPLE_DISTANCE_AMD = (int)0x883F;
    public static final int GL_MAX_SAMPLE_MASK_WORDS = (int)0x8E59;
    public static final int GL_TEXTURE17_ARB = (int)0x84D1;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = (int)0x8DD7;
    public static final int GL_VERTEX_ARRAY_SIZE = (int)0x807A;
    public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = (int)0x9308;
    public static final int GL_MAX_NAME_LENGTH = (int)0x92F6;
    public static final int GL_EYE_POINT_SGIS = (int)0x81F4;
    public static final int GL_VERTEX_DATA_HINT_PGI = (int)107050;
    public static final int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = (int)0x86F2;
    public static final int GL_VERTEX_ARRAY_ADDRESS_NV = (int)0x8F21;
    public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = (int)0x92C3;
    public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = (int)0x8A2C;
    public static final int GL_TRANSPOSE_COLOR_MATRIX = (int)0x84E6;
    public static final int GL_TEXTURE30_ARB = (int)0x84DE;
    public static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = (int)0x9127;
    public static final int GL_MAX_CLIP_DISTANCES = (int)0x0D32;
    public static final int GL_SOFTLIGHT_NV = (int)0x929C;
    public static final int GL_VARIANT_ARRAY_TYPE_EXT = (int)0x87E7;
    public static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = (int)0x8808;
    public static final int GL_IBM_multimode_draw_arrays = (int)1;
    public static final int GL_MAX_IMAGE_UNITS = (int)0x8F38;
    public static final int GL_EXT_abgr = (int)1;
    public static final int GL_REGAL_error_string = (int)1;
    public static final int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = (int)0x86F3;
    public static final int GL_LINE_WIDTH_RANGE = (int)0x0B22;
    public static final int GL_OFFSET_TEXTURE_2D_NV = (int)0x86E8;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = (int)0x8CD6;
    public static final int GL_INDEX_OFFSET = (int)0x0D13;
    public static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = (int)0x881F;
    public static final int GL_TEXTURE_2D_STACK_BINDING_MESAX = (int)0x875E;
    public static final int GL_HARDMIX_NV = (int)0x92A9;
    public static final int GL_PRIMITIVE_RESTART_NV = (int)0x8558;
    public static final int GL_ARB_shadow_ambient = (int)1;
    public static final int GL_EXT_copy_texture = (int)1;
    public static final int GL_COLOR_MATRIX_STACK_DEPTH = (int)0x80B2;
    public static final int GL_EXT_texture_compression_dxt1 = (int)1;
    public static final int GL_NV_shader_buffer_load = (int)1;
    public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS = (int)0x9123;
    public static final int GL_EXCLUSION_NV = (int)0x92A0;
    public static final int GL_VERTEX_TEXTURE = (int)0x829B;
    public static final int GL_POST_COLOR_MATRIX_BLUE_SCALE = (int)0x80B6;
    public static final int GL_NV_explicit_multisample = (int)1;
    public static final int GL_FRACTIONAL_ODD = (int)0x8E7B;
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = (int)0x8B4A;
    public static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = (int)0x88A1;
    public static final int GL_NV_bindless_multi_draw_indirect = (int)1;
    public static final int GL_MAT_AMBIENT_BIT_PGI = (int)0x00100000;
    public static final int GL_CONSTANT_ARB = (int)0x8576;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = (int)0x8E23;
    public static final int GL_UNDEFINED_APPLE = (int)0x8A1C;
    public static final int GL_TEXT_FRAGMENT_SHADER_ATI = (int)0x8200;
    public static final int GL_MAP2_VERTEX_ATTRIB6_4_NV = (int)0x8676;
    public static final int GL_PROGRAM_FORMAT_ARB = (int)0x8876;
    public static final int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = (int)0x8DA6;
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = (int)0x886A;
    public static final int GL_ARB_draw_instanced = (int)1;
    public static final int GL_EXT_convolution = (int)1;
    public static final int GL_DEPTH_COMPONENT16_SGIX = (int)0x81A5;
    public static final int GL_EYE_DISTANCE_TO_POINT_SGIS = (int)0x81F0;
    public static final int GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = (int)0x8E5D;
    public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = (int)0x8C4D;
    public static final int GL_DRAW_INDIRECT_BUFFER = (int)0x8F3F;
    public static final int GL_PIXEL_MAG_FILTER_EXT = (int)0x8331;
    public static final int GL_OPERAND1_ALPHA_EXT = (int)0x8599;
    public static final int GL_CLAMP_TO_BORDER_ARB = (int)0x812D;
    public static final int GL_FLOAT_RGB_NV = (int)0x8882;
    public static final int GL_TRACK_MATRIX_NV = (int)0x8648;
    public static final int GL_ALPHA16_SIGNED_SGIX = (int)0x85E8;
    public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT = (int)0x8B9B;
    public static final int GL_DOMAIN = (int)0x0A02;
    public static final int GL_EVAL_VERTEX_ATTRIB3_NV = (int)0x86C9;
    public static final int GL_ARB_tessellation_shader = (int)1;
    public static final int GL_CURRENT_MATRIX_STACK_DEPTH_NV = (int)0x8640;
    public static final int GL_DEBUG_LOGGED_MESSAGES = (int)0x9145;
    public static final int GL_ATIX_vertex_shader_output_point_size = (int)1;
    public static final int GL_RELATIVE_CUBIC_CURVE_TO_NV = (int)0x0D;
    public static final int GL_DEPENDENT_AR_TEXTURE_2D_NV = (int)0x86E9;
    public static final int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = (int)0x8846;
    public static final int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = (int)0x86DB;
    public static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = (int)0x880E;
    public static final int GL_BGRA_EXT = (int)0x80E1;
    public static final int GL_COLOR_TABLE_LUMINANCE_SIZE = (int)0x80DE;
    public static final int GL_EXT_bgra = (int)1;
    public static final int GL_COLOR_TABLE_RED_SIZE_SGI = (int)0x80DA;
    public static final int GL_POST_CONVOLUTION_BLUE_SCALE = (int)0x801E;
    public static final int GL_COMPUTE_WORK_GROUP_SIZE = (int)0x8267;
    public static final int GL_IMAGE_2D_RECT = (int)0x904F;
    public static final int GL_DOUBLE_MAT2x3 = (int)0x8F49;
    public static final int GL_DOUBLE_MAT2x4 = (int)0x8F4A;
    public static final int GL_SGI_color_matrix = (int)1;
    public static final int GL_QUERY_BUFFER_AMD = (int)0x9192;
    public static final int GL_PIXEL_BUFFER_BARRIER_BIT_EXT = (int)0x00000080;
    public static final int GL_DEBUG_SEVERITY_HIGH_ARB = (int)0x9146;
    public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = (int)0x87CB;
    public static final int GL_MAX_TEXTURE_COORDS_NV = (int)0x8871;
    public static final int GL_PATH_INITIAL_END_CAP_NV = (int)0x9077;
    public static final int GL_ARB_uniform_buffer_object = (int)1;
    public static final int GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = (int)0x8A10;
    public static final int GL_UNSIGNED_BYTE = (int)0x1401;
    public static final int GL_OUTPUT_COLOR1_EXT = (int)0x879C;
    public static final int GL_ARB_matrix_palette = (int)1;
    public static final int GL_RENDERBUFFER_SAMPLES_ANGLE = (int)0x8CAB;
    public static final int GL_TEXTURE_LUMINANCE_SIZE_EXT = (int)0x8060;
    public static final int GL_COLOR_ATTACHMENT7_EXT = (int)0x8CE7;
    public static final int GL_CND_ATI = (int)0x896A;
    public static final int GL_DSDT_MAG_NV = (int)0x86F6;
    public static final int GL_POST_COLOR_MATRIX_RED_SCALE_SGI = (int)0x80B4;
    public static final int GL_OUTPUT_TEXTURE_COORD13_EXT = (int)0x87AA;
    public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = (int)0x8265;
    public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = (int)0x92CE;
    public static final int GL_BUFFER = (int)0x82E0;
    public static final int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = (int)0x8DE3;
    public static final int GL_VERSION_4_3 = (int)1;
    public static final int GL_VERSION_4_2 = (int)1;
    public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = (int)0x9314;
    public static final int GL_VERSION_4_1 = (int)1;
    public static final int GL_SGIS_point_line_texgen = (int)1;
    public static final int GL_VERSION_4_0 = (int)1;
    public static final int GL_VERTEX_STREAM2_ATI = (int)0x876F;
    public static final int GL_VERSION_4_4 = (int)1;
    public static final int GL_RGB32I = (int)0x8D83;
    public static final int GL_NV_gpu_program_fp64 = (int)1;
    public static final int GL_RGB32F = (int)0x8815;
    public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = (int)0x8B4A;
    public static final int GL_LINEARDODGE_NV = (int)0x92A4;
    public static final int GL_COMPRESSED_SRGB = (int)0x8C48;
    public static final int GL_UNIFORM_BLOCK_DATA_SIZE = (int)0x8A40;
    public static final int GL_TEXTURE_LOD_BIAS_EXT = (int)0x8501;
    public static final int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = (int)0x8855;
    public static final int GL_ATOMIC_COUNTER_BUFFER = (int)0x92C0;
    public static final int GL_WEIGHT_ARRAY_POINTER_ARB = (int)0x86AC;
    public static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = (int)0x88B4;
    public static final int GL_NV_texture_compression_vtc = (int)1;
    public static final int GL_DEBUG_SEVERITY_HIGH_AMD = (int)0x9146;
    public static final int GL_DEPTH_CLAMP = (int)0x864F;
    public static final int GL_INTERPOLATE = (int)0x8575;
    public static final int GL_SRGB8_ALPHA8 = (int)0x8C43;
    public static final int GL_LUMINANCE16I_EXT = (int)0x8D8C;
    public static final int GL_COLOR_ATTACHMENT15 = (int)0x8CEF;
    public static final int GL_COLOR_ATTACHMENT14 = (int)0x8CEE;
    public static final int GL_COLOR_ATTACHMENT13 = (int)0x8CED;
    public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = (int)0x92CD;
    public static final int GL_COLOR_ATTACHMENT12 = (int)0x8CEC;
    public static final int GL_COLOR_ATTACHMENT11 = (int)0x8CEB;
    public static final int GL_COLOR_ATTACHMENT10 = (int)0x8CEA;
    public static final int GL_COMBINER1_NV = (int)0x8551;
    public static final int GL_TEXTURE_COLOR_TABLE_SGI = (int)0x80BC;
    public static final int GL_WEIGHT_ARRAY_SIZE_ARB = (int)0x86AB;
    public static final int GL_EXT_bindable_uniform = (int)1;
    public static final int GL_SRGB = (int)0x8C40;
    public static final int GL_DEBUG_CALLBACK_FUNCTION_ARB = (int)0x8244;
    public static final int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = (int)0x864D;
    public static final int GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = (int)0x80D2;
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = (int)0x8C88;
    public static final int GL_QUERY_COUNTER_BITS_ANGLE = (int)0x8864;
    public static final int GL_PIXEL_PACK_BUFFER = (int)0x88EB;
    public static final int GL_DECAL = (int)0x2101;
    public static final int GL_SUN_read_video_pixels = (int)1;
    public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = (int)0x900D;
    public static final int GL_QUERY_RESULT_NO_WAIT_AMD = (int)0x9194;
    public static final int GL_ARB_texture_buffer_object = (int)1;
    public static final int GL_FULL_RANGE_EXT = (int)0x87E1;
    public static final int GL_LUMINANCE6_ALPHA2 = (int)0x8044;
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV_EXT = (int)0x8C3E;
    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = (int)0x90C7;
    public static final int GL_MAX_VARYING_VECTORS = (int)0x8DFC;
    public static final int GL_HISTOGRAM_GREEN_SIZE = (int)0x8029;
    public static final int GL_ALWAYS_SOFT_HINT_PGI = (int)107021;
    public static final int GL_TEXTURE_LUMINANCE_TYPE = (int)0x8C14;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = (int)0x8CD4;
    public static final int GL_PALETTE8_RGBA4_OES = (int)0x8B98;
    public static final int GL_TEXTURE_COMPRESSED = (int)0x86A1;
    public static final int GL_SHADER_INCLUDE_ARB = (int)0x8DAE;
    public static final int GL_TEXTURE_BINDING_3D = (int)0x806A;
    public static final int GL_QUERY_RESULT_NV = (int)0x8866;
    public static final int GL_CONVOLUTION_2D_EXT = (int)0x8011;
    public static final int GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = (int)0x9047;
    public static final int GL_INNOCENT_CONTEXT_RESET_ARB = (int)0x8254;
    public static final int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = (int)0x8908;
    public static final int GL_PIXEL_MAP_S_TO_S_SIZE = (int)0x0CB1;
    public static final int GL_LUMINANCE6_ALPHA2_EXT = (int)0x8044;
    public static final int GL_TEXTURE_COMPARE_FUNC_ARB = (int)0x884D;
    public static final int GL_ARB_timer_query = (int)1;
    public static final int GL_TEXTURE_BINDING_2D = (int)0x8069;
    public static final int GL_EXT_draw_range_elements = (int)1;
    public static final int GL_FOG_OFFSET_SGIX = (int)0x8198;
    public static final int GL_SIGNED_RGB8_NV = (int)0x86FF;
    public static final int GL_SAMPLER_1D_ARRAY = (int)0x8DC0;
    public static final int GL_NEGATIVE_Y_EXT = (int)0x87DA;
    public static final int GL_INTENSITY16_EXTENDED_RANGE_SGIX = (int)0x85F6;
    public static final int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = (int)0x914E;
    public static final int GL_TEXTURE_2D_MULTISAMPLE = (int)0x9100;
    public static final int GL_PLUS_CLAMPED_ALPHA_NV = (int)0x92B2;
    public static final int GL_TRUE = (int)1;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = (int)0x9279;
    public static final int GL_TEXTURE_BINDING_1D = (int)0x8068;
    public static final int GL_MODELVIEW21_ARB = (int)0x8735;
    public static final int GL_DEPTH24_STENCIL8_EXT = (int)0x88F0;
    public static final int GL_OFFSET_TEXTURE_2D_SCALE_NV = (int)0x86E2;
    public static final int GL_INTENSITY12_EXT = (int)0x804C;
    public static final int GL_VERTEX_ID_NV = (int)0x8C7B;
    public static final int GL_PATH_JOIN_STYLE_NV = (int)0x9079;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = (int)0x851A;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = (int)0x8518;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = (int)0x8516;
    public static final int GL_FRACTIONAL_EVEN = (int)0x8E7C;
    public static final int GL_FRAMEBUFFER_BINDING = (int)0x8CA6;
    public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = (int)0x9277;
    public static final int GL_EXT_coordinate_frame = (int)1;
    public static final int GL_VERTEX_ARRAY_LIST_STRIDE_IBM = (int)103080;
    public static final int GL_INGR_color_clamp = (int)1;
    public static final int GL_TESS_EVALUATION_TEXTURE = (int)0x829D;
    public static final int GL_POLYGON_SMOOTH_HINT = (int)0x0C53;
    public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = (int)0x8622;
    public static final int GL_PRIMARY_COLOR = (int)0x8577;
    public static final int GL_DOUBLE_MAT3x4_EXT = (int)0x8F4C;
    public static final int GL_COLORDODGE_NV = (int)0x9299;
    public static final int GL_APPLE_transform_hint = (int)1;
    public static final int GL_COUNT_DOWN_NV = (int)0x9089;
    public static final int GL_DEPENDENT_RGB_TEXTURE_3D_NV = (int)0x8859;
    public static final int GL_R1UI_T2F_N3F_V3F_SUN = (int)0x85CA;
    public static final int GL_MODULATE_SIGNED_ADD_ATIX = (int)0x8745;
    public static final int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = (int)0x8C72;
    public static final int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = (int)0x9036;
    public static final int GL_INTERLACE_READ_OML = (int)0x8981;
    public static final int GL_NV_float_buffer = (int)1;
    public static final int GL_PRIMARY_COLOR_ARB = (int)0x8577;
    public static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = (int)0x87C6;
    public static final int GL_TEXTURE_SHARED_SIZE = (int)0x8C3F;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = (int)0x93D6;
    public static final int GL_LUMINANCE12_ALPHA4 = (int)0x8046;
    public static final int GL_MAP_ATTRIB_V_ORDER_NV = (int)0x86C4;
    public static final int GL_EVAL_VERTEX_ATTRIB2_NV = (int)0x86C8;
    public static final int GL_CUBIC_CURVE_TO_NV = (int)0x0C;
    public static final int GL_R32UI = (int)0x8236;
    public static final int GL_RED_INTEGER_EXT = (int)0x8D94;
    public static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = (int)0x88AF;
    public static final int GL_FONT_UNITS_PER_EM_BIT_NV = (int)0x00100000;
    public static final int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = (int)0x808B;
    public static final int GL_KTX_FRONT_REGION = (int)0x0;
    public static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = (int)0x87F7;
    public static final int GL_CONST_EYE_NV = (int)0x86E5;
    public static final int GL_MAX_IMAGE_SAMPLES_EXT = (int)0x906D;
    public static final int GL_TEXTURE27_ARB = (int)0x84DB;
    public static final int GL_SELECT = (int)0x1C02;
    public static final int GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = (int)0x8E5A;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = (int)0x8519;
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION = (int)0x0506;
    public static final int GL_PALETTE4_RGBA4_OES = (int)0x8B93;
    public static final int GL_TEXTURE_FLOAT_COMPONENTS_NV = (int)0x888C;
    public static final int GL_VERTEX_ATTRIB_ARRAY1_NV = (int)0x8651;
    public static final int GL_LOG_REGAL = (int)0x9324;
    public static final int GL_TEXTURE_SHARED_SIZE_EXT = (int)0x8C3F;
    public static final int GL_TRANSFORM_FEEDBACK = (int)0x8E22;
    public static final int GL_EXT_framebuffer_object = (int)1;
    public static final int GL_COMBINE4_NV = (int)0x8503;
    public static final int GL_COMBINE_EXT = (int)0x8570;
    public static final int GL_ATI_map_object_buffer = (int)1;
    public static final int GL_MAX_INTEGER_SAMPLES = (int)0x9110;
    public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = (int)0x8A31;
    public static final int GL_TEXTURE8_ARB = (int)0x84C8;
    public static final int GL_APPLE_texture_range = (int)1;
    public static final int GL_AND_INVERTED = (int)0x1504;
    public static final int GL_CLEAR_BUFFER = (int)0x82B4;
    public static final int GL_DOT3_RGB_ARB = (int)0x86AE;
    public static final int GL_STENCIL_BACK_REF = (int)0x8CA3;
    public static final int GL_LOG_DRIVER_REGAL = (int)0x931D;
    public static final int GL_ACCUM_ADJACENT_PAIRS_NV = (int)0x90AD;
    public static final int GL_POST_CONVOLUTION_GREEN_SCALE = (int)0x801D;
    public static final int GL_VARIABLE_B_NV = (int)0x8524;
    public static final int GL_ARB_transpose_matrix = (int)1;
    public static final int GL_GREMEDY_string_marker = (int)1;
    public static final int GL_NV_vertex_attrib_integer_64bit = (int)1;
    public static final int GL_NV_gpu_shader5 = (int)1;
    public static final int GL_MODELVIEW15_ARB = (int)0x872F;
    public static final int GL_OUTPUT_TEXTURE_COORD20_EXT = (int)0x87B1;
    public static final int GL_HI_SCALE_NV = (int)0x870E;
    public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = (int)0x886A;
    public static final int GL_ARB_separate_shader_objects = (int)1;
    public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = (int)0x851E;
    public static final int GL_SAMPLE_ALPHA_TO_ONE_ARB = (int)0x809F;
    public static final int GL_ELEMENT_ARRAY_TYPE_APPLE = (int)0x8A0D;
    public static final int GL_READ_WRITE = (int)0x88BA;
    public static final int GL_MAX_ELEMENTS_VERTICES = (int)0x80E8;
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = (int)0x8623;
    public static final int GL_RENDERBUFFER_SAMPLES_EXT = (int)0x8CAB;
    public static final int GL_TEXTURE_BUFFER = (int)0x8C2A;
    public static final int GL_FOG_COORD_ARRAY = (int)0x8457;
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE = (int)0x8642;
    public static final int GL_3DFX_texture_compression_FXT1 = (int)1;
    public static final int GL_RESCALE_NORMAL = (int)0x803A;
    public static final int GL_MAX_ACTIVE_LIGHTS_EXT = (int)0x8405;
    public static final int GL_DOT3_RGB = (int)0x86AE;
    public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = (int)0x8E89;
    public static final int GL_R16 = (int)0x822A;
    public static final int GL_CULL_VERTEX_EYE_POSITION_EXT = (int)0x81AB;
    public static final int GL_ALPHA_MIN_CLAMP_INGR = (int)0x8563;
    public static final int GL_LAYOUT_DEFAULT_INTEL = (int)0;
    public static final int GL_RGB_SCALE = (int)0x8573;
    public static final int GL_C3F_V3F = (int)0x2A24;
    public static final int GL_NV_depth_clamp = (int)1;
    public static final int GL_TEXTURE1 = (int)0x84C1;
    public static final int GL_STENCIL_FUNC = (int)0x0B92;
    public static final int GL_TEXTURE2 = (int)0x84C2;
    public static final int GL_TEXTURE3 = (int)0x84C3;
    public static final int GL_TEXTURE_MATERIAL_FACE_EXT = (int)0x8351;
    public static final int GL_TEXTURE4 = (int)0x84C4;
    public static final int GL_TEXTURE5 = (int)0x84C5;
    public static final int GL_TEXTURE6 = (int)0x84C6;
    public static final int GL_TEXTURE7 = (int)0x84C7;
    public static final int GL_TEXTURE8 = (int)0x84C8;
    public static final int GL_TEXTURE9 = (int)0x84C9;
    public static final int GL_RENDERBUFFER_RED_SIZE = (int)0x8D50;
    public static final int GL_SHADER = (int)0x82E1;
    public static final int GL_COLOR_ARRAY_TYPE = (int)0x8082;
    public static final int GL_COMBINER_BIAS_NV = (int)0x8549;
    public static final int GL_FOG_COORDINATE_ARRAY = (int)0x8457;
    public static final int GL_UNSIGNED_SHORT_4_4_4_4_EXT = (int)0x8033;
    public static final int GL_TEXTURE_RED_SIZE = (int)0x805C;
    public static final int GL_TEXTURE0 = (int)0x84C0;
    public static final int GL_TEXTURE_BINDING_BUFFER = (int)0x8C2C;
    public static final int GL_POLYGON_OFFSET_EXT = (int)0x8037;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = (int)0x93DD;
    public static final int GL_WRITE_ONLY_ARB = (int)0x88B9;
    public static final int GL_VERTEX_STREAM0_ATI = (int)0x876D;
    public static final int GL_UNSIGNED_INT_5_9_9_9_REV = (int)0x8C3E;
    public static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = (int)0x850F;
    public static final int GL_MAP1_VERTEX_ATTRIB10_4_NV = (int)0x866A;
    public static final int GL_COMPRESSED_RGBA_BPTC_UNORM = (int)0x8E8C;
    public static final int GL_UNSIGNED_NORMALIZED_ARB = (int)0x8C17;
    public static final int GL_TEXCOORD2_BIT_PGI = (int)0x20000000;
    public static final int GL_DST_NV = (int)0x9287;
    public static final int GL_ALPHA32I_EXT = (int)0x8D84;
    public static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING = (int)0x889D;
    public static final int GL_EXT_texture_compression_rgtc = (int)1;
    public static final int GL_MODELVIEW12_ARB = (int)0x872C;
    public static final int GL_STENCIL_BUFFER_BIT = (int)0x00000400;
    public static final int GL_LOAD = (int)0x0101;
    public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = (int)0x92DB;
    public static final int GL_TEXTURE_GREEN_SIZE = (int)0x805D;
    public static final int GL_FLOAT_MAT2_ARB = (int)0x8B5A;
    public static final int GL_T2F_N3F_V3F = (int)0x2A2B;
    public static final int GL_FEEDBACK_BUFFER_POINTER = (int)0x0DF0;
    public static final int GL_QUERY = (int)0x82E3;
    public static final int GL_HSL_SATURATION_NV = (int)0x92AE;
    public static final int GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = (int)0x85C1;
    public static final int GL_CONVOLUTION_FILTER_BIAS_EXT = (int)0x8015;
    public static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = (int)0x0D3B;
    public static final int GL_COLOR_TABLE_BIAS_SGI = (int)0x80D7;
    public static final int GL_SGIX_texture_scale_bias = (int)1;
    public static final int GL_EMBOSS_CONSTANT_NV = (int)0x855E;
    public static final int GL_POLYGON_STIPPLE_BIT = (int)0x00000010;
    public static final int GL_MULTISAMPLE = (int)0x809D;
    public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = (int)0x82D9;
    public static final int GL_DEPTH_STENCIL = (int)0x84F9;
    public static final int GL_OUTPUT_TEXTURE_COORD24_EXT = (int)0x87B5;
    public static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = (int)0x8F20;
    public static final int GL_COLOR_MATERIAL_FACE = (int)0x0B55;
    public static final int GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = (int)0x8C4B;
    public static final int GL_PIXEL_MAP_B_TO_B = (int)0x0C78;
    public static final int GL_CONVOLUTION_HINT_SGIX = (int)0x8316;
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE = (int)0x809E;
    public static final int GL_TEXTURE_SWIZZLE_RGBA = (int)0x8E46;
    public static final int GL_MULTISAMPLE_BIT_EXT = (int)0x20000000;
    public static final int GL_TEXTURE_ALPHA_SIZE_EXT = (int)0x805F;
    public static final int GL_YCBAYCR8A_4224_NV = (int)0x9032;
    public static final int GL_RENDERBUFFER_SAMPLES = (int)0x8CAB;
    public static final int GL_SOURCE2_ALPHA_ARB = (int)0x858A;
    public static final int GL_UNSIGNED_INT8_VEC2_NV = (int)0x8FED;
    public static final int GL_ARB_shader_texture_lod = (int)1;
    public static final int GL_FIXED_ONLY = (int)0x891D;
    public static final int GL_TIMESTAMP = (int)0x8E28;
    public static final int GL_READ_ONLY_ARB = (int)0x88B8;
    public static final int GL_ARB_sparse_texture = (int)1;
    public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = (int)0x90C8;
    public static final int GL_RGBA16_SNORM = (int)0x8F9B;
    public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = (int)0x0B13;
    public static final int GL_SHADER_BINARY_FORMATS = (int)0x8DF8;
    public static final int GL_MAT_EMISSION_BIT_PGI = (int)0x00800000;
    public static final int GL_INTEL_parallel_arrays = (int)1;
    public static final int GL_SAMPLER_RENDERBUFFER_NV = (int)0x8E56;
    public static final int GL_MAX_ELEMENTS_INDICES_EXT = (int)0x80E9;
    public static final int GL_LINE_LOOP = (int)0x0002;
    public static final int GL_PIXEL_PACK_BUFFER_EXT = (int)0x88EB;
    public static final int GL_GENERATE_MIPMAP_HINT_SGIS = (int)0x8192;
    public static final int GL_LUMINANCE_ALPHA16F_ARB = (int)0x881F;
    public static final int GL_TEXTURE_UPDATE_BARRIER_BIT = (int)0x00000100;
    public static final int GL_SAMPLE_POSITION = (int)0x8E50;
    public static final int GL_INTERLACE_READ_INGR = (int)0x8568;
    public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = (int)0x8E8F;
    public static final int GL_IMAGE_BINDING_LAYER_EXT = (int)0x8F3D;
    public static final int GL_RGBA32UI_EXT = (int)0x8D70;
    public static final int GL_OUTPUT_TEXTURE_COORD6_EXT = (int)0x87A3;
    public static final int GL_COMBINER_COMPONENT_USAGE_NV = (int)0x8544;
    public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR = (int)0x93BC;
    public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = (int)0x8DE1;
    public static final int GL_RGB16_EXT = (int)0x8054;
    public static final int GL_INT_IMAGE_1D_ARRAY = (int)0x905D;
    public static final int GL_BLEND_EQUATION_EXT = (int)0x8009;
    public static final int GL_SRC_IN_NV = (int)0x928A;
    public static final int GL_IS_ROW_MAJOR = (int)0x9300;
    public static final int GL_TRANSFORM_FEEDBACK_VARYING = (int)0x92F4;
    public static final int GL_GLOBAL_ALPHA_FACTOR_SUN = (int)0x81DA;
    public static final int GL_OBJECT_DELETE_STATUS_ARB = (int)0x8B80;
    public static final int GL_LUMINANCE_FLOAT32_APPLE = (int)0x8818;
    public static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT = (int)0x9054;
    public static final int GL_ARB_provoking_vertex = (int)1;
    public static final int GL_SGIX_reference_plane = (int)1;
    public static final int GL_SHADING_LANGUAGE_VERSION = (int)0x8B8C;
    public static final int GL_NV_packed_depth_stencil = (int)1;
    public static final int GL_EXT_provoking_vertex = (int)1;
    public static final int GL_INTENSITY8UI_EXT = (int)0x8D7F;
    public static final int GL_MODELVIEW23_ARB = (int)0x8737;
    public static final int GL_OPERAND0_ALPHA_EXT = (int)0x8598;
    public static final int GL_ATI_envmap_bumpmap = (int)1;
    public static final int GL_RENDERBUFFER_BLUE_SIZE = (int)0x8D52;
    public static final int GL_OP_SET_LT_EXT = (int)0x878D;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = (int)0x8C8F;
    public static final int GL_INT_IMAGE_2D_RECT_EXT = (int)0x905A;
    public static final int GL_HALF_FLOAT_NV = (int)0x140B;
    public static final int GL_DRAW_BUFFER10_ATI = (int)0x882F;
    public static final int GL_RENDERBUFFER_WIDTH = (int)0x8D42;
    public static final int GL_MODELVIEW7_ARB = (int)0x8727;
    public static final int GL_MAX_FRAGMENT_LIGHTS_EXT = (int)0x8404;
    public static final int GL_ALPHA_SNORM = (int)0x9010;
    public static final int GL_RED_BIT_ATI = (int)0x00000001;
    public static final int GL_PACK_SKIP_PIXELS = (int)0x0D04;
    public static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = (int)0x919A;
    public static final int GL_VERTEX_STREAM7_ATI = (int)0x8774;
    public static final int GL_4PASS_2_EXT = (int)0x80A6;
    public static final int GL_COLOR_RENDERABLE = (int)0x8286;
    public static final int GL_PARTIAL_SUCCESS_NV = (int)0x902E;
    public static final int GL_CLAMP_FRAGMENT_COLOR_ARB = (int)0x891B;
    public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = (int)0x8DD6;
    public static final int GL_BACK_NORMALS_HINT_PGI = (int)107043;
    public static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = (int)0x8337;
    public static final int GL_STATIC_READ_ARB = (int)0x88E5;
    public static final int GL_DRAW_BUFFER10_ARB = (int)0x882F;
    public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = (int)0x84F8;
    public static final int GL_PERTURB_EXT = (int)0x85AE;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = (int)0x93D0;
    public static final int GL_EDGEFLAG_BIT_PGI = (int)0x00040000;
    public static final int GL_SCISSOR_BIT = (int)0x00080000;
    public static final int GL_EXT_texture_swizzle = (int)1;
    public static final int GL_OP_MOV_EXT = (int)0x8799;
    public static final int GL_PACK_INVERT_MESA = (int)0x8758;
    public static final int GL_IMAGE_BINDING_LAYER = (int)0x8F3D;
    public static final int GL_LARGE_CW_ARC_TO_NV = (int)0x18;
    public static final int GL_TEXTURE29_ARB = (int)0x84DD;
    public static final int GL_ALPHA32UI_EXT = (int)0x8D72;
    public static final int GL_PATH_STROKE_MASK_NV = (int)0x9084;
    public static final int GL_COMPRESSED_LUMINANCE_LATC1_EXT = (int)0x8C70;
    public static final int GL_EXT_texture_env_dot3 = (int)1;
    public static final int GL_HILO_NV = (int)0x86F4;
    public static final int GL_DOUBLE_MAT2 = (int)0x8F46;
    public static final int GL_DOUBLE_MAT3 = (int)0x8F47;
    public static final int GL_BLEND_DST_RGB = (int)0x80C8;
    public static final int GL_NV_deep_texture3D = (int)1;
    public static final int GL_DOUBLE_MAT4 = (int)0x8F48;
    public static final int GL_COMPRESSED_R11_EAC = (int)0x9270;
    public static final int GL_BUFFER_MAP_LENGTH = (int)0x9120;
    public static final int GL_VERTEX_ARRAY_LIST_IBM = (int)103070;
    public static final int GL_TIME_ELAPSED_ANGLE = (int)0x88BF;
    public static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = (int)0x887D;
    public static final int GL_PROGRAM_BINARY_FORMATS = (int)0x87FF;
    public static final int GL_INTERNALFORMAT_ALPHA_SIZE = (int)0x8274;
    public static final int GL_FUNC_SUBTRACT = (int)0x800A;
    public static final int GL_DOUBLE_MAT4_EXT = (int)0x8F48;
    public static final int GL_EXT_fragment_lighting = (int)1;
    public static final int GL_R8UI = (int)0x8232;
    public static final int GL_INDEX_BIT_PGI = (int)0x00080000;
    public static final int GL_MAP2_VERTEX_ATTRIB3_4_NV = (int)0x8673;
    public static final int GL_NEGATIVE_X_EXT = (int)0x87D9;
    public static final int GL_RGB_FLOAT32_ATI = (int)0x8815;
    public static final int GL_TEXTURE21_ARB = (int)0x84D5;
    public static final int GL_IMAGE_CLASS_4_X_8 = (int)0x82BF;
    public static final int GL_UNPACK_SKIP_IMAGES = (int)0x806D;
    public static final int GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = (int)0x40;
    public static final int GL_MAX_RENDERBUFFER_SIZE = (int)0x84E8;
    public static final int GL_LUMINANCE_INTEGER_EXT = (int)0x8D9C;
    public static final int GL_OBJECT_ATTACHED_OBJECTS_ARB = (int)0x8B85;
    public static final int GL_FOG_COORDINATE_SOURCE = (int)0x8450;
    public static final int GL_COLOR_ATTACHMENT2_EXT = (int)0x8CE2;
    public static final int GL_ATI_fragment_shader = (int)1;
    public static final int GL_MULTISAMPLE_FILTER_HINT_NV = (int)0x8534;
    public static final int GL_CURRENT_RASTER_DISTANCE = (int)0x0B09;
    public static final int GL_STRICT_LIGHTING_HINT_PGI = (int)107031;
    public static final int GL_UNPACK_IMAGE_HEIGHT_EXT = (int)0x806E;
    public static final int GL_MAX_PALETTE_MATRICES_ARB = (int)0x8842;
    public static final int GL_NUM_LOOPBACK_COMPONENTS_ATI = (int)0x8974;
    public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = (int)0x8DD8;
    public static final int GL_NUM_SHADING_LANGUAGE_VERSIONS = (int)0x82E9;
    public static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB = (int)0x88AA;
    public static final int GL_EVAL_VERTEX_ATTRIB0_NV = (int)0x86C6;
    public static final int GL_TEXTURE_CUBE_MAP_ARB = (int)0x8513;
    public static final int GL_LINE_STRIP_ADJACENCY_ARB = (int)0xB;
    public static final int GL_AMD_name_gen_delete = (int)1;
    public static final int GL_MAP_PERSISTENT_BIT = (int)0x00000040;
    public static final int GL_PGI_vertex_hints = (int)1;
    public static final int GL_4PASS_3_SGIS = (int)0x80A7;
    public static final int GL_CON_5_ATI = (int)0x8946;
    public static final int GL_PRIMITIVES_GENERATED = (int)0x8C87;
    public static final int GL_NATIVE_GRAPHICS_END_HINT_PGI = (int)107012;
    public static final int GL_FOG_COLOR = (int)0x0B66;
    public static final int GL_CONTINUOUS_AMD = (int)0x9007;
    public static final int GL_ORDER = (int)0x0A01;
    public static final int GL_VERTEX_BINDING_STRIDE = (int)0x82D8;
    public static final int GL_PATH_STENCIL_REF_NV = (int)0x90B8;
    public static final int GL_SCALE_BY_TWO_NV = (int)0x853E;
    public static final int GL_INDEX_CLEAR_VALUE = (int)0x0C20;
    public static final int GL_TEXTURE_COORD_ARRAY_POINTER = (int)0x8092;
    public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = (int)0x9109;
    public static final int GL_ROUND_NV = (int)0x90A4;
    public static final int GL_DECR = (int)0x1E03;
    public static final int GL_ARB_texture_border_clamp = (int)1;
    public static final int GL_INT_SAMPLER_1D_ARRAY = (int)0x8DCE;
    public static final int GL_TEXTURE_3D_BINDING_EXT = (int)0x806A;
    public static final int GL_COMPRESSED_SRGB_ALPHA_EXT = (int)0x8C49;
    public static final int GL_RG8UI = (int)0x8238;
    public static final int GL_UNSIGNED_INT8_VEC3_NV = (int)0x8FEE;
    public static final int GL_ALPHA_EXTENDED_RANGE_SGIX = (int)0x85EE;
    public static final int GL_IMAGE_CLASS_1_X_8 = (int)0x82C1;
    public static final int GL_CURRENT_RASTER_SECONDARY_COLOR = (int)0x845F;
    public static final int GL_PLUS_NV = (int)0x9291;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = (int)0x906C;
    public static final int GL_ARB_texture_compression_rgtc = (int)1;
    public static final int GL_SAMPLER_1D_SHADOW_ARB = (int)0x8B61;
    public static final int GLEW_VERSION_MAJOR = (int)2;
    public static final int GL_NV_register_combiners2 = (int)1;
    public static final int GL_NV_primitive_restart = (int)1;
    public static final int GL_TEXTURE_ALPHA_TYPE_ARB = (int)0x8C13;
    public static final int GL_MATRIX6_ARB = (int)0x88C6;
    public static final int GL_UNSIGNED_INT8_VEC4_NV = (int)0x8FEF;
    public static final int GL_EDGE_FLAG_ARRAY_POINTER = (int)0x8093;
    public static final int GL_OR_INVERTED = (int)0x150D;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = (int)0x8CD7;
    public static final int GL_SCISSOR_BOX = (int)0x0C10;
    public static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = (int)0x80B7;
    public static final int GL_MAP1_GRID_DOMAIN = (int)0x0DD0;
    public static final int GL_BGRA_INTEGER = (int)0x8D9B;
    public static final int GL_EXT_pixel_transform_color_table = (int)1;
    public static final int GL_GLYPH_HAS_KERNING_BIT_NV = (int)0x100;
    public static final int GL_KHR_debug = (int)1;
    public static final int GL_ACTIVE_TEXTURE = (int)0x84E0;
    public static final int GL_OP_DOT4_EXT = (int)0x8785;
    public static final int GL_UNPACK_RESAMPLE_OML = (int)0x8985;
    public static final int GL_CURRENT_TANGENT_EXT = (int)0x843B;
    public static final int GL_BLEND_DST_ALPHA = (int)0x80CA;
    public static final int GL_2_BYTES = (int)0x1407;
    public static final int GL_COPY_PIXEL_TOKEN = (int)0x0706;
    public static final int GL_DYNAMIC_DRAW_ARB = (int)0x88E8;
    public static final int GL_LUMINANCE_ALPHA16I_EXT = (int)0x8D8D;
    public static final int GL_TEXTURE_DEPTH_SIZE_ARB = (int)0x884A;
    public static final int GL_NORMAL_MAP_ARB = (int)0x8511;
    public static final int GL_SMOOTH_LINE_WIDTH_RANGE = (int)0x0B22;
    public static final int GL_DEPENDENT_GB_TEXTURE_2D_NV = (int)0x86EA;
    public static final int GL_MAX_LABEL_LENGTH = (int)0x82E8;
    public static final int GL_ARB_half_float_pixel = (int)1;
    public static final int GL_FORMAT_SUBSAMPLE_24_24_OML = (int)0x8982;
    public static final int GL_BINORMAL_ARRAY_TYPE_EXT = (int)0x8440;
    public static final int GL_COMPILE_AND_EXECUTE = (int)0x1301;
    public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = (int)0x8DE1;
    public static final int GL_EXT_blend_logic_op = (int)1;
    public static final int GL_BLEND_ADVANCED_COHERENT_NV = (int)0x9285;
    public static final int GL_COLOR_ARRAY_COUNT_EXT = (int)0x8084;
    public static final int GL_SAMPLE_MASK_VALUE_NV = (int)0x8E52;
    public static final int GL_COLOR_INDEX16_EXT = (int)0x80E7;
    public static final int GL_RESAMPLE_DECIMATE_SGIX = (int)0x8430;
    public static final int GL_POINT_BIT = (int)0x00000002;
    public static final int GL_NORMAL_ARRAY_STRIDE = (int)0x807F;
    public static final int GL_1PASS_SGIS = (int)0x80A1;
    public static final int GL_AMD_seamless_cubemap_per_texture = (int)1;
    public static final int GL_COMPRESSED_LUMINANCE_ARB = (int)0x84EA;
    public static final int GL_FRAMEBUFFER_SRGB_EXT = (int)0x8DB9;
    public static final int GL_FONT_UNDERLINE_THICKNESS_BIT_NV = (int)0x08000000;
    public static final int GL_EVAL_VERTEX_ATTRIB4_NV = (int)0x86CA;
    public static final int GL_HISTOGRAM_FORMAT = (int)0x8027;
    public static final int GL_QUERY_RESULT_ARB = (int)0x8866;
    public static final int GL_SAMPLE_COUNT_NV = (int)0x8914;
    public static final int GL_VERTEX_ARRAY_LENGTH_NV = (int)0x8F2B;
    public static final int GL_NV_texgen_emboss = (int)1;
    public static final int GL_ATI_texture_mirror_once = (int)1;
    public static final int GL_MATRIX5_NV = (int)0x8635;
    public static final int GL_PROXY_TEXTURE_1D_ARRAY_EXT = (int)0x8C19;
    public static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = (int)0x8F1E;
    public static final int GL_RGB_SCALE_ARB = (int)0x8573;
    public static final int GL_SRC_ATOP_NV = (int)0x928E;
    public static final int GL_BUMP_TARGET_ATI = (int)0x877C;
    public static final int GL_TESS_CONTROL_SUBROUTINE = (int)0x92E9;
    public static final int GL_INTERLEAVED_ATTRIBS_EXT = (int)0x8C8C;
    public static final int GL_ACTIVE_VARYINGS_NV = (int)0x8C81;
    public static final int GL_LUMINANCE_ALPHA32F_ARB = (int)0x8819;
    public static final int GL_TEXTURE2_ARB = (int)0x84C2;
    public static final int GL_PROGRAM_STRING_ARB = (int)0x8628;
    public static final int GL_MATRIX16_ARB = (int)0x88D0;
    public static final int GL_CULL_MODES_NV = (int)0x86E0;
    public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = (int)0x84F8;
    public static final int GL_LUMINANCE_ALPHA_INTEGER_EXT = (int)0x8D9D;
    public static final int GL_LINEARLIGHT_NV = (int)0x92A7;
    public static final int GL_TRANSPOSE_MODELVIEW_MATRIX = (int)0x84E3;
    public static final int GL_PIXEL_MAP_I_TO_I = (int)0x0C70;
    public static final int GL_BGRA_INTEGER_EXT = (int)0x8D9B;
    public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = (int)0x886D;
    public static final int GL_POINT_SPRITE_NV = (int)0x8861;
    public static final int GL_PIXEL_MAP_I_TO_R = (int)0x0C72;
    public static final int GL_TEXTURE_BORDER_COLOR = (int)0x1004;
    public static final int GL_ATIX_point_sprites = (int)1;
    public static final int GL_FRAMEBUFFER_EXT = (int)0x8D40;
    public static final int GL_PIXEL_MAP_I_TO_G = (int)0x0C73;
    public static final int GL_PIXEL_MAP_I_TO_B = (int)0x0C74;
    public static final int GL_PIXEL_MAP_I_TO_A = (int)0x0C75;
    public static final int GL_ARB_draw_elements_base_vertex = (int)1;
    public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = (int)0x87CA;
    public static final int GL_RASTER_POSITION_UNCLIPPED_IBM = (int)103010;
    public static final int GL_PHONG_WIN = (int)0x80EA;
    public static final int GL_ARRAY_OBJECT_OFFSET_ATI = (int)0x8767;
    public static final int GL_ATI_draw_buffers = (int)1;
    public static final int GL_COMPUTE_TEXTURE = (int)0x82A0;
    public static final int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = (int)0x8DA5;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = (int)0x8217;
    public static final int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = (int)0x8B8A;
    public static final int GL_DOUBLE_VEC4_EXT = (int)0x8FFE;
    public static final int GL_FLOAT_VEC2_ARB = (int)0x8B50;
    public static final int GL_MESA_pack_invert = (int)1;
    public static final int GL_NUM_FRAGMENT_REGISTERS_ATI = (int)0x896E;
    public static final int GL_FLOAT_R16_NV = (int)0x8884;
    public static final int GL_DRAW_FRAMEBUFFER_BINDING_EXT = (int)0x8CA6;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = (int)0x8CD3;
    public static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = (int)0x87F8;
    public static final int GL_ALIASED_LINE_WIDTH_RANGE = (int)0x846E;
    public static final int GL_CURRENT_QUERY = (int)0x8865;
    public static final int GL_DRAW_BUFFER8_ATI = (int)0x882D;
    public static final int GL_VERTEX_ATTRIB_BINDING = (int)0x82D4;
    public static final int GL_TEXTURE24_ARB = (int)0x84D8;
    public static final int GL_EXT_texture_env_combine = (int)1;
    public static final int GL_MINMAX = (int)0x802E;
    public static final int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = (int)0x8DA3;
    public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = (int)0x889C;
    public static final int GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = (int)0x8DBE;
    public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = (int)0x9313;
    public static final int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = (int)0x9039;
    public static final int GL_PRIMARY_COLOR_NV = (int)0x852C;
    public static final int GL_MODELVIEW2_ARB = (int)0x8722;
    public static final int GL_NUM_VIDEO_CAPTURE_STREAMS_NV = (int)0x9024;
    public static final int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = (int)0x88F4;
    public static final int GL_CULL_VERTEX_IBM = (int)103050;
    public static final int GL_DRAW_BUFFER8_ARB = (int)0x882D;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = (int)0x8C8A;
    public static final int GL_OVERLAY_NV = (int)0x9296;
    public static final int GL_COMPARE_R_TO_TEXTURE_ARB = (int)0x884E;
    public static final int GL_SAMPLE_MASK_INVERT_SGIS = (int)0x80AB;
    public static final int GL_SGIS_sharpen_texture = (int)1;
    public static final int GL_GEOMETRY_INPUT_TYPE_ARB = (int)0x8DDB;
    public static final int GL_DEPTH_CLAMP_NEAR_AMD = (int)0x901E;
    public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = (int)0x8DDF;
    public static final int GL_VERTEX_ARRAY_BINDING_APPLE = (int)0x85B5;
    public static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = (int)0x85B0;
    public static final int GL_BOOL = (int)0x8B56;
    public static final int GL_DOUBLE_MAT4x2 = (int)0x8F4D;
    public static final int GL_DOUBLE_MAT4x3 = (int)0x8F4E;
    public static final int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = (int)0x91A7;
    public static final int GL_BLUE_BIT_ATI = (int)0x00000004;
    public static final int GL_MAGNITUDE_SCALE_NV = (int)0x8712;
    public static final int GL_REPLICATE_BORDER = (int)0x8153;
    public static final int GL_LAYOUT_LINEAR_INTEL = (int)1;
    public static final int GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = (int)0x84E3;
    public static final int GL_UNSIGNED_SHORT_8_8_REV_MESA = (int)0x85BB;
    public static final int GL_TEXTURE_COMPARE_MODE_ARB = (int)0x884C;
    public static final int GL_BUFFER_DATA_SIZE = (int)0x9303;
    public static final int GL_INT_SAMPLER_2D_ARRAY = (int)0x8DCF;
    public static final int GL_VERTEX_ARRAY_COUNT_EXT = (int)0x807D;
    public static final int GL_ELEMENT_ARRAY_POINTER_ATI = (int)0x876A;
    public static final int GL_VERTEX_BLEND_ARB = (int)0x86A7;
    public static final long GL_ALL_BARRIER_BITS_EXT = (long)0xFFFFFFFFL;
    public static final int GL_PATH_FILL_COVER_MODE_NV = (int)0x9082;
    public static final int GL_RGB10_A2_EXT = (int)0x8059;
    public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = (int)0x8263;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARB = (int)0x8514;
    public static final int GL_REPLACE_EXT = (int)0x8062;
    public static final int GL_QUERY_OBJECT_AMD = (int)0x9153;
    public static final int GL_WEIGHT_ARRAY_TYPE_ARB = (int)0x86A9;
    public static final int GL_MAX_VIEWPORTS = (int)0x825B;
    public static final int GL_MAX_ELEMENTS_INDICES = (int)0x80E9;
    public static final int GL_IS_PER_PATCH = (int)0x92E7;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = (int)0x8C85;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR = (int)0x93B8;
    public static final int GL_IMAGE_2D_MULTISAMPLE = (int)0x9055;
    public static final int GL_LINEAR_ATTENUATION = (int)0x1208;
    public static final int GL_EXT_polygon_offset = (int)1;
    public static final int GL_PROJECTION = (int)0x1701;
    public static final int GL_SAMPLER_CUBE_SHADOW_EXT = (int)0x8DC5;
    public static final int GL_EXT_stencil_two_side = (int)1;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = (int)0x8C8A;
    public static final int GL_INT_2_10_10_10_REV = (int)0x8D9F;
    public static final int GL_CONVOLUTION_1D_EXT = (int)0x8010;
    public static final int GL_COLOR_TABLE_WIDTH_EXT = (int)0x80D9;
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = (int)0x8624;
    public static final int GL_SGIS_texture_edge_clamp = (int)1;
    public static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = (int)0x8806;
    public static final int GL_POINT_TOKEN = (int)0x0701;
    public static final int GL_HINT_BIT = (int)0x00008000;
    public static final int GL_REFERENCED_BY_GEOMETRY_SHADER = (int)0x9309;
    public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = (int)0x889A;
    public static final int GL_ALPHA_SCALE = (int)0x0D1C;
    public static final int GL_R11F_G11F_B10F_EXT = (int)0x8C3A;
    public static final int GL_LUMINANCE_ALPHA_FLOAT16_ATI = (int)0x881F;
    public static final int GL_CACHE_REGAL = (int)0x9362;
    public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = (int)0x8623;
    public static final int GL_MISSING_REGAL = (int)0x9360;
    public static final int GL_ARB_shader_draw_parameters = (int)1;
    public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = (int)0x90EF;
    public static final int GL_VARIANT_DATATYPE_EXT = (int)0x87E5;
    public static final int MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = (int)0x8B4C;
    public static final int GL_MAJOR_VERSION = (int)0x821B;
    public static final int GL_INDEX_LOGIC_OP = (int)0x0BF1;
    public static final int GL_MIN_ALPHA_SGIS = (int)0x85AC;
    public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = (int)0x8C4F;
    public static final int GL_DRAW_BUFFER0_ARB = (int)0x8825;
    public static final int GL_VERTEX_ARRAY_TYPE_EXT = (int)0x807B;
    public static final int GL_MODULATE_SUBTRACT_ATI = (int)0x8746;
    public static final int GL_EIGHTH_BIT_ATI = (int)0x00000020;
    public static final int GL_TESS_EVALUATION_SHADER = (int)0x8E87;
    public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = (int)0x8243;
    public static final int GL_ADD_SIGNED = (int)0x8574;
    public static final int GL_PALETTE4_RGBA8_OES = (int)0x8B91;
    public static final int GL_OBJECT_DISTANCE_TO_POINT_SGIS = (int)0x81F1;
    public static final int GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = (int)0x80;
    public static final int GL_TYPE = (int)0x92FA;
    public static final int GL_RGB4_EXT = (int)0x804F;
    public static final int GL_NV_fence = (int)1;
    public static final int GL_ARB_copy_image = (int)1;
    public static final int GL_REPLACE = (int)0x1E01;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = (int)0x8C8A;
    public static final int GL_NUM_GENERAL_COMBINERS_NV = (int)0x854E;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = (int)0x8E70;
    public static final int GL_POST_CONVOLUTION_COLOR_TABLE_SGI = (int)0x80D1;
    public static final int GL_INT_SAMPLER_BUFFER_EXT = (int)0x8DD0;
    public static final int GL_DU8DV8_ATI = (int)0x877A;
    public static final int GL_APPLE_float_pixels = (int)1;
    public static final int GL_CURRENT_TEXTURE_COORDS = (int)0x0B03;
    public static final int GL_STENCIL_INDEX16 = (int)0x8D49;
    public static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = (int)0x88A3;
    public static final int GL_ALPHA12_EXT = (int)0x803D;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = (int)0x8A44;
    public static final int GL_DRAW_BUFFER0_ATI = (int)0x8825;
    public static final int GL_SAMPLE_MASK = (int)0x8E51;
    public static final int GL_OFFSET_TEXTURE_MATRIX_NV = (int)0x86E1;
    public static final int GL_STENCIL_BACK_FUNC_ATI = (int)0x8800;
    public static final int GL_LIGHT_MODEL_COLOR_CONTROL = (int)0x81F8;
    public static final int GL_MATRIX2_NV = (int)0x8632;
    public static final int GL_CURRENT_BINORMAL_EXT = (int)0x843C;
    public static final int GL_EYE_LINE_SGIS = (int)0x81F6;
    public static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = (int)0x88B1;
    public static final int GL_SAMPLE_MASK_SGIS = (int)0x80A0;
    public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = (int)0x9125;
    public static final int GL_HISTOGRAM_ALPHA_SIZE = (int)0x802B;
    public static final int GL_OPERAND3_RGB_NV = (int)0x8593;
    public static final int GL_EXT_vertex_weighting = (int)1;
    public static final int GL_PROGRAM_ERROR_POSITION_ARB = (int)0x864B;
    public static final int GL_SAMPLE_COVERAGE = (int)0x80A0;
    public static final int GL_SGIS_texture_border_clamp = (int)1;
    public static final int GL_BUFFER_IMMUTABLE_STORAGE = (int)0x821F;
    public static final int GL_TEXTURE_HEIGHT = (int)0x1001;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = (int)0x8C84;
    public static final int GL_TEXTURE_LIGHT_EXT = (int)0x8350;
    public static final int GL_NV_vertex_program1_1 = (int)1;
    public static final int GL_DRAW_BUFFER12_ARB = (int)0x8831;
    public static final int GL_FEEDBACK_BUFFER_TYPE = (int)0x0DF2;
    public static final int GL_SWIZZLE_STQ_ATI = (int)0x8977;
    public static final int GL_RGBA_SIGNED_SGIX = (int)0x85E1;
    public static final int GL_COLOR_ARRAY_STRIDE_EXT = (int)0x8083;
    public static final int GL_PALETTE8_RGBA8_OES = (int)0x8B96;
    public static final int GL_PROGRAM_INPUT = (int)0x92E3;
    public static final int GL_PROGRAM_POINT_SIZE_ARB = (int)0x8642;
    public static final int GL_FRONT_LEFT = (int)0x0400;
    public static final int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = (int)0x864E;
    public static final int GL_TESS_EVALUATION_PROGRAM_NV = (int)0x891F;
    public static final int GL_MATRIX_EXT = (int)0x87C0;
    public static final int GL_NV_copy_depth_to_color = (int)1;
    public static final int GL_PACK_SKIP_IMAGES = (int)0x806B;
    public static final int GL_SAMPLE_BUFFERS_SGIS = (int)0x80A8;
    public static final int GL_DRAW_BUFFER12_ATI = (int)0x8831;
    public static final int GL_INTENSITY16F_ARB = (int)0x881D;
    public static final int GL_NOR = (int)0x1508;
    public static final int GL_OPERAND1_RGB_EXT = (int)0x8591;
    public static final int GL_QUERY_BY_REGION_WAIT_NV = (int)0x8E15;
    public static final int GL_LUMINANCE12_EXT = (int)0x8041;
    public static final int GL_TEXTURE20_ARB = (int)0x84D4;
    public static final int GL_MEDIUM_FLOAT = (int)0x8DF1;
    public static final int GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = (int)0x08;
    public static final int GL_SHADING_LANGUAGE_VERSION_ARB = (int)0x8B8C;
    public static final int GL_MAP2_VERTEX_ATTRIB1_4_NV = (int)0x8671;
    public static final int GL_COMP_BIT_ATI = (int)0x00000002;
    public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES = (int)0x8DE0;
    public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = (int)0x889B;
    public static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = (int)0x8F25;
    public static final int GL_INTERNALFORMAT_SHARED_SIZE = (int)0x8277;
    public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = (int)0x91BC;
    public static final int GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = (int)103085;
    public static final int GL_NV_gpu_program5_mem_extended = (int)1;
    public static final int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = (int)0x9026;
    public static final int GL_COLOR_ENCODING = (int)0x8296;
    public static final int GL_DEBUG_LOGGED_MESSAGES_AMD = (int)0x9145;
    public static final int GL_BUMP_ROT_MATRIX_ATI = (int)0x8775;
    public static final int GL_TEXTURE_ENV = (int)0x2300;
    public static final int GL_MAP2_VERTEX_ATTRIB12_4_NV = (int)0x867C;
    public static final long GL_CLIENT_ALL_ATTRIB_BITS = (long)0xffffffffL;
    public static final int GL_EXT_texture_filter_anisotropic = (int)1;
    public static final int GL_DEPTH_STENCIL_NV = (int)0x84F9;
    public static final int GL_FIELDS_NV = (int)0x8E27;
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = (int)0x88FE;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = (int)0x82AC;
    public static final int GL_NORMAL_ARRAY_POINTER_EXT = (int)0x808F;
    public static final int GL_TEXTURE_3D_EXT = (int)0x806F;
    public static final int GL_SIGNED_RGBA8_NV = (int)0x86FC;
    public static final int GL_AMD_shader_stencil_export = (int)1;
    public static final int GL_LAYER_PROVOKING_VERTEX = (int)0x825E;
    public static final int GL_STENCIL_INDEX1_EXT = (int)0x8D46;
    public static final int GL_OFFSET_TEXTURE_RECTANGLE_NV = (int)0x864C;
    public static final int GL_ONE = (int)1;
    public static final int GL_SAMPLES = (int)0x80A9;
    public static final int GL_RENDERBUFFER = (int)0x8D41;
    public static final int GL_SAMPLER = (int)0x82E6;
    public static final int GL_PROXY_TEXTURE_CUBE_MAP = (int)0x851B;
    public static final int GL_WIN_swap_hint = (int)1;
    public static final int GL_COPY_READ_BUFFER = (int)0x8F36;
    public static final int GL_FRAGMENT_PROGRAM_NV = (int)0x8870;
    public static final int GL_CONVOLUTION_FORMAT_EXT = (int)0x8017;
    public static final int GL_DEPTH_ATTACHMENT = (int)0x8D00;
    public static final int GL_TRANSFORM_FEEDBACK_BINDING = (int)0x8E25;
    public static final int GL_EXT_blend_minmax = (int)1;
    public static final int GL_ARB_seamless_cube_map = (int)1;
    public static final int GL_NONE = (int)0;
    public static final int GL_DISJOINT_NV = (int)0x9283;
    public static final int GL_OP_DOT3_EXT = (int)0x8784;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = (int)0x851A;
    public static final int GL_IBM_rasterpos_clip = (int)1;
    public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = (int)0x889D;
    public static final int GL_INVERT = (int)0x150A;
    public static final int GL_TEXTURE_MAX_CLAMP_R_SGIX = (int)0x836B;
    public static final int GL_NOOP = (int)0x1505;
    public static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = (int)0x88B5;
    public static final int GL_EXT_texture_snorm = (int)1;
    public static final int GL_TEXTURE_RESIDENT = (int)0x8067;
    public static final int GL_VERTEX_SHADER_VARIANTS_EXT = (int)0x87D0;
    public static final int GL_ATI_pn_triangles = (int)1;
    public static final int GL_RED_SCALE = (int)0x0D14;
    public static final int GL_QUERY_COUNTER_BITS_ARB = (int)0x8864;
    public static final int GL_FRAGMENT_PROGRAM_BINDING_NV = (int)0x8873;
    public static final int GL_IMAGE_2D_MULTISAMPLE_EXT = (int)0x9055;
    public static final int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = (int)0x903A;
    public static final int GL_ARB_copy_buffer = (int)1;
    public static final int GL_RED_SNORM = (int)0x8F90;
    public static final int GL_TEXTURE_BUFFER_FORMAT = (int)0x8C2E;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = (int)0x93D5;
    public static final int GL_SCALED_RESOLVE_FASTEST_EXT = (int)0x90BA;
    public static final int GL_REFLECTION_MAP_EXT = (int)0x8512;
    public static final int GL_MAX_IMAGE_UNITS_EXT = (int)0x8F38;
    public static final int GL_QUERY_NO_WAIT = (int)0x8E14;
    public static final int GL_TEXTURE_STENCIL_SIZE = (int)0x88F1;
    public static final int GL_POINT_SIZE_MAX = (int)0x8127;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = (int)0x934B;
    public static final int GL_EXT_timer_query = (int)1;
    public static final int GL_SRC_ALPHA = (int)0x0302;
    public static final int GL_PROXY_TEXTURE_3D_EXT = (int)0x8070;
    public static final int GL_PROGRAM_STRING_NV = (int)0x8628;
    public static final int GL_COLOR_MATRIX = (int)0x80B1;
    public static final int GL_POINT_SIZE_GRANULARITY = (int)0x0B13;
    public static final int GL_MATRIX4_NV = (int)0x8634;
    public static final int GL_COLOR_TABLE_ALPHA_SIZE_EXT = (int)0x80DD;
    public static final int GL_FLOAT16_NV = (int)0x8FF8;
    public static final int GL_CUBIC_EXT = (int)0x8334;
    public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = (int)0x00000800;
    public static final int GL_SGIX_list_priority = (int)1;
    public static final int GL_IBM_vertex_array_lists = (int)1;
    public static final int GL_POINT_SIZE_MIN = (int)0x8126;
    public static final int GL_POLYGON_SMOOTH = (int)0x0B41;
    public static final int GL_FOG_INDEX = (int)0x0B61;
    public static final int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = (int)0x8CA6;
    public static final int GL_CURRENT_TIME_NV = (int)0x8E28;
    public static final int GL_SAMPLER_3D_ARB = (int)0x8B5F;
    public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = (int)0x8C29;
    public static final int GL_ARB_robustness_share_group_isolation = (int)1;
    public static final int GL_BUFFER_GPU_ADDRESS_NV = (int)0x8F1D;
    public static final int GL_UNSIGNED_INT_IMAGE_3D_EXT = (int)0x9064;
    public static final int GL_ARB_robust_buffer_access_behavior = (int)1;
    public static final int GL_UNSIGNED_INT16_VEC3_NV = (int)0x8FF2;
    public static final int GL_DEBUG_CATEGORY_OTHER_AMD = (int)0x9150;
    public static final int GL_MAX_VERTEX_UNIFORM_VECTORS = (int)0x8DFB;
    public static final int GL_COLOR_TABLE_RED_SIZE_EXT = (int)0x80DA;
    public static final int GL_NV_tessellation_program5 = (int)1;
    public static final int GL_INTENSITY32I_EXT = (int)0x8D85;
    public static final int GL_STREAM_DRAW_ARB = (int)0x88E0;
    public static final int GL_LUMINANCE32F_ARB = (int)0x8818;
    public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = (int)0x8645;
    public static final int GL_AMD_conservative_depth = (int)1;
    public static final int GL_MAX_DEPTH = (int)0x8280;
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW_EXT = (int)0x8DC4;
    public static final int GL_DRIVER_REGAL = (int)0x9326;
    public static final int GL_UNIFORM_BLOCK = (int)0x92E2;
    public static final int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = (int)0x885A;
    public static final int GL_OP_RECIP_EXT = (int)0x8794;
    public static final int GL_IMAGE_BINDING_NAME = (int)0x8F3A;
    public static final int GL_VERTEX_SHADER_ARB = (int)0x8B31;
    public static final int GL_STENCIL_INDEX8_EXT = (int)0x8D48;
    public static final int GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = (int)0x8C74;
    public static final int GL_UNSIGNED_INT64_VEC2_NV = (int)0x8FF5;
    public static final int GL_SAMPLE_SHADING_ARB = (int)0x8C36;
    public static final int GL_TEXTURE_1D_STACK_BINDING_MESAX = (int)0x875D;
    public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = (int)0x90CA;
    public static final int GL_SAMPLER_BUFFER = (int)0x8DC2;
    public static final int GL_LUMINANCE8_EXT = (int)0x8040;
    public static final int GL_ALPHA16_SNORM = (int)0x9018;
    public static final int GL_COLOR_SUM_CLAMP_NV = (int)0x854F;
    public static final int GL_AMBIENT = (int)0x1200;
    public static final int GL_ARC_TO_NV = (int)0xFE;
    public static final int GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = (int)0x11;
    public static final int GL_SMOOTH_CUBIC_CURVE_TO_NV = (int)0x10;
    public static final int GL_DEBUG_LOGGED_MESSAGES_ARB = (int)0x9145;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = (int)0x9065;
    public static final int GL_MATRIX21_ARB = (int)0x88D5;
    public static final int GL_EVAL_VERTEX_ATTRIB7_NV = (int)0x86CD;
    public static final int GL_SAMPLER_2D_ARRAY = (int)0x8DC1;
    public static final int GL_VERTEX_SHADER_OPTIMIZED_EXT = (int)0x87D4;
    public static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV = (int)0x86C5;
    public static final int GL_RESAMPLE_REPLICATE_SGIX = (int)0x8433;
    public static final int GL_SKIP_MISSING_GLYPH_NV = (int)0x90A9;
    public static final int GL_NV_fragment_program_option = (int)1;
    public static final int GL_SAMPLER_CUBE = (int)0x8B60;
    public static final int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = (int)0x8541;
    public static final int GL_CONVOLUTION_HEIGHT_EXT = (int)0x8019;
    public static final int GL_CONSTANT_COLOR0_NV = (int)0x852A;
    public static final int GL_MATRIX14_ARB = (int)0x88CE;
    public static final int GL_INTERNALFORMAT_BLUE_TYPE = (int)0x827A;
    public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = (int)0x86A0;
    public static final int GL_TEXTURE15_ARB = (int)0x84CF;
    public static final int GL_FENCE_APPLE = (int)0x8A0B;
    public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = (int)0x88EF;
    public static final int GL_PACK_CMYK_HINT_EXT = (int)0x800E;
    public static final int GL_POINT_FADE_THRESHOLD_SIZE_EXT = (int)0x8128;
    public static final int GL_INTERNALFORMAT_DEPTH_SIZE = (int)0x8275;
    public static final int GL_INVARIANT_DATATYPE_EXT = (int)0x87EB;
    public static final int GL_HARDLIGHT_NV = (int)0x929B;
    public static final int GL_IMAGE_BINDING_LAYERED_EXT = (int)0x8F3C;
    public static final int GL_SPARE1_NV = (int)0x852F;
    public static final int GL_HISTOGRAM_SINK = (int)0x802D;
    public static final int GL_LINES_ADJACENCY_ARB = (int)0xA;
    public static final int GL_DEPTH_TEST = (int)0x0B71;
    public static final int GL_RGB8UI = (int)0x8D7D;
    public static final int GL_MODELVIEW18_ARB = (int)0x8732;
    public static final int GL_UNSIGNED_INT_10_10_10_2 = (int)0x8036;
    public static final int GL_COMBINE_RGB = (int)0x8571;
    public static final int GL_DOUBLE_MAT3x2 = (int)0x8F4B;
    public static final int GL_DOUBLE_MAT3x4 = (int)0x8F4C;
    public static final int GL_OES_byte_coordinates = (int)1;
    public static final int GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = (int)0x00000001;
    public static final int GL_DEPTH_STENCIL_TO_RGBA_NV = (int)0x886E;
    public static final int GL_PGI_misc_hints = (int)1;
    public static final int GL_TEXTURE_3D = (int)0x806F;
    public static final int GL_COMMAND_BARRIER_BIT_EXT = (int)0x00000040;
    public static final int GL_REGAL_log = (int)1;
    public static final int GL_COMPRESSED_RGB_ARB = (int)0x84ED;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = (int)0x93D8;
    public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = (int)0x9143;
    public static final int GL_SHADE_MODEL = (int)0x0B54;
    public static final int GL_PALETTE4_RGB5_A1_OES = (int)0x8B94;
    public static final int GL_FACTOR_MIN_AMD = (int)0x901C;
    public static final int GL_ATI_shader_texture_lod = (int)1;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = (int)0x8C8B;
    public static final int GL_PROGRAM_LENGTH_NV = (int)0x8627;
    public static final int GL_OML_subsample = (int)1;
    public static final int GL_NORMAL_ARRAY_BUFFER_BINDING = (int)0x8897;
    public static final int GL_MAP1_INDEX = (int)0x0D91;
    public static final int GL_MAP1_GRID_SEGMENTS = (int)0x0DD1;
    public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = (int)0x900F;
    public static final int GL_TEXTURE_2D = (int)0x0DE1;
    public static final int GL_CMYK_EXT = (int)0x800C;
    public static final int GL_ARB_window_pos = (int)1;
    public static final int GL_BLEND_COLOR_EXT = (int)0x8005;
    public static final int GL_SGIS_fog_function = (int)1;
    public static final int GL_TEXCOORD1_BIT_PGI = (int)0x10000000;
    public static final int GL_POINT_DISTANCE_ATTENUATION = (int)0x8129;
    public static final int GL_POINT = (int)0x1B00;
    public static final int GL_ARB_invalidate_subdata = (int)1;
    public static final int GL_VENDOR = (int)0x1F00;
    public static final int GL_TEXTURE_1D = (int)0x0DE0;
    public static final int GL_MAP2_GRID_DOMAIN = (int)0x0DD2;
    public static final int GL_SHADER_IMAGE_ATOMIC = (int)0x82A6;
    public static final int GL_FRAMEBUFFER_RENDERABLE_LAYERED = (int)0x828A;
    public static final int GL_CLEAR_TEXTURE = (int)0x9365;
    public static final int GL_YCBCR_422_APPLE = (int)0x85B9;
    public static final int GL_NORMALIZED_RANGE_EXT = (int)0x87E0;
    public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = (int)0x9143;
    public static final int GL_DARKEN_NV = (int)0x9297;
    public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = (int)0x91BE;
    public static final int GL_STENCIL_INDEX16_EXT = (int)0x8D49;
    public static final int GL_ITALIC_BIT_NV = (int)0x02;
    public static final int GL_MESA_ycbcr_texture = (int)1;
    public static final int GL_IBM_cull_vertex = (int)1;
    public static final int GL_MODELVIEW27_ARB = (int)0x873B;
    public static final int GL_RENDERER = (int)0x1F01;
    public static final int GL_PATH_FILL_MODE_NV = (int)0x9080;
    public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = (int)0x8E49;
    public static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = (int)0x851F;
    public static final int GL_ANY_SAMPLES_PASSED = (int)0x8C2F;
    public static final int GL_INT8_VEC4_NV = (int)0x8FE3;
    public static final int GL_TANGENT_ARRAY_STRIDE_EXT = (int)0x843F;
    public static final int GL_NORMAL_BIT_PGI = (int)0x08000000;
    public static final int GL_SAMPLER_2D_ARRAY_SHADOW = (int)0x8DC4;
    public static final int GL_MULTIPLY_NV = (int)0x9294;
    public static final int GL_UNSIGNED_INT_24_8_NV = (int)0x84FA;
    public static final int GL_FOG_COORDINATE_SOURCE_EXT = (int)0x8450;
    public static final int GL_ARB_texture_buffer_range = (int)1;
    public static final int GL_MAP1_COLOR_4 = (int)0x0D90;
    public static final int GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = (int)0x80DE;
    public static final int GL_UNIFORM_BUFFER_START = (int)0x8A29;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = (int)0x8CD7;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = (int)0x8CDB;
    public static final int GL_ARB_texture_mirrored_repeat = (int)1;
    public static final int GL_TEXTURE_OUTPUT_ALPHA_ATIX = (int)0x8749;
    public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = (int)0x8A2D;
    public static final int GL_VERTEX_PROGRAM_POINT_SIZE_NV = (int)0x8642;
    public static final int GL_COLOR_COMPONENTS = (int)0x8283;
    public static final int GL_SWIZZLE_STR_DR_ATI = (int)0x8978;
    public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR = (int)0x93BB;
    public static final int GL_MINMAX_FORMAT = (int)0x802F;
    public static final int GL_COLOR_INDEXES = (int)0x1603;
    public static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = (int)0x87F5;
    public static final int GL_SGIS_detail_texture = (int)1;
    public static final int GL_SGIS_texture_lod = (int)1;
    public static final int GL_CLAMP_VERTEX_COLOR = (int)0x891A;
    public static final int GL_STREAM_COPY = (int)0x88E2;
    public static final int GL_OPERAND2_RGB_ARB = (int)0x8592;
    public static final int GL_INTENSITY4 = (int)0x804A;
    public static final int GL_INTENSITY8 = (int)0x804B;
    public static final int GL_STENCIL = (int)0x1802;
    public static final int GL_VERTEX_SHADER_INVARIANTS_EXT = (int)0x87D1;
    public static final int GL_EXT_texture_edge_clamp = (int)1;
    public static final int GL_STENCIL_RENDERABLE = (int)0x8288;
    public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = (int)0x8517;
    public static final int GL_COLOR_TABLE_GREEN_SIZE_EXT = (int)0x80DB;
    public static final int GL_MODELVIEW29_ARB = (int)0x873D;
    public static final int GL_SUBTRACT = (int)0x84E7;
    public static final int GL_LUMINANCE_ALPHA32UI_EXT = (int)0x8D75;
    public static final int GL_ANGLE_pack_reverse_row_order = (int)1;
    public static final int GL_DISPLAY_LIST = (int)0x82E7;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_NV = (int)0x8C8E;
    public static final int GL_FRAGMENT_LIGHT0_EXT = (int)0x840C;
    public static final int GL_ARB_robustness = (int)1;
    public static final int GL_ARB_sync = (int)1;
    public static final int GL_READ_FRAMEBUFFER_BINDING_EXT = (int)0x8CAA;
    public static final int GL_KTX_STENCIL_REGION = (int)0x3;
    public static final int GL_RESET_NOTIFICATION_STRATEGY_ARB = (int)0x8256;
    public static final int GL_ARB_texture_query_lod = (int)1;
    public static final int GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = (int)0x83F8;
    public static final int GL_VIEW_CLASS_S3TC_DXT1_RGBA = (int)0x82CD;
    public static final int GL_IMAGE_1D_ARRAY_EXT = (int)0x9052;
    public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = (int)0x90DD;
    public static final int GL_OUTPUT_TEXTURE_COORD14_EXT = (int)0x87AB;
    public static final int GL_PATH_TERMINAL_END_CAP_NV = (int)0x9078;
    public static final int GL_ALWAYS_FAST_HINT_PGI = (int)107020;
    public static final int GL_ARB_vertex_program = (int)1;
    public static final int GL_R32F = (int)0x822E;
    public static final int GL_SECONDARY_COLOR_ARRAY_SIZE = (int)0x845A;
    public static final int GL_TRANSPOSE_COLOR_MATRIX_ARB = (int)0x84E6;
    public static final int GL_COMPUTE_SUBROUTINE = (int)0x92ED;
    public static final int GL_POINT_SIZE_MAX_ARB = (int)0x8127;
    public static final int GL_UNSIGNED_SHORT_4_4_4_4 = (int)0x8033;
    public static final int GL_RESTART_SUN = (int)0x01;
    public static final int GL_R32I = (int)0x8235;
    public static final int GL_RGBA_FLOAT_MODE_ARB = (int)0x8820;
    public static final int GL_ACTIVE_VARYING_MAX_LENGTH_NV = (int)0x8C82;
    public static final int GL_NV_shader_atomic_float = (int)1;
    public static final int GL_EXT_texture_cube_map = (int)1;
    public static final int GL_ASYNC_TEX_IMAGE_SGIX = (int)0x835C;
    public static final int GL_GREMEDY_frame_terminator = (int)1;
    public static final int GL_PIXEL_TRANSFORM_2D_EXT = (int)0x8330;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = (int)0x93D3;
    public static final int GL_SPOT_DIRECTION = (int)0x1204;
    public static final int GL_MODELVIEW9_ARB = (int)0x8729;
    public static final int GL_VERTEX_ATTRIB_ARRAY9_NV = (int)0x8659;
    public static final int GL_VIEWPORT_BIT = (int)0x00000800;
    public static final int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = (int)0x0506;
    public static final int GL_STATIC_COPY = (int)0x88E6;
    public static final int GL_MAD_ATI = (int)0x8968;
    public static final int GL_VERTEX_SUBROUTINE_UNIFORM = (int)0x92EE;
    public static final int GL_FULL_STIPPLE_HINT_PGI = (int)107033;
    public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = (int)0x8853;
    public static final int GL_TESS_CONTROL_TEXTURE = (int)0x829C;
    public static final int GL_VERTEX_ARRAY_EXT = (int)0x8074;
    public static final int GL_FOG_COORDINATE_ARRAY_LIST_IBM = (int)103076;
    public static final int GL_TEXTURE25_ARB = (int)0x84D9;
    public static final int GL_LOWER_LEFT = (int)0x8CA1;
    public static final int GL_IMAGE_2D_ARRAY_EXT = (int)0x9053;
    public static final int GL_SUN_global_alpha = (int)1;
    public static final int GL_LUMINANCE8I_EXT = (int)0x8D92;
    public static final int GL_DEBUG_TYPE_PORTABILITY_ARB = (int)0x824F;
    public static final int GL_UNSIGNED_INT64_ARB = (int)0x140F;
    public static final int GL_DONT_CARE = (int)0x1100;
    public static final int GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = (int)0x90FC;
    public static final int GL_SAMPLE_MASK_NV = (int)0x8E51;
    public static final int GL_DEPTH_CLEAR_VALUE = (int)0x0B73;
    public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = (int)0x88FE;
    public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE = (int)0x8B9A;
    public static final int GL_POSITION = (int)0x1203;
    public static final int GL_CLAMP_TO_EDGE = (int)0x812F;
    public static final int GL_MAX_EXT = (int)0x8008;
    public static final int GL_DEPTH_FUNC = (int)0x0B74;
    public static final int GL_RGB8UI_EXT = (int)0x8D7D;
    public static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT = (int)0x81AC;
    public static final int GL_LOW_FLOAT = (int)0x8DF0;
    public static final int GL_DOT3_RGBA = (int)0x86AF;
    public static final int GL_CURRENT_FOG_COORD = (int)0x8453;
    public static final int GL_PASS_THROUGH_NV = (int)0x86E6;
    public static final int GL_SAMPLER_1D_ARRAY_SHADOW = (int)0x8DC3;
    public static final int GL_BACK_SECONDARY_COLOR_NV = (int)0x8C78;
    public static final int GL_UNSIGNED_BYTE_3_3_2 = (int)0x8032;
    public static final int GL_GPU_ADDRESS_NV = (int)0x8F34;
    public static final int GL_TEXTURE_POINT_ONE_COORD_ATIX = (int)0x60B1;
    public static final int GL_EXT_texture_compression_s3tc = (int)1;
    public static final int GL_CONTEXT_FLAG_DEBUG_BIT = (int)0x00000002;
    public static final int GL_ZOOM_X = (int)0x0D16;
    public static final int GL_ZOOM_Y = (int)0x0D17;
    public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = (int)0x8516;
    public static final int GL_POLYGON_OFFSET_FILL = (int)0x8037;
    public static final int GL_UNIFORM_ARRAY_STRIDE = (int)0x8A3C;
    public static final int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = (int)0x8898;
    public static final int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = (int)0x8C73;
    public static final int GL_UNSIGNED_INT_IMAGE_3D = (int)0x9064;
    public static final int GL_NUM_SHADER_BINARY_FORMATS = (int)0x8DF9;
    public static final int GL_RGB16UI_EXT = (int)0x8D77;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_EXT = (int)0x8DD2;
    public static final int GL_MAX_TEXTURE_IMAGE_UNITS_NV = (int)0x8872;
    public static final int GL_SGIX_texture_lod_bias = (int)1;
    public static final int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = (int)0x9033;
    public static final int GL_NORMAL_ARRAY_LIST_STRIDE_IBM = (int)103081;
    public static final int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = (int)0x8D44;
    public static final int GL_CONVOLUTION_WIDTH = (int)0x8018;
    public static final int GL_TEXTURE_SRGB_DECODE_EXT = (int)0x8A48;
    public static final int GL_VERTEX_SHADER_BIT = (int)0x00000001;
    public static final int GL_MODELVIEW = (int)0x1700;
    public static final int GL_TEXTURE_COMPONENTS = (int)0x1003;
    public static final int GL_SMOOTH_POINT_SIZE_RANGE = (int)0x0B12;
    public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = (int)0x8E5C;
    public static final int GL_FENCE_STATUS_NV = (int)0x84F3;
    public static final int GL_DRAW_INDIRECT_BUFFER_BINDING = (int)0x8F43;
    public static final int GL_KTX_BACK_REGION = (int)0x1;
    public static final int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = (int)0x8DA4;
    public static final int GL_OFFSET_TEXTURE_2D_MATRIX_NV = (int)0x86E1;
    public static final int GL_SOURCE1_RGB_ARB = (int)0x8581;
    public static final int GL_VARIABLE_C_NV = (int)0x8525;
    public static final int GL_CULL_FRAGMENT_NV = (int)0x86E7;
    public static final int GL_PALETTE8_RGB5_A1_OES = (int)0x8B99;
    public static final int GL_DECODE_EXT = (int)0x8A49;
    public static final int GL_MIN_SAMPLE_SHADING_VALUE = (int)0x8C37;
    public static final int GL_MAP1_BINORMAL_EXT = (int)0x8446;
    public static final int GL_UNSIGNED_INT_IMAGE_1D = (int)0x9062;
    public static final int GL_MAX_PROGRAM_TEMPORARIES_ARB = (int)0x88A5;
    public static final int GL_CON_3_ATI = (int)0x8944;
    public static final int GL_UNIFORM_NAME_LENGTH = (int)0x8A39;
    public static final int GL_MATRIX11_ARB = (int)0x88CB;
    public static final int GL_APPLE_vertex_array_range = (int)1;
    public static final int GL_MAP1_VERTEX_ATTRIB9_4_NV = (int)0x8669;
    public static final int GL_HALF_FLOAT_ARB = (int)0x140B;
    public static final int GL_DOT_PRODUCT_TEXTURE_2D_NV = (int)0x86EE;
    public static final int GL_UNSIGNED_INT_IMAGE_2D = (int)0x9063;
    public static final int GL_ARB_query_buffer_object = (int)1;
    public static final int GL_UNSIGNED_INT64_AMD = (int)0x8BC2;
    public static final int GL_INT64_VEC4_NV = (int)0x8FEB;
    public static final int GL_ARB_draw_buffers = (int)1;
    public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = (int)0x92DC;
    public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = (int)0x910D;
    public static final int GL_ARRAY_OBJECT_BUFFER_ATI = (int)0x8766;
    public static final int GL_OUTPUT_TEXTURE_COORD31_EXT = (int)0x87BC;
    public static final int GL_NV_geometry_shader4 = (int)1;
    public static final int GL_MAX_ELEMENT_INDEX = (int)0x8D6B;
    public static final int GL_PROXY_HISTOGRAM_EXT = (int)0x8025;
    public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = (int)0x906B;
    public static final int GL_VERTEX_ATTRIB_ARRAY2_NV = (int)0x8652;
    public static final int GL_MODELVIEW31_ARB = (int)0x873F;
    public static final int GL_OUTPUT_VERTEX_EXT = (int)0x879A;
    public static final int GL_INT_IMAGE_BUFFER_EXT = (int)0x905C;
    public static final int GL_PIXEL_MAP_A_TO_A_SIZE = (int)0x0CB9;
    public static final int GL_READ_PIXELS_TYPE = (int)0x828E;
    public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = (int)0x8895;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = (int)0x8A45;
    public static final int GL_MINMAX_SINK_EXT = (int)0x8030;
    public static final int GL_ALL_ATTRIB_BITS = (int)0x000fffff;
    public static final int GL_ALPHA4_EXT = (int)0x803B;
    public static final int GL_UNSIGNED_INT_IMAGE_CUBE_EXT = (int)0x9066;
    public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = (int)0x884F;
    public static final int GL_SHADOW_ATTENUATION_EXT = (int)0x834E;
    public static final int GL_DEPTH_COMPONENT32F_NV = (int)0x8DAB;
    public static final int GLEW_NO_ERROR = (int)0;
    public static final int GL_MAX_TEXTURE_BUFFER_SIZE_ARB = (int)0x8C2B;
    public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE = (int)0x8D6A;
    public static final int GL_MATRIX13_ARB = (int)0x88CD;
    public static final int GL_COLOR_ARRAY_SIZE_EXT = (int)0x8081;
    public static final int GL_BITMAP_TOKEN = (int)0x0704;
    public static final int GL_ARB_shader_subroutine = (int)1;
    public static final int GL_PROGRAM_FORMAT_ASCII_ARB = (int)0x8875;
    public static final int GL_MIRROR_CLAMP_EXT = (int)0x8742;
    public static final int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = (int)0x82B2;
    public static final int GL_PROGRAM_MATRIX_EXT = (int)0x8E2D;
    public static final int GL_SAMPLE_BUFFERS = (int)0x80A8;
    public static final int GL_PERSPECTIVE_CORRECTION_HINT = (int)0x0C50;
    public static final int GL_TRIANGLES_ADJACENCY_EXT = (int)0xC;
    public static final int GL_ACCUM_RED_BITS = (int)0x0D58;
    public static final int GL_BUFFER_MAP_POINTER = (int)0x88BD;
    public static final int GL_CLEAR = (int)0x1500;
    public static final int GL_GEOMETRY_SHADER_INVOCATIONS = (int)0x887F;
    public static final int GL_SAMPLER_CUBE_ARB = (int)0x8B60;
    public static final int GL_MAX_SAMPLES_EXT = (int)0x8D57;
    public static final int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = (int)0x8DBA;
    public static final int GLEW_ERROR_GL_VERSION_10_ONLY = (int)2;
    public static final int GL_COMBINE_ALPHA_ARB = (int)0x8572;
    public static final int GL_PIXEL_MIN_FILTER_EXT = (int)0x8332;
    public static final int GL_FONT_HAS_KERNING_BIT_NV = (int)0x10000000;
    public static final int GL_EXT_depth_bounds_test = (int)1;
    public static final int GL_STENCIL_TEST_TWO_SIDE_EXT = (int)0x8910;
    public static final int GL_SOURCE0_RGB = (int)0x8580;
    public static final int GL_FLOAT_RGBA32_NV = (int)0x888B;
    public static final int GL_VERTEX_ATTRIB_ARRAY14_NV = (int)0x865E;
    public static final int GL_MAP1_VERTEX_ATTRIB14_4_NV = (int)0x866E;
    public static final int GL_TEXTURE_WRAP_R_EXT = (int)0x8072;
    public static final int GL_UNIFORM_BARRIER_BIT_EXT = (int)0x00000004;
    public static final int GL_INTENSITY_FLOAT16_ATI = (int)0x881D;
    public static final int GL_READ_WRITE_ARB = (int)0x88BA;
    public static final int GL_FOG_COORDINATE_ARRAY_EXT = (int)0x8457;
    public static final int GL_COLOR_ARRAY_LIST_STRIDE_IBM = (int)103082;
    public static final int GL_DRAW_BUFFER1_ARB = (int)0x8826;
    public static final int GL_REG_4_ATI = (int)0x8925;
    public static final int GL_OP_MULTIPLY_MATRIX_EXT = (int)0x8798;
    public static final int GL_LINEAR = (int)0x2601;
    public static final int GL_CLAMP_TO_EDGE_EXT = (int)0x812F;
    public static final int GL_OUTPUT_TEXTURE_COORD23_EXT = (int)0x87B4;
    public static final int GL_LUMINANCE_SIGNED_SGIX = (int)0x85E3;
    public static final int GL_COLOR_ARRAY_SIZE = (int)0x8081;
    public static final int GL_MAP_UNSYNCHRONIZED_BIT = (int)0x0020;
    public static final int GL_COLOR_SAMPLES_NV = (int)0x8E20;
    public static final int GL_MATRIX1_ARB = (int)0x88C1;
    public static final int GL_SKIP_DECODE_EXT = (int)0x8A4A;
    public static final int GL_LIGHTING_BIT = (int)0x00000040;
    public static final int GL_R1UI_C4UB_V3F_SUN = (int)0x85C5;
    public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = (int)0x8C80;
    public static final int GL_OUTPUT_TEXTURE_COORD28_EXT = (int)0x87B9;
    public static final int GL_COLORBURN_NV = (int)0x929A;
    public static final int GL_VERTEX_ATTRIB_ARRAY0_NV = (int)0x8650;
    public static final int GL_EXT_blend_color = (int)1;
    public static final int GL_SRGB8 = (int)0x8C41;
    public static final int GL_UNPACK_ALIGNMENT = (int)0x0CF5;
    public static final int GL_QUERY_RESULT_AVAILABLE = (int)0x8867;
    public static final int GL_DRAW_BUFFER1_ATI = (int)0x8826;
    public static final int GL_BLEND_EQUATION_ALPHA_EXT = (int)0x883D;
    public static final int GL_TEXTURE_BINDING_1D_ARRAY_EXT = (int)0x8C1C;
    public static final int GL_STEREO = (int)0x0C33;
    public static final int GL_PROGRAM = (int)0x82E2;
    public static final int GL_HISTOGRAM_SINK_EXT = (int)0x802D;
    public static final int GL_UNSIGNED_INT_8_8_8_8_EXT = (int)0x8035;
    public static final int GL_VERTEX_PRECLIP_SGIX = (int)0x83EE;
    public static final long GL_INVALID_INDEX = (long)0xFFFFFFFFL;
    public static final int GL_UNSIGNED_INT_SAMPLER_3D_EXT = (int)0x8DD3;
    public static final int GL_COLOR_INDEX2_EXT = (int)0x80E3;
    public static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = (int)0x85BB;
    public static final int GL_DEPTH24_STENCIL8 = (int)0x88F0;
    public static final int GL_MAX_PROGRAM_LOOP_COUNT_NV = (int)0x88F8;
    public static final int GL_SEPARATE_ATTRIBS = (int)0x8C8D;
    public static final int GL_PACK_REVERSE_ROW_ORDER_ANGLE = (int)0x93A4;
    public static final int GL_DEBUG_SEVERITY_NOTIFICATION = (int)0x826B;
    public static final int GL_DEPENDENT_HILO_TEXTURE_2D_NV = (int)0x8858;
    public static final int GL_ONE_MINUS_SRC_ALPHA = (int)0x0303;
    public static final int GL_MAP_FLUSH_EXPLICIT_BIT = (int)0x0010;
    public static final int GL_OP_MAX_EXT = (int)0x878A;
    public static final int GL_OPERAND2_RGB = (int)0x8592;
    public static final int GL_COLOR_ATTACHMENT4_EXT = (int)0x8CE4;
    public static final int GL_OP_ADD_EXT = (int)0x8787;
    public static final int GL_R3_G3_B2 = (int)0x2A10;
    public static final int GL_INCR = (int)0x1E02;
    public static final int GL_LINE_STIPPLE = (int)0x0B24;
    public static final int GL_BLEND_EQUATION_RGB = (int)0x8009;
    public static final int GL_COLOR_SUM = (int)0x8458;
    public static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = (int)0x9068;
    public static final int GL_STATIC_DRAW_ARB = (int)0x88E4;
    public static final int GL_SRGB_ALPHA = (int)0x8C42;
    public static final int GL_ARB_buffer_storage = (int)1;
    public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = (int)0x9105;
    public static final int GL_PRESERVE_ATI = (int)0x8762;
    public static final int GL_TEXTURE_SWIZZLE_G_EXT = (int)0x8E43;
    public static final int GL_SAMPLER_2D_RECT_SHADOW = (int)0x8B64;
    public static final int GL_MODELVIEW11_ARB = (int)0x872B;
    public static final int GL_OPERAND3_ALPHA_NV = (int)0x859B;
    public static final int GL_COMMAND_BARRIER_BIT = (int)0x00000040;
    public static final int GL_EXT_separate_specular_color = (int)1;
    public static final int GL_MIRROR_CLAMP_ATI = (int)0x8742;
    public static final int GL_UNSIGNALED = (int)0x9118;
    public static final int GL_UNPACK_CLIENT_STORAGE_APPLE = (int)0x85B2;
    public static final int GL_COLOR_WRITEMASK = (int)0x0C23;
    public static final int GL_VERTEX_ATTRIB_ARRAY10_NV = (int)0x865A;
    public static final int GL_DEPTH32F_STENCIL8_NV = (int)0x8DAC;
    public static final int GL_TEXTURE_ALPHA_TYPE = (int)0x8C13;
    public static final int GL_TEXTURE6_ARB = (int)0x84C6;
    public static final int GL_RGBA8UI_EXT = (int)0x8D7C;
    public static final int GL_INT_IMAGE_2D_ARRAY_EXT = (int)0x905E;
    public static final int GL_CONDITION_SATISFIED = (int)0x911C;
    public static final int GL_DEBUG_SEVERITY_MEDIUM_ARB = (int)0x9147;
    public static final int GL_PROXY_TEXTURE_RECTANGLE_ARB = (int)0x84F7;
    public static final int GL_ACTIVE_SUBROUTINES = (int)0x8DE5;
    public static final int GL_ARB_half_float_vertex = (int)1;
    public static final int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = (int)0x8DE2;
    public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR = (int)0x93B6;
    public static final int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = (int)0x9029;
    public static final int GL_EXT_secondary_color = (int)1;
    public static final int GL_AMBIENT_AND_DIFFUSE = (int)0x1602;
    public static final int GL_LINE_TOKEN = (int)0x0702;
    public static final int GL_NV_vertex_array_range = (int)1;
    public static final int GL_FOG_COORDINATE_ARRAY_POINTER = (int)0x8456;
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = (int)0x8B8B;
    public static final int GL_REGAL_ES1_1_compatibility = (int)1;
    public static final int GL_TEXTURE_1D_ARRAY = (int)0x8C18;
    public static final int GL_MOV_ATI = (int)0x8961;
    public static final int GL_NV_blend_equation_advanced = (int)1;
    public static final int GL_ARB_shadow = (int)1;
    public static final int GL_OBJECT_TYPE = (int)0x9112;
    public static final int GL_READ_FRAMEBUFFER_BINDING_ANGLE = (int)0x8CAA;
    public static final int GL_422_REV_EXT = (int)0x80CD;
    public static final int GLEW_VERSION_MINOR = (int)3;
    public static final int GL_ACCUM_BUFFER_BIT = (int)0x00000200;
    public static final int GL_MAX_TEXTURE_COORDS = (int)0x8871;
    public static final int GL_MAX_TEXTURE_BUFFER_SIZE = (int)0x8C2B;
    public static final int GL_COLOR_TABLE_WIDTH = (int)0x80D9;
    public static final int GL_INVERT_RGB_NV = (int)0x92A3;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = (int)0x8DA7;
    public static final int GL_OML_interlace = (int)1;
    public static final int GL_SHADER_OBJECT_ARB = (int)0x8B48;
    public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = (int)0x8624;
    public static final int GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = (int)0x884E;
    public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = (int)0x82DA;
    public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = (int)0x8C88;
    public static final int GL_INDEX_ARRAY_STRIDE = (int)0x8086;
    public static final int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = (int)0x92F0;
    public static final int GL_NV_fog_distance = (int)1;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = (int)0x8CD1;
    public static final int GL_PROGRAM_BINARY_LENGTH = (int)0x8741;
    public static final int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = (int)0x9035;
    public static final int GL_DSDT8_MAG8_INTENSITY8_NV = (int)0x870B;
    public static final int GL_ALL_COMPLETED_NV = (int)0x84F2;
    public static final int GL_RGBA16_EXTENDED_RANGE_SGIX = (int)0x85F3;
    public static final int GL_LOG_APP_REGAL = (int)0x931C;
    public static final int GL_VIEW_CLASS_BPTC_UNORM = (int)0x82D2;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = (int)0x8DA9;
    public static final int GL_PINLIGHT_NV = (int)0x92A8;
    public static final int GL_FRAGMENT_PROGRAM_ARB = (int)0x8804;
    public static final int GL_EXT_framebuffer_blit = (int)1;
    public static final int GL_TRACE_REGAL = (int)0x9361;
    public static final int GL_LINE_TO_NV = (int)0x04;
    public static final int GL_EXT_texture_rectangle = (int)1;
    public static final int GL_RENDERBUFFER_RED_SIZE_EXT = (int)0x8D50;
    public static final int GL_T2F_V3F = (int)0x2A27;
    public static final int GL_R8_SNORM = (int)0x8F94;
    public static final int GL_OP_CROSS_PRODUCT_EXT = (int)0x8797;
    public static final int GL_EXT_multisample = (int)1;
    public static final int GL_PROXY_HISTOGRAM = (int)0x8025;
    public static final int GL_ADJACENT_PAIRS_NV = (int)0x90AE;
    public static final int GL_READ_FRAMEBUFFER_BINDING = (int)0x8CAA;
    public static final int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = (int)0x92F8;
    public static final int GL_COLOR_SUM_EXT = (int)0x8458;
    public static final int GL_RGBA4_EXT = (int)0x8056;
    public static final int GL_TEXTURE_BUFFER_ARB = (int)0x8C2A;
    public static final int GL_MAP2_VERTEX_ATTRIB8_4_NV = (int)0x8678;
    public static final int GL_COMBINER_CD_OUTPUT_NV = (int)0x854B;
    public static final int GL_R = (int)0x2002;
    public static final int GL_S = (int)0x2000;
    public static final int GL_T = (int)0x2001;
    public static final int GL_CONSTANT_EXT = (int)0x8576;
    public static final int GL_RG16I = (int)0x8239;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = (int)0x8DA8;
    public static final int GL_RG16F = (int)0x822F;
    public static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = (int)0x8A07;
    public static final int GL_Q = (int)0x2003;
    public static final int GL_SAMPLER_OBJECT_AMD = (int)0x9155;
    public static final int GL_STENCIL_BACK_OP_VALUE_AMD = (int)0x874D;
    public static final int GL_PATH_COORD_COUNT_NV = (int)0x909E;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = (int)0x8802;
    public static final int GL_RGBA8UI = (int)0x8D7C;
    public static final int GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = (int)0x85C2;
    public static final int GL_SGIX_framezoom = (int)1;
    public static final int GL_ARB_conservative_depth = (int)1;
    public static final int GL_DRAW_BUFFER4_ARB = (int)0x8829;
    public static final int GL_EXT_framebuffer_multisample_blit_scaled = (int)1;
    public static final int GL_COLOR_ATTACHMENT11_EXT = (int)0x8CEB;
    public static final int GL_INTENSITY32UI_EXT = (int)0x8D73;
    public static final int GL_FLOAT16_VEC3_NV = (int)0x8FFA;
    public static final int GL_VERTEX_SOURCE_ATI = (int)0x876C;
    public static final int GL_UNPACK_SWAP_BYTES = (int)0x0CF0;
    public static final int GL_APPLE_object_purgeable = (int)1;
    public static final int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = (int)0x83F1;
    public static final int GL_QUERY_RESULT_AVAILABLE_NV = (int)0x8867;
    public static final int GL_GENERATE_MIPMAP_HINT = (int)0x8192;
    public static final int GL_COLOR_ARRAY_ADDRESS_NV = (int)0x8F23;
    public static final int GL_MODELVIEW20_ARB = (int)0x8734;
    public static final int GL_RESAMPLE_AVERAGE_OML = (int)0x8988;
    public static final int GL_CURRENT_QUERY_ARB = (int)0x8865;
    public static final int GL_TEXTURE_BINDING_RENDERBUFFER_NV = (int)0x8E53;
    public static final int GL_EDGE_FLAG_ARRAY_POINTER_EXT = (int)0x8093;
    public static final int GL_MAX_PROGRAM_PARAMETERS_ARB = (int)0x88A9;
    public static final int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = (int)0x86F1;
    public static final int GL_COMPRESSED_RED_RGTC1 = (int)0x8DBB;
    public static final int GL_DRAW_BUFFER4_ATI = (int)0x8829;
    public static final int GL_COLOR_ATTACHMENT14_EXT = (int)0x8CEE;
    public static final int GL_OPERAND1_ALPHA_ARB = (int)0x8599;
    public static final int GL_GET_TEXTURE_IMAGE_TYPE = (int)0x8292;
    public static final int GL_OBJECT_VALIDATE_STATUS_ARB = (int)0x8B83;
    public static final int GL_VIRTUAL_PAGE_SIZE_Y_AMD = (int)0x9196;
    public static final int GL_OUTPUT_TEXTURE_COORD21_EXT = (int)0x87B2;
    public static final int GL_UNSIGNED_INT_IMAGE_BUFFER = (int)0x9067;
    public static final int GL_SGIX_async = (int)1;
    public static final int GL_ALPHA16 = (int)0x803E;
    public static final int GL_FOG_COORDINATE = (int)0x8451;
    public static final int GL_ALPHA12 = (int)0x803D;
    public static final int GL_UNPACK_RESAMPLE_SGIX = (int)0x842F;
    public static final int GL_NV_point_sprite = (int)1;
    public static final int GL_STORAGE_CLIENT_APPLE = (int)0x85B4;
    public static final int GL_INTERNALFORMAT_SUPPORTED = (int)0x826F;
    public static final int GL_FRONT_FACE = (int)0x0B46;
    public static final int GL_SECONDARY_COLOR_ATIX = (int)0x8747;
    public static final int GL_NV_depth_range_unclamped = (int)1;
    public static final int GL_NORMAL_MAP_NV = (int)0x8511;
    public static final int GL_DST_ALPHA = (int)0x0304;
    public static final int GL_VIRTUAL_PAGE_SIZE_Z_AMD = (int)0x9197;
    public static final int GL_MATRIX0_NV = (int)0x8630;
    public static final int GL_OPERAND2_ALPHA_EXT = (int)0x859A;
    public static final int GL_PROGRAM_ATTRIBS_ARB = (int)0x88AC;
    public static final int GL_PERFMON_RESULT_SIZE_AMD = (int)0x8BC5;
    public static final int GL_ARB_occlusion_query2 = (int)1;
    public static final int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = (int)0x9160;
    public static final int GL_VERTEX_PROGRAM_TWO_SIDE = (int)0x8643;
    public static final int GL_SAMPLER_1D_SHADOW = (int)0x8B61;
    public static final int GL_FRAGMENT_MATERIAL_EXT = (int)0x8349;
    public static final int GL_BUFFER_MAP_OFFSET = (int)0x9121;
    public static final int GL_HILO16_NV = (int)0x86F8;
    public static final int GL_ATIX_texture_env_route = (int)1;
    public static final int GL_INCR_WRAP_EXT = (int)0x8507;
    public static final int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = (int)0x817B;
    public static final int GL_TEXTURE23_ARB = (int)0x84D7;
    public static final int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = (int)0x809E;
    public static final int GL_COMBINE_ARB = (int)0x8570;
    public static final int GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = (int)0x8C4C;
    public static final int GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = (int)0x85F7;
    public static final int GL_MIN_SPARSE_LEVEL_AMD = (int)0x919B;
    public static final int GL_DRAW_PIXEL_TOKEN = (int)0x0705;
    public static final int GL_DECR_WRAP = (int)0x8508;
    public static final int GL_VIVIDLIGHT_NV = (int)0x92A6;
    public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = (int)0x8C84;
    public static final int GL_ARB_texture_gather = (int)1;
    public static final int GL_ARB_imaging = (int)1;
    public static final int GL_PLUS_DARKER_NV = (int)0x9292;
    public static final int GL_DEBUG_SEVERITY_LOW_ARB = (int)0x9148;
    public static final int GL_EVAL_VERTEX_ATTRIB1_NV = (int)0x86C7;
    public static final int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = (int)0x8896;
    public static final int GL_MITER_REVERT_NV = (int)0x90A7;
    public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = (int)0x92C8;
    public static final int GL_SAMPLE_ALPHA_TO_ONE_EXT = (int)0x809F;
    public static final int GL_RED_MIN_CLAMP_INGR = (int)0x8560;
    public static final int GL_EMBOSS_MAP_NV = (int)0x855F;
    public static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = (int)0x8338;
    public static final int GL_ARB_multisample = (int)1;
    public static final int GL_LUMINANCE8_ALPHA8_SNORM = (int)0x9016;
    public static final int GL_NAME_STACK_DEPTH = (int)0x0D70;
    public static final int GL_DEBUG_TYPE_ERROR_ARB = (int)0x824C;
    public static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV = (int)0x8865;
    public static final int GL_MAX_SPOT_EXPONENT_NV = (int)0x8505;
    public static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = (int)0x88B6;
    public static final int GL_SMALL_CW_ARC_TO_NV = (int)0x14;
    public static final int GL_KTX_buffer_region = (int)1;
    public static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = (int)0x8F30;
    public static final int GL_DEBUG_TYPE_ERROR = (int)0x824C;
    public static final int GL_HALF_APPLE = (int)0x140B;
    public static final int GL_COLOR_ARRAY_LENGTH_NV = (int)0x8F2D;
    public static final int GL_ALLOW_DRAW_MEM_HINT_PGI = (int)107025;
    public static final int GL_CONVOLUTION_1D = (int)0x8010;
    public static final int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = (int)0x914D;
    public static final int GL_HISTOGRAM_EXT = (int)0x8024;
    public static final int GL_DOT3_RGB_EXT = (int)0x8740;
    public static final int GL_MINUS_NV = (int)0x929F;
    public static final int GL_VIDEO_BUFFER_NV = (int)0x9020;
    public static final int GL_VERTEX_ATTRIB_ARRAY5_NV = (int)0x8655;
    public static final int GL_LOCATION_INDEX = (int)0x930F;
    public static final int GL_OUTPUT_TEXTURE_COORD2_EXT = (int)0x879F;
    public static final int GL_4PASS_1_SGIS = (int)0x80A5;
    public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = (int)0x906A;
    public static final int GL_MIN = (int)0x8007;
    public static final int GL_FRAMEBUFFER = (int)0x8D40;
    public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = (int)0x8A2E;
    public static final int GL_LUMINANCE_ALPHA16UI_EXT = (int)0x8D7B;
    public static final int GL_TEXTURE0_ARB = (int)0x84C0;
    public static final int GL_MIRROR_CLAMP_TO_EDGE = (int)0x8743;
    public static final int GL_RG16UI = (int)0x823A;
    public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = (int)0x92D4;
    public static final int GL_FEEDBACK = (int)0x1C01;
    public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = (int)0x8DAD;
    public static final int GL_QUERY_RESULT = (int)0x8866;
    public static final int GL_N3F_V3F = (int)0x2A25;
    public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = (int)0x92D7;
    public static final int GL_ARRAY_BUFFER_BINDING_ARB = (int)0x8894;
    public static final int GL_SRC_OVER_NV = (int)0x9288;
    public static final int GL_TRIANGLES = (int)0x0004;
    public static final int GL_UNSIGNED_SHORT_5_5_5_1_EXT = (int)0x8034;
    public static final int GL_FIELD_LOWER_NV = (int)0x9023;
    public static final int GL_ALPHA_FLOAT32_APPLE = (int)0x8816;
    public static final int GL_TEXTURE_WIDTH = (int)0x1000;
    public static final int GL_SCALAR_EXT = (int)0x87BE;
    public static final int GL_TRACK_MATRIX_TRANSFORM_NV = (int)0x8649;
    public static final int GL_MAX_PATCH_VERTICES = (int)0x8E7D;
    public static final int GL_STATIC_VERTEX_ARRAY_IBM = (int)103061;
    public static final int GL_POLYGON_OFFSET_FACTOR_EXT = (int)0x8038;
    public static final int GL_DEBUG_SEVERITY_MEDIUM_AMD = (int)0x9147;
    public static final int GL_MAX_INTENSITY_SGIS = (int)0x85FB;
    public static final int GL_SLUMINANCE_ALPHA = (int)0x8C44;
    public static final int GL_SRC2_RGB = (int)0x8582;
    public static final int GL_RGB_FLOAT32_APPLE = (int)0x8815;
    public static final int GL_MATRIX7_ARB = (int)0x88C7;
    public static final int GL_TRANSPOSE_PROJECTION_MATRIX_ARB = (int)0x84E4;
    public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = (int)0x84F0;
    public static final int GL_INTENSITY_SNORM = (int)0x9013;
    public static final int GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = (int)0x85F1;
    public static final int GL_NV_half_float = (int)1;
    public static final int GL_CONVOLUTION_2D = (int)0x8011;
    public static final int GL_RGBA32UI = (int)0x8D70;
    public static final int GL_NV_light_max_exponent = (int)1;
    public static final int GL_MAP1_VERTEX_ATTRIB8_4_NV = (int)0x8668;
    public static final int GL_MAX_VERTEX_ATTRIB_STRIDE = (int)0x82E5;
    public static final int GL_PATH_TERMINAL_DASH_CAP_NV = (int)0x907D;
    public static final int GL_RGBA_EXTENDED_RANGE_SGIX = (int)0x85ED;
    public static final int GL_STENCIL_BACK_VALUE_MASK = (int)0x8CA4;
    public static final int GL_NATIVE_GRAPHICS_HANDLE_PGI = (int)107010;
    public static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = (int)0x80D4;
    public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = (int)0x8E8D;
    public static final int GL_PERFMON_RESULT_AVAILABLE_AMD = (int)0x8BC4;
    public static final int GL_STENCIL_CLEAR_TAG_VALUE_EXT = (int)0x88F3;
    public static final int GL_VERTEX_SUBROUTINE = (int)0x92E8;
    public static final int GL_MAP1_TANGENT_EXT = (int)0x8444;
    public static final int GL_PALETTE8_R5_G6_B5_OES = (int)0x8B97;
    public static final int GL_INTENSITY16I_EXT = (int)0x8D8B;
    public static final int GL_ELEMENT_ARRAY_UNIFIED_NV = (int)0x8F1F;
    public static final int GL_PACK_SKIP_IMAGES_EXT = (int)0x806B;
    public static final int GL_ABGR_EXT = (int)0x8000;
    public static final int GL_READ_PIXELS = (int)0x828C;
    public static final int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = (int)0x80BF;
    public static final int GL_HALF_BIAS_NORMAL_NV = (int)0x853A;
    public static final int GL_HALF_BIAS_NEGATE_NV = (int)0x853B;
    public static final int GL_UNPACK_SKIP_PIXELS = (int)0x0CF4;
    public static final int GL_IMAGE_PIXEL_FORMAT = (int)0x82A9;
    public static final int GL_AMD_texture_texture4 = (int)1;
    public static final int GL_DEPTH_BOUNDS_TEST_EXT = (int)0x8890;
    public static final int GL_EXT_cmyka = (int)1;
    public static final int GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = (int)0x8DBC;
    public static final int GL_ARB_sampler_objects = (int)1;
    public static final int GL_INDEX_ARRAY_TYPE_EXT = (int)0x8085;
    public static final int GL_PATH_GEN_COEFF_NV = (int)0x90B1;
    public static final int GL_INT_SAMPLER_1D_ARRAY_EXT = (int)0x8DCE;
    public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = (int)0x90D7;
    public static final int GL_FOG_COORD = (int)0x8451;
    public static final int GL_SLUMINANCE8_ALPHA8_EXT = (int)0x8C45;
    public static final int GL_MAX = (int)0x8008;
    public static final int GL_NV_gpu_program5 = (int)1;
    public static final int GL_NV_gpu_program4 = (int)1;
    public static final int GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = (int)0x86D8;
    public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = (int)0x8A42;
    public static final int GL_TEXTURE_IMMUTABLE_FORMAT = (int)0x912F;
    public static final int GL_RGBA_MODE = (int)0x0C31;
    public static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = (int)0x88B2;
    public static final int GL_EYE_RADIAL_NV = (int)0x855B;
    public static final int GL_TEXTURE_DEPTH_TYPE = (int)0x8C16;
    public static final int GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = (int)0x90BE;
    public static final int GL_COLOR_TABLE_FORMAT_SGI = (int)0x80D8;
    public static final int GL_SCALE_BY_ONE_HALF_NV = (int)0x8540;
    public static final int GL_UNIFORM_BUFFER_BINDING_EXT = (int)0x8DEF;
    public static final int GL_REFLECTION_MAP_NV = (int)0x8512;
    public static final int GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE = (int)0x83F1;
    public static final int GL_OML_resample = (int)1;
    public static final int GL_TEXTURE_BASE_LEVEL = (int)0x813C;
    public static final int GL_TEXTURE_GEQUAL_R_SGIX = (int)0x819D;
    public static final int GL_CONSTANT_COLOR1_NV = (int)0x852B;
    public static final int GL_ARB_depth_clamp = (int)1;
    public static final int GL_SAMPLER_2D_MULTISAMPLE = (int)0x9108;
    public static final int GL_OPERAND0_ALPHA_ARB = (int)0x8598;
    public static final int GL_TRANSPOSE_AFFINE_3D_NV = (int)0x9098;
    public static final int GL_VERTEX4_BIT_PGI = (int)0x00000008;
    public static final int GL_ALLOW_DRAW_OBJ_HINT_PGI = (int)107022;
    public static final int GL_ARB_clear_texture = (int)1;
    public static final int GL_SLUMINANCE = (int)0x8C46;
    public static final int GL_BLEND_DST_RGB_EXT = (int)0x80C8;
    public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = (int)0x8852;
    public static final int GL_EXT_pixel_transform = (int)1;
    public static final int GL_INDEX_ARRAY = (int)0x8077;
    public static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = (int)0x8643;
    public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = (int)0x8C76;
    public static final int GL_QUERY_RESULT_AVAILABLE_ARB = (int)0x8867;
    public static final int GL_TEXTURE20 = (int)0x84D4;
    public static final int GL_RENDER_MODE = (int)0x0C40;
    public static final int GL_ARB_texture_cube_map_array = (int)1;
    public static final int GL_POST_CONVOLUTION_RED_SCALE_EXT = (int)0x801C;
    public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR = (int)0x93B7;
    public static final int GL_LINE_SMOOTH_HINT = (int)0x0C52;
    public static final int GL_PN_TRIANGLES_POINT_MODE_ATI = (int)0x87F2;
    public static final int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = (int)0x8C28;
    public static final int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = (int)0x83F3;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = (int)0x8CDB;
    public static final int GL_TEXTURE19 = (int)0x84D3;
    public static final int GL_TEXTURE18 = (int)0x84D2;
    public static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = (int)0x87D2;
    public static final int GL_TEXTURE17 = (int)0x84D1;
    public static final int GL_VERTEX_PRECLIP_HINT_SGIX = (int)0x83EF;
    public static final int GL_TEXTURE16 = (int)0x84D0;
    public static final int GL_TEXTURE15 = (int)0x84CF;
    public static final int GL_TEXTURE14 = (int)0x84CE;
    public static final int GL_RG16 = (int)0x822C;
    public static final int GL_TEXTURE13 = (int)0x84CD;
    public static final int GL_VERTEX_CONSISTENT_HINT_PGI = (int)107051;
    public static final int GL_TEXTURE12 = (int)0x84CC;
    public static final int GL_MODELVIEW0_ARB = (int)0x1700;
    public static final int GL_TEXTURE11 = (int)0x84CB;
    public static final int GL_TEXTURE10 = (int)0x84CA;
    public static final int GL_AMD_vertex_shader_viewport_index = (int)1;
    public static final int GL_TEXTURE30 = (int)0x84DE;
    public static final int GL_TEXTURE31 = (int)0x84DF;
    public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = (int)0x8857;
    public static final int GL_ARB_compressed_texture_pixel_storage = (int)1;
    public static final int GL_BOOL_VEC2_ARB = (int)0x8B57;
    public static final int GL_NOTEQUAL = (int)0x0205;
    public static final int GL_TEXTURE29 = (int)0x84DD;
    public static final int GL_EXT_paletted_texture = (int)1;
    public static final int GL_TEXTURE26 = (int)0x84DA;
    public static final int GL_TEXTURE25 = (int)0x84D9;
    public static final int GL_TEXTURE28 = (int)0x84DC;
    public static final int GL_TEXTURE27 = (int)0x84DB;
    public static final int GL_TEXTURE22 = (int)0x84D6;
    public static final int GL_TEXTURE21 = (int)0x84D5;
    public static final int GL_TEXTURE24 = (int)0x84D8;
    public static final int GL_TEXTURE23 = (int)0x84D7;
    public static final int GL_UNSIGNED_INT_S8_S8_8_8_NV = (int)0x86DA;
    public static final int GL_DYNAMIC_READ_ARB = (int)0x88E9;
    public static final int GL_ELEMENT_ARRAY_POINTER_APPLE = (int)0x8A0E;
    public static final int GL_PIXEL_BUFFER_BARRIER_BIT = (int)0x00000080;
    public static final int GL_FONT_UNDERLINE_POSITION_BIT_NV = (int)0x04000000;
    public static final int GL_EXT_packed_float = (int)1;
    public static final int GL_RG16_SNORM = (int)0x8F99;
    public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = (int)0x86A2;
    public static final int GL_BLUE_BITS = (int)0x0D54;
    public static final int GL_MAX_PROGRAM_TEXEL_OFFSET = (int)0x8905;
    public static final int GL_MATRIX4_ARB = (int)0x88C4;
    public static final int GL_MATERIAL_SIDE_HINT_PGI = (int)107052;
    public static final int GL_MATRIX19_ARB = (int)0x88D3;
    public static final int GL_NV_texture_shader = (int)1;
    public static final int GL_HISTOGRAM_LUMINANCE_SIZE = (int)0x802C;
    public static final int GL_VIEW_CLASS_S3TC_DXT5_RGBA = (int)0x82CF;
    public static final int GL_DEPTH_STENCIL_EXT = (int)0x84F9;
    public static final int GL_DEBUG_SOURCE_SHADER_COMPILER = (int)0x8248;
    public static final int GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = (int)0x00000002;
    public static final int GL_IDENTITY_NV = (int)0x862A;
    public static final int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = (int)0x8899;
    public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = (int)0x8DDD;
    public static final int GL_ARB_fragment_coord_conventions = (int)1;
    public static final int GL_SWIZZLE_STQ_DQ_ATI = (int)0x8979;
    public static final int GL_RGBA_SIGNED_COMPONENTS_EXT = (int)0x8C3C;
    public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = (int)0x8E5C;
    public static final int GL_3_BYTES = (int)0x1408;
    public static final int GL_DSDT_NV = (int)0x86F5;
    public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = (int)0x93DB;
    public static final int GL_ARB_shader_stencil_export = (int)1;
    public static final int GL_MAX_MODELVIEW_STACK_DEPTH = (int)0x0D36;
    public static final int GL_ATTRIB_STACK_DEPTH = (int)0x0BB0;
    public static final int GL_BUFFER_SIZE_ARB = (int)0x8764;
    public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = (int)0x82AE;
    public static final int GL_MATRIX17_ARB = (int)0x88D1;
    public static final int GL_GEOMETRY_VERTICES_OUT = (int)0x8916;
    public static final int GL_HP_image_transform = (int)1;
    public static final int GL_LINES_ADJACENCY = (int)0x000A;
    public static final int GL_TEXTURE11_ARB = (int)0x84CB;
    public static final int GL_UNSIGNED_INT_VEC3_EXT = (int)0x8DC7;
    public static final int GL_CURRENT_RASTER_NORMAL_EXT = (int)0x8406;
    public static final int GL_MESA_resize_buffers = (int)1;
    public static final int GL_SHADER_STORAGE_BUFFER = (int)0x90D2;
    public static final int GL_PROGRAM_PIPELINE_BINDING = (int)0x825A;
    public static final int GL_AMD_sample_positions = (int)1;
    public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER = (int)0x9307;
    public static final int GL_COLOR_TABLE_FORMAT = (int)0x80D8;
    public static final int GL_VIRTUAL_PAGE_SIZE_Z_ARB = (int)0x9197;
    public static final int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = (int)0x919A;
    public static final int GL_ARB_blend_func_extended = (int)1;
    public static final int GL_ALPHA8UI_EXT = (int)0x8D7E;
    public static final int GL_DRAW_BUFFER5_ATI = (int)0x882A;
    public static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = (int)0x8640;
    public static final int GL_SGIX_depth_texture = (int)1;
    public static final int GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = (int)0x8C3B;
    public static final int GL_PIXEL_PACK_BUFFER_BINDING_EXT = (int)0x88ED;
    public static final int GL_PROXY_TEXTURE_2D_ARRAY = (int)0x8C1B;
    public static final int GL_MULTISAMPLE_BIT_ARB = (int)0x20000000;
    public static final int GL_LARGE_CCW_ARC_TO_NV = (int)0x16;
    public static final int GL_MODELVIEW16_ARB = (int)0x8730;
    public static final int GL_COMPRESSED_RG = (int)0x8226;
    public static final int GL_ARB_compute_variable_group_size = (int)1;
    public static final int GL_RGB16_SNORM = (int)0x8F9A;
    public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH = (int)0x826C;
    public static final int GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = (int)0x02000000;
    public static final int GL_LIGHT_MODEL_TWO_SIDE = (int)0x0B52;
    public static final int GL_DEBUG_SEVERITY_LOW_AMD = (int)0x9148;
    public static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = (int)0x912C;
    public static final int GL_DSDT_MAG_VIB_NV = (int)0x86F7;
    public static final int GL_STACK_UNDERFLOW = (int)0x0504;
    public static final int GL_RG8I = (int)0x8237;
    public static final int GL_DRAW_BUFFER5_ARB = (int)0x882A;
    public static final int GL_CLIENT_ACTIVE_TEXTURE = (int)0x84E1;
    public static final int GL_ARB_robustness_application_isolation = (int)1;
    public static final int GL_ALPHA_TEST_FUNC = (int)0x0BC1;
    public static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = (int)0x9199;
    public static final int GL_DEBUG_TYPE_MARKER = (int)0x8268;
    public static final int GL_INTENSITY16_SNORM = (int)0x901B;
    public static final int GL_MAP2_VERTEX_ATTRIB14_4_NV = (int)0x867E;
    public static final int GL_SEPARATE_SPECULAR_COLOR = (int)0x81FA;
    public static final int GL_SUBPIXEL_BITS = (int)0x0D50;
    public static final int GL_RECLAIM_MEMORY_HINT_PGI = (int)107006;
    public static final int GL_TEXTURE_RED_SIZE_EXT = (int)0x805C;
    public static final int GL_4_BYTES = (int)0x1409;
    public static final int GL_MAX_3D_TEXTURE_SIZE = (int)0x8073;
    public static final int GL_ALPHA8_EXT = (int)0x803C;
    public static final int GL_PROGRAM_INSTRUCTIONS_ARB = (int)0x88A0;
    public static final int GL_EXPAND_NEGATE_NV = (int)0x8539;
    public static final int GL_RGBA16UI_EXT = (int)0x8D76;
    public static final int GL_SAMPLE_PATTERN_SGIS = (int)0x80AC;
    public static final int GL_BLEND_PREMULTIPLIED_SRC_NV = (int)0x9280;
    public static final int GL_STENCIL_VALUE_MASK = (int)0x0B93;
    public static final int GL_DRAW_FRAMEBUFFER_BINDING = (int)0x8CA6;
    public static final int GL_EXT_index_func = (int)1;
    public static final int GL_ARB_texture_query_levels = (int)1;
    public static final int GL_COLOR_TABLE_BLUE_SIZE_SGI = (int)0x80DC;
    public static final int GL_SHADER_STORAGE_BUFFER_BINDING = (int)0x90D3;
    public static final int GL_TRIANGLE_LIST_SUN = (int)0x81D7;
    public static final int GL_ASYNC_MARKER_SGIX = (int)0x8329;
    public static final int GL_NAND = (int)0x150E;
    public static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = (int)0x8A09;
    public static final int GL_Z_EXT = (int)0x87D7;
    public static final int GL_RENDERBUFFER_EXT = (int)0x8D41;
    public static final int GL_NV_vertex_buffer_unified_memory = (int)1;
    public static final int GL_FOG_PATCHY_FACTOR_SGIX = (int)0;
    public static final int GL_INTENSITY = (int)0x8049;
    public static final int GL_QUERY_NO_WAIT_NV = (int)0x8E14;
    public static final int GL_MINUS_CLAMPED_NV = (int)0x92B3;
    public static final int GL_MAX_MAP_TESSELLATION_NV = (int)0x86D6;
    public static final int GL_COORD_REPLACE_ARB = (int)0x8862;
    public static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = (int)0x8F28;
    public static final int GL_PRESENT_TIME_NV = (int)0x8E2A;
    public static final int GL_RGBA16I_EXT = (int)0x8D88;
    public static final int GL_VARIANT_VALUE_EXT = (int)0x87E4;
    public static final int GL_TABLE_TOO_LARGE = (int)0x8031;
    public static final int GL_SOURCE1_ALPHA = (int)0x8589;
    public static final int GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = (int)0x9199;
    public static final int GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = (int)0x83F6;
    public static final int GL_UNIFORM_BARRIER_BIT = (int)0x00000004;
    public static final int GL_LINK_STATUS = (int)0x8B82;
    public static final int GL_RENDER = (int)0x1C00;
    public static final int GL_SPARE0_NV = (int)0x852E;
    public static final int GL_PIXEL_COUNT_NV = (int)0x8866;
    public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = (int)0x9102;
    public static final int GL_RGB_SCALE_EXT = (int)0x8573;
    public static final int GL_TEXTURE_2D_BINDING_EXT = (int)0x8069;
    public static final int GL_PIXEL_CUBIC_WEIGHT_EXT = (int)0x8333;
    public static final int GL_TEXTURE_MEMORY_LAYOUT_INTEL = (int)0x83FF;
    public static final int GL_RG32I = (int)0x823B;
    public static final int GL_RG32F = (int)0x8230;
    public static final int GL_TOP_LEVEL_ARRAY_STRIDE = (int)0x930D;
    public static final int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = (int)0x80F0;
    public static final int GL_CURRENT_SECONDARY_COLOR_EXT = (int)0x8459;
    public static final int GL_LUMINANCE_EXTENDED_RANGE_SGIX = (int)0x85EF;
    public static final int GL_TEXTURE_DEPTH_EXT = (int)0x8071;
    public static final int GL_SIGNED_ALPHA8_NV = (int)0x8706;
    public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = (int)0x8B8B;
    public static final int GL_SAMPLER_2D_RECT_ARB = (int)0x8B63;
    public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = (int)0x845C;
    public static final int GL_NV_texture_barrier = (int)1;
    public static final int GL_MATRIX29_ARB = (int)0x88DD;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = (int)0x8803;
    public static final int GL_ARB_framebuffer_no_attachments = (int)1;
    public static final int GL_AMD_stencil_operation_extended = (int)1;
    public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = (int)0x8266;
    public static final int GL_TEXTURE_SWIZZLE_B_EXT = (int)0x8E44;
    public static final int GL_TEXTURE_WRAP_R = (int)0x8072;
    public static final int GL_TEXTURE_WRAP_T = (int)0x2803;
    public static final int GL_TRANSLATE_X_NV = (int)0x908E;
    public static final int GL_TEXTURE_WRAP_S = (int)0x2802;
    public static final int GL_INTENSITY16UI_EXT = (int)0x8D79;
    public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = (int)0x9144;
    public static final int GL_RGB5_A1_EXT = (int)0x8057;
    public static final int GL_SOURCE3_RGB_NV = (int)0x8583;
    public static final int GL_ENABLE_BIT = (int)0x00002000;
    public static final int GL_MAP2_TANGENT_EXT = (int)0x8445;
    public static final int GL_ARB_color_buffer_float = (int)1;
    public static final int GL_TEXTURE_ENV_COLOR = (int)0x2201;
    public static final int GL_UNIFORM_TYPE = (int)0x8A37;
    public static final int GL_INTENSITY_EXT = (int)0x8049;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = (int)0x8CD9;
    public static final int GL_POST_COLOR_MATRIX_RED_BIAS = (int)0x80B8;
    public static final int GL_TEXTURE7_ARB = (int)0x84C7;
    public static final int GL_PIXEL_MODE_BIT = (int)0x00000020;
    public static final int GL_OP_POWER_EXT = (int)0x8793;
    public static final int GL_X_EXT = (int)0x87D5;
    public static final int GL_NUM_FILL_STREAMS_NV = (int)0x8E29;
    public static final int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = (int)0x8533;
    public static final int GL_TEXTURE_BIT = (int)0x00040000;
    public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR = (int)0x93B3;
    public static final int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = (int)0x888F;
    public static final int GL_USE_MISSING_GLYPH_NV = (int)0x90AA;
    public static final int GL_SELECTION_BUFFER_SIZE = (int)0x0DF4;
    public static final int GL_PROGRAM_PARAMETERS_ARB = (int)0x88A8;
    public static final int GL_TEXTURE_COORD_NV = (int)0x8C79;
    public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = (int)0x889C;
    public static final int GL_VOLATILE_APPLE = (int)0x8A1A;
    public static final int GL_COMPRESSED_SIGNED_R11_EAC = (int)0x9271;
    public static final int GL_2PASS_1_EXT = (int)0x80A3;
    public static final int GL_LOG_WARNING_REGAL = (int)0x931A;
    public static final int GL_TEXTURE_GREEN_TYPE_ARB = (int)0x8C11;
    public static final int GL_LIST_INDEX = (int)0x0B33;
    public static final int GL_ALPHA_TEST_REF = (int)0x0BC2;
    public static final int GL_VERTEX_ARRAY_RANGE_VALID_NV = (int)0x851F;
    public static final int GL_TEXTURE_CUBE_MAP = (int)0x8513;
    public static final int GL_ACTIVE_RESOURCES = (int)0x92F5;
    public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = (int)0x8248;
    public static final int GL_STATIC_DRAW = (int)0x88E4;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = (int)0x8CD0;
    public static final int GL_VIRTUAL_PAGE_SIZE_Y_ARB = (int)0x9196;
    public static final int GL_MATRIX31_ARB = (int)0x88DF;
    public static final int GL_REG_3_ATI = (int)0x8924;
    public static final int GL_SAMPLE_COVERAGE_INVERT_ARB = (int)0x80AB;
    public static final int GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = (int)0x00000100;
    public static final int GL_ALPHA32F_ARB = (int)0x8816;
    public static final int GL_HILO8_NV = (int)0x885E;
    public static final int GL_PATH_FORMAT_SVG_NV = (int)0x9070;
    public static final int GL_BLUE_BIAS = (int)0x0D1B;
    public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = (int)0x92D2;
    public static final int GL_COLOR_INDEX = (int)0x1900;
    public static final int GL_VERTEX_STREAM3_ATI = (int)0x8770;
    public static final int GL_DEBUG_GROUP_STACK_DEPTH = (int)0x826D;
    public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = (int)0x8DE1;
    public static final int GL_TEXTURE_COORD_ARRAY_TYPE = (int)0x8089;
    public static final int GL_TRIANGLE_STRIP_ADJACENCY = (int)0x000D;
    public static final int GL_MAX_VERTEX_ATTRIBS = (int)0x8869;
    public static final int GL_CLIP_NEAR_HINT_PGI = (int)107040;
    public static final int GL_SPOT_EXPONENT = (int)0x1205;
    public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = (int)0x8D56;
    public static final int GL_BLEND_COLOR = (int)0x8005;
    public static final int GL_MAP2_VERTEX_ATTRIB13_4_NV = (int)0x867D;
    public static final int GL_COORD_REPLACE = (int)0x8862;
    public static final int GL_PHONG_HINT_WIN = (int)0x80EB;
    public static final int GL_STENCIL_INDEX4_EXT = (int)0x8D47;
    public static final int GL_SPECULAR = (int)0x1202;
    public static final int GL_SWIZZLE_STRQ_ATI = (int)0x897A;
    public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = (int)0x8802;
    public static final int GL_SHARED_TEXTURE_PALETTE_EXT = (int)0x81FB;
    public static final int GL_TEXTURE_BINDING_CUBE_MAP_EXT = (int)0x8514;
    public static final int GL_TEXTURE_BINDING_2D_ARRAY = (int)0x8C1D;
    public static final int GL_FAILURE_NV = (int)0x9030;
    public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = (int)0x8A2F;
    public static final int GL_RGBA4_DXT5_S3TC = (int)0x83A5;
    public static final int GL_MATRIX22_ARB = (int)0x88D6;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = (int)0x8212;
    public static final int GL_TEXTURE_CUBE_MAP_ARRAY = (int)0x9009;
    public static final int GL_MAX_VERTEX_ATTRIBS_ARB = (int)0x8869;
    public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY = (int)0x900E;
    public static final int GL_POST_COLOR_MATRIX_GREEN_SCALE = (int)0x80B5;
    public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = (int)0x8CD4;
    public static final int GL_EYE_PLANE_ABSOLUTE_NV = (int)0x855C;
    public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = (int)0x0B23;
    public static final int GL_NEGATIVE_Z_EXT = (int)0x87DB;
    public static final int GL_GREEN_BITS = (int)0x0D53;
    public static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = (int)0x850E;
    public static final int GL_PROXY_TEXTURE_2D_STACK_MESAX = (int)0x875C;
    public static final int GL_DRAW_FRAMEBUFFER_EXT = (int)0x8CA9;
    public static final int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = (int)0x86F0;
    public static final int GL_BUFFER_FLUSHING_UNMAP_APPLE = (int)0x8A13;
    public static final int GL_UNSIGNED_IDENTITY_NV = (int)0x8536;
    public static final int GL_R1UI_C4F_N3F_V3F_SUN = (int)0x85C8;
    public static final int GL_EMISSION = (int)0x1600;
    public static final int GL_MODELVIEW0_STACK_DEPTH_EXT = (int)0x0BA3;
    public static final int GL_UNSIGNED_SHORT_5_5_5_1 = (int)0x8034;
    public static final int GL_POINTS = (int)0x0000;
    public static final int GL_COMPILE = (int)0x1300;
    public static final int GL_RENDERBUFFER_STENCIL_SIZE = (int)0x8D55;
    public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = (int)0x9103;
    public static final int GL_CURRENT_MATRIX_NV = (int)0x8641;
    public static final int GL_SIGNED_RGBA_NV = (int)0x86FB;
    public static final int GL_FOG_COORD_ARRAY_LENGTH_NV = (int)0x8F32;
    public static final int GL_MATRIX1_NV = (int)0x8631;
    public static final int GL_MAX_NAME_STACK_DEPTH = (int)0x0D37;
    public static final int GL_MAX_3D_TEXTURE_SIZE_EXT = (int)0x8073;
    public static final int GL_EXT_histogram = (int)1;
    public static final int GL_ANGLE_framebuffer_blit = (int)1;
    public static final int GL_DOT_PRODUCT_NV = (int)0x86EC;
    public static final int GL_DEPTH_COMPONENT16_ARB = (int)0x81A5;
    public static final int GL_EXT_transform_feedback = (int)1;
    public static final int GL_VERTEX_ATTRIB_ARRAY6_NV = (int)0x8656;
    public static final int GL_TRANSPOSE_AFFINE_2D_NV = (int)0x9096;
    public static final int GL_COLOR_ATTACHMENT1_EXT = (int)0x8CE1;
    public static final int GL_PIXEL_MAP_I_TO_R_SIZE = (int)0x0CB2;
    public static final int GL_FLOAT16_VEC2_NV = (int)0x8FF9;
    public static final int GL_ARB_clear_buffer_object = (int)1;
    public static final int GL_LIGHTEN_NV = (int)0x9298;
    public static final int GL_COMPRESSED_SLUMINANCE_ALPHA = (int)0x8C4B;
    public static final int GL_LUMINANCE16_SIGNED_SGIX = (int)0x85E9;
    public static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = (int)0x8F39;
    public static final int GL_ARB_texture_swizzle = (int)1;
    public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = (int)0x9144;
    public static final int GL_CULL_FACE = (int)0x0B44;
    public static final int GL_SGIX_pixel_texture_bits = (int)1;
    public static final int GL_OPERAND0_ALPHA = (int)0x8598;
    public static final int GL_SAMPLER_2D_SHADOW = (int)0x8B62;
    public static final int GL_COLOR_MATRIX_SGI = (int)0x80B1;
    public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = (int)0x9107;
    public interface PFNGLCOPYTEXSUBIMAGE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    };
    public interface PFNGLDRAWRANGEELEMENTSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int end, int count, int type, TestLibrary.GLvoid indices);
    };
    public interface PFNGLTEXIMAGE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXSUBIMAGE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLACTIVETEXTUREPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture);
    };
    public interface PFNGLCLIENTACTIVETEXTUREPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture);
    };
    public interface PFNGLCOMPRESSEDTEXIMAGE1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXIMAGE2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int height, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXIMAGE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int width, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETCOMPRESSEDTEXIMAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int lod, TestLibrary.GLvoid img);
    };
    public interface PFNGLLOADTRANSPOSEMATRIXDPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference m);
    };
    public interface PFNGLLOADTRANSPOSEMATRIXFPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference m);
    };
    public interface PFNGLMULTTRANSPOSEMATRIXDPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference m);
    };
    public interface PFNGLMULTTRANSPOSEMATRIXFPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference m);
    };
    public interface PFNGLMULTITEXCOORD1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s);
    };
    public interface PFNGLMULTITEXCOORD1DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD1FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s);
    };
    public interface PFNGLMULTITEXCOORD1FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD1IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s);
    };
    public interface PFNGLMULTITEXCOORD1IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD1SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s);
    };
    public interface PFNGLMULTITEXCOORD1SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s, double t);
    };
    public interface PFNGLMULTITEXCOORD2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD2FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s, float t);
    };
    public interface PFNGLMULTITEXCOORD2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD2IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t);
    };
    public interface PFNGLMULTITEXCOORD2IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD2SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t);
    };
    public interface PFNGLMULTITEXCOORD2SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s, double t, double r);
    };
    public interface PFNGLMULTITEXCOORD3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD3FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s, float t, float r);
    };
    public interface PFNGLMULTITEXCOORD3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD3IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t, int r);
    };
    public interface PFNGLMULTITEXCOORD3IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD3SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t, short r);
    };
    public interface PFNGLMULTITEXCOORD3SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD4DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s, double t, double r, double q);
    };
    public interface PFNGLMULTITEXCOORD4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD4FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s, float t, float r, float q);
    };
    public interface PFNGLMULTITEXCOORD4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD4IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t, int r, int q);
    };
    public interface PFNGLMULTITEXCOORD4IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD4SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t, short r, short q);
    };
    public interface PFNGLMULTITEXCOORD4SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLSAMPLECOVERAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(float value, byte invert);
    };
    public interface PFNGLBLENDCOLORPROC extends StdCallLibrary.StdCallCallback {
        void apply(float red, float green, float blue, float alpha);
    };
    public interface PFNGLBLENDEQUATIONPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLBLENDFUNCSEPARATEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);
    };
    public interface PFNGLFOGCOORDPOINTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLFOGCOORDDPROC extends StdCallLibrary.StdCallCallback {
        void apply(double coord);
    };
    public interface PFNGLFOGCOORDDVPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference coord);
    };
    public interface PFNGLFOGCOORDFPROC extends StdCallLibrary.StdCallCallback {
        void apply(float coord);
    };
    public interface PFNGLFOGCOORDFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference coord);
    };
    public interface PFNGLMULTIDRAWARRAYSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, IntByReference first, IntByReference count, int drawcount);
    };
    public interface PFNGLMULTIDRAWELEMENTSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, IntByReference count, int type, PointerByReference indices, int drawcount);
    };
    public interface PFNGLPOINTPARAMETERFPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLPOINTPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLPOINTPARAMETERIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLPOINTPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLSECONDARYCOLOR3BPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte red, byte green, byte blue);
    };
    public interface PFNGLSECONDARYCOLOR3BVPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer v);
    };
    public interface PFNGLSECONDARYCOLOR3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(double red, double green, double blue);
    };
    public interface PFNGLSECONDARYCOLOR3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3FPROC extends StdCallLibrary.StdCallCallback {
        void apply(float red, float green, float blue);
    };
    public interface PFNGLSECONDARYCOLOR3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue);
    };
    public interface PFNGLSECONDARYCOLOR3IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3SPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue);
    };
    public interface PFNGLSECONDARYCOLOR3SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3UBPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte red, byte green, byte blue);
    };
    public interface PFNGLSECONDARYCOLOR3UBVPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer v);
    };
    public interface PFNGLSECONDARYCOLOR3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue);
    };
    public interface PFNGLSECONDARYCOLOR3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3USPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue);
    };
    public interface PFNGLSECONDARYCOLOR3USVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLSECONDARYCOLORPOINTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLWINDOWPOS2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y);
    };
    public interface PFNGLWINDOWPOS2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS2FPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y);
    };
    public interface PFNGLWINDOWPOS2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS2IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y);
    };
    public interface PFNGLWINDOWPOS2IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS2SPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y);
    };
    public interface PFNGLWINDOWPOS2SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLWINDOWPOS3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y, double z);
    };
    public interface PFNGLWINDOWPOS3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS3FPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y, float z);
    };
    public interface PFNGLWINDOWPOS3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS3IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int z);
    };
    public interface PFNGLWINDOWPOS3IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS3SPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y, short z);
    };
    public interface PFNGLWINDOWPOS3SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLBEGINQUERYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id);
    };
    public interface PFNGLBINDBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int buffer);
    };
    public interface PFNGLBUFFERDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize size, TestLibrary.GLvoid data, int usage);
    };
    public interface PFNGLBUFFERSUBDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize offset, NativeSize size, TestLibrary.GLvoid data);
    };
    public interface PFNGLDELETEBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference buffers);
    };
    public interface PFNGLDELETEQUERIESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLENDQUERYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLGENBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference buffers);
    };
    public interface PFNGLGENQUERIESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLGETBUFFERPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETBUFFERPOINTERVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, PointerByReference params);
    };
    public interface PFNGLGETBUFFERSUBDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize offset, NativeSize size, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETQUERYOBJECTIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETQUERYOBJECTUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETQUERYIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLISBUFFERPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int buffer);
    };
    public interface PFNGLISQUERYPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLMAPBUFFERPROC extends Callback {
        TestLibrary.GLvoid apply(int target, int access);
    };
    public interface PFNGLUNMAPBUFFERPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int target);
    };
    public interface PFNGLATTACHSHADERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int shader);
    };
    public interface PFNGLBINDATTRIBLOCATIONPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int index, Pointer name);
    };
    public interface PFNGLBLENDEQUATIONSEPARATEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2);
    };
    public interface PFNGLCOMPILESHADERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader);
    };
    public interface PFNGLCREATEPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        int apply();
    };
    public interface PFNGLCREATESHADERPROC extends StdCallLibrary.StdCallCallback {
        int apply(int type);
    };
    public interface PFNGLDELETEPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program);
    };
    public interface PFNGLDELETESHADERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader);
    };
    public interface PFNGLDETACHSHADERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int shader);
    };
    public interface PFNGLDISABLEVERTEXATTRIBARRAYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1);
    };
    public interface PFNGLDRAWBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference bufs);
    };
    public interface PFNGLENABLEVERTEXATTRIBARRAYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1);
    };
    public interface PFNGLGETACTIVEATTRIBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int index, int maxLength, IntByReference length, IntByReference size, IntByReference type, Pointer name);
    };
    public interface PFNGLGETACTIVEUNIFORMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int index, int maxLength, IntByReference length, IntByReference size, IntByReference type, Pointer name);
    };
    public interface PFNGLGETATTACHEDSHADERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int maxCount, IntByReference count, IntByReference shaders);
    };
    public interface PFNGLGETATTRIBLOCATIONPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, Pointer name);
    };
    public interface PFNGLGETPROGRAMINFOLOGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int bufSize, IntByReference length, Pointer infoLog);
    };
    public interface PFNGLGETPROGRAMIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int pname, IntByReference param);
    };
    public interface PFNGLGETSHADERINFOLOGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader, int bufSize, IntByReference length, Pointer infoLog);
    };
    public interface PFNGLGETSHADERSOURCEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int obj, int maxLength, IntByReference length, Pointer source);
    };
    public interface PFNGLGETSHADERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader, int pname, IntByReference param);
    };
    public interface PFNGLGETUNIFORMLOCATIONPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, Pointer name);
    };
    public interface PFNGLGETUNIFORMFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, FloatByReference params);
    };
    public interface PFNGLGETUNIFORMIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, IntByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBPOINTERVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1, PointerByReference GLvoidPtrPtr1);
    };
    public interface PFNGLGETVERTEXATTRIBDVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1, DoubleByReference GLdoublePtr1);
    };
    public interface PFNGLGETVERTEXATTRIBFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1, FloatByReference GLfloatPtr1);
    };
    public interface PFNGLGETVERTEXATTRIBIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1, IntByReference GLintPtr1);
    };
    public interface PFNGLISPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int program);
    };
    public interface PFNGLISSHADERPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int shader);
    };
    public interface PFNGLLINKPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program);
    };
    public interface PFNGLSHADERSOURCEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader, int count, PointerByReference strings, IntByReference lengths);
    };
    public interface PFNGLSTENCILFUNCSEPARATEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int frontfunc, int backfunc, int ref, int mask);
    };
    public interface PFNGLSTENCILMASKSEPARATEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLuint1);
    };
    public interface PFNGLSTENCILOPSEPARATEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int sfail, int dpfail, int dppass);
    };
    public interface PFNGLUNIFORM1FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0);
    };
    public interface PFNGLUNIFORM1FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM1IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0);
    };
    public interface PFNGLUNIFORM1IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM2FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0, float v1);
    };
    public interface PFNGLUNIFORM2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM2IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1);
    };
    public interface PFNGLUNIFORM2IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM3FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0, float v1, float v2);
    };
    public interface PFNGLUNIFORM3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM3IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1, int v2);
    };
    public interface PFNGLUNIFORM3IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM4FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0, float v1, float v2, float v3);
    };
    public interface PFNGLUNIFORM4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM4IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1, int v2, int v3);
    };
    public interface PFNGLUNIFORM4IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORMMATRIX2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUSEPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program);
    };
    public interface PFNGLVALIDATEPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program);
    };
    public interface PFNGLVERTEXATTRIB1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x);
    };
    public interface PFNGLVERTEXATTRIB1DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB1FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x);
    };
    public interface PFNGLVERTEXATTRIB1FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB1SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x);
    };
    public interface PFNGLVERTEXATTRIB1SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y);
    };
    public interface PFNGLVERTEXATTRIB2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB2FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y);
    };
    public interface PFNGLVERTEXATTRIB2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB2SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y);
    };
    public interface PFNGLVERTEXATTRIB2SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z);
    };
    public interface PFNGLVERTEXATTRIB3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB3FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float z);
    };
    public interface PFNGLVERTEXATTRIB3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB3SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z);
    };
    public interface PFNGLVERTEXATTRIB3SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NBVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4NIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NSVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NUBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, byte x, byte y, byte z, byte w);
    };
    public interface PFNGLVERTEXATTRIB4NUBVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4NUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NUSVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4BVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z, double w);
    };
    public interface PFNGLVERTEXATTRIB4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB4FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float z, float w);
    };
    public interface PFNGLVERTEXATTRIB4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB4IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4SPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z, short w);
    };
    public interface PFNGLVERTEXATTRIB4SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4UBVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4USVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBPOINTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, byte normalized, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLUNIFORMMATRIX2X3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX2X4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3X2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3X4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4X2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4X3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLBEGINCONDITIONALRENDERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1);
    };
    public interface PFNGLBEGINTRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1);
    };
    public interface PFNGLBINDFRAGDATALOCATIONPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLuint2, Pointer GLcharPtr1);
    };
    public interface PFNGLCLAMPCOLORPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2);
    };
    public interface PFNGLCLEARBUFFERFIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLint1, float GLfloat1, int GLint2);
    };
    public interface PFNGLCLEARBUFFERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLint1, FloatByReference GLfloatPtr1);
    };
    public interface PFNGLCLEARBUFFERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLint1, IntByReference GLintPtr1);
    };
    public interface PFNGLCLEARBUFFERUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLint1, IntByReference GLuintPtr1);
    };
    public interface PFNGLCOLORMASKIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, byte GLboolean1, byte GLboolean2, byte GLboolean3, byte GLboolean4);
    };
    public interface PFNGLDISABLEIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLuint1);
    };
    public interface PFNGLENABLEIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLuint1);
    };
    public interface PFNGLENDCONDITIONALRENDERPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLENDTRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLGETBOOLEANI_VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLuint1, Pointer GLbooleanPtr1);
    };
    public interface PFNGLGETFRAGDATALOCATIONPROC extends StdCallLibrary.StdCallCallback {
        int apply(int GLuint1, Pointer GLcharPtr1);
    };
    public interface PFNGLGETSTRINGIPROC extends Callback {
        Pointer apply(int GLenum1, int GLuint1);
    };
    public interface PFNGLGETTEXPARAMETERIIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, IntByReference GLintPtr1);
    };
    public interface PFNGLGETTEXPARAMETERIUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, IntByReference GLuintPtr1);
    };
    public interface PFNGLGETTRANSFORMFEEDBACKVARYINGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLuint2, int GLsizei1, IntByReference GLsizeiPtr1, IntByReference GLsizeiPtr2, IntByReference GLenumPtr1, Pointer GLcharPtr1);
    };
    public interface PFNGLGETUNIFORMUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLint1, IntByReference GLuintPtr1);
    };
    public interface PFNGLGETVERTEXATTRIBIIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1, IntByReference GLintPtr1);
    };
    public interface PFNGLGETVERTEXATTRIBIUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLenum1, IntByReference GLuintPtr1);
    };
    public interface PFNGLISENABLEDIPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int GLenum1, int GLuint1);
    };
    public interface PFNGLTEXPARAMETERIIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, IntByReference GLintPtr1);
    };
    public interface PFNGLTEXPARAMETERIUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, IntByReference GLuintPtr1);
    };
    public interface PFNGLTRANSFORMFEEDBACKVARYINGSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLsizei1, PointerByReference GLcharPtrPtr1, int GLenum1);
    };
    public interface PFNGLUNIFORM1UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLuint1);
    };
    public interface PFNGLUNIFORM1UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLsizei1, IntByReference GLuintPtr1);
    };
    public interface PFNGLUNIFORM2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLuint1, int GLuint2);
    };
    public interface PFNGLUNIFORM2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLsizei1, IntByReference GLuintPtr1);
    };
    public interface PFNGLUNIFORM3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLuint1, int GLuint2, int GLuint3);
    };
    public interface PFNGLUNIFORM3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLsizei1, IntByReference GLuintPtr1);
    };
    public interface PFNGLUNIFORM4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLuint1, int GLuint2, int GLuint3, int GLuint4);
    };
    public interface PFNGLUNIFORM4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLint1, int GLsizei1, IntByReference GLuintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI1IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLint1);
    };
    public interface PFNGLVERTEXATTRIBI1IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI1UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLuint2);
    };
    public interface PFNGLVERTEXATTRIBI1UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLuintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI2IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLint1, int GLint2);
    };
    public interface PFNGLVERTEXATTRIBI2IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLuint2, int GLuint3);
    };
    public interface PFNGLVERTEXATTRIBI2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLuintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI3IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLint1, int GLint2, int GLint3);
    };
    public interface PFNGLVERTEXATTRIBI3IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLuint2, int GLuint3, int GLuint4);
    };
    public interface PFNGLVERTEXATTRIBI3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLuintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI4BVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, Pointer GLbytePtr1);
    };
    public interface PFNGLVERTEXATTRIBI4IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLint1, int GLint2, int GLint3, int GLint4);
    };
    public interface PFNGLVERTEXATTRIBI4IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI4SVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, ShortByReference GLshortPtr1);
    };
    public interface PFNGLVERTEXATTRIBI4UBVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, Pointer GLubytePtr1);
    };
    public interface PFNGLVERTEXATTRIBI4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLuint2, int GLuint3, int GLuint4, int GLuint5);
    };
    public interface PFNGLVERTEXATTRIBI4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, IntByReference GLuintPtr1);
    };
    public interface PFNGLVERTEXATTRIBI4USVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, ShortByReference GLushortPtr1);
    };
    public interface PFNGLVERTEXATTRIBIPOINTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1, int GLint1, int GLenum1, int GLsizei1, TestLibrary.GLvoid GLvoidPtr1);
    };
    public interface PFNGLDRAWARRAYSINSTANCEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLint1, int GLsizei1, int GLsizei2);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLsizei1, int GLenum2, TestLibrary.GLvoid GLvoidPtr1, int GLsizei2);
    };
    public interface PFNGLPRIMITIVERESTARTINDEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLuint1);
    };
    public interface PFNGLTEXBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, int GLuint1);
    };
    public interface PFNGLFRAMEBUFFERTEXTUREPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, int GLuint1, int GLint1);
    };
    public interface PFNGLGETBUFFERPARAMETERI64VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLenum2, LongByReference GLint64Ptr1);
    };
    public interface PFNGLGETINTEGER64I_VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int GLenum1, int GLuint1, LongByReference GLint64Ptr1);
    };
    public interface PFNGLVERTEXATTRIBDIVISORPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int divisor);
    };
    public interface PFNGLBLENDEQUATIONSEPARATEIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int modeRGB, int modeAlpha);
    };
    public interface PFNGLBLENDEQUATIONIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int mode);
    };
    public interface PFNGLBLENDFUNCSEPARATEIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
    };
    public interface PFNGLBLENDFUNCIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int src, int dst);
    };
    public interface PFNGLMINSAMPLESHADINGPROC extends StdCallLibrary.StdCallCallback {
        void apply(float value);
    };
    public interface PFNGLTBUFFERMASK3DFXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mask);
    };
    public interface GLDEBUGPROCAMD extends StdCallLibrary.StdCallCallback {
        void apply(int id, int category, int severity, int length, Pointer message, TestLibrary.GLvoid userParam);
    };
    public interface PFNGLDEBUGMESSAGECALLBACKAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(TestLibrary.GLDEBUGPROCAMD callback, TestLibrary.GLvoid userParam);
    };
    public interface PFNGLDEBUGMESSAGEENABLEAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int category, int severity, int count, IntByReference ids, byte enabled);
    };
    public interface PFNGLDEBUGMESSAGEINSERTAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int category, int severity, int id, int length, Pointer buf);
    };
    public interface PFNGLGETDEBUGMESSAGELOGAMDPROC extends StdCallLibrary.StdCallCallback {
        int apply(int count, int bufsize, IntByReference categories, IntByReference severities, IntByReference ids, IntByReference lengths, Pointer message);
    };
    public interface PFNGLBLENDEQUATIONINDEXEDAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int mode);
    };
    public interface PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int modeRGB, int modeAlpha);
    };
    public interface PFNGLBLENDFUNCINDEXEDAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int src, int dst);
    };
    public interface PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
    };
    public interface PFNGLVERTEXATTRIBPARAMETERIAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, int param);
    };
    public interface PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, TestLibrary.GLvoid indirect, int primcount, int stride);
    };
    public interface PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int type, TestLibrary.GLvoid indirect, int primcount, int stride);
    };
    public interface PFNGLDELETENAMESAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int identifier, int num, IntByReference names);
    };
    public interface PFNGLGENNAMESAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int identifier, int num, IntByReference names);
    };
    public interface PFNGLISNAMEAMDPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int identifier, int name);
    };
    public interface PFNGLBEGINPERFMONITORAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int monitor);
    };
    public interface PFNGLDELETEPERFMONITORSAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference monitors);
    };
    public interface PFNGLENDPERFMONITORAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int monitor);
    };
    public interface PFNGLGENPERFMONITORSAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference monitors);
    };
    public interface PFNGLGETPERFMONITORCOUNTERDATAAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int monitor, int pname, int dataSize, IntByReference data, IntByReference bytesWritten);
    };
    public interface PFNGLGETPERFMONITORCOUNTERINFOAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int group, int counter, int pname, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int group, int counter, int bufSize, IntByReference length, Pointer counterString);
    };
    public interface PFNGLGETPERFMONITORCOUNTERSAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int group, IntByReference numCounters, IntByReference maxActiveCounters, int countersSize, IntByReference counters);
    };
    public interface PFNGLGETPERFMONITORGROUPSTRINGAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int group, int bufSize, IntByReference length, Pointer groupString);
    };
    public interface PFNGLGETPERFMONITORGROUPSAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference numGroups, int groupsSize, IntByReference groups);
    };
    public interface PFNGLSELECTPERFMONITORCOUNTERSAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int monitor, byte enable, int group, int numCounters, IntByReference counterList);
    };
    public interface PFNGLSETMULTISAMPLEFVAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, FloatByReference val);
    };
    public interface PFNGLTEXSTORAGESPARSEAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalFormat, int width, int height, int depth, int layers, int flags);
    };
    public interface PFNGLTEXTURESTORAGESPARSEAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int internalFormat, int width, int height, int depth, int layers, int flags);
    };
    public interface PFNGLSTENCILOPVALUEAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int value);
    };
    public interface PFNGLTESSELLATIONFACTORAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(float factor);
    };
    public interface PFNGLTESSELLATIONMODEAMDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLBLITFRAMEBUFFERANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);
    };
    public interface PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height);
    };
    public interface PFNGLDRAWARRAYSINSTANCEDANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int first, int count, int primcount);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, TestLibrary.GLvoid indices, int primcount);
    };
    public interface PFNGLVERTEXATTRIBDIVISORANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int divisor);
    };
    public interface PFNGLBEGINQUERYANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id);
    };
    public interface PFNGLDELETEQUERIESANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLENDQUERYANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLGENQUERIESANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLGETQUERYOBJECTI64VANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, LongByReference params);
    };
    public interface PFNGLGETQUERYOBJECTIVANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETQUERYOBJECTUI64VANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, LongByReference params);
    };
    public interface PFNGLGETQUERYOBJECTUIVANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETQUERYIVANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLISQUERYANGLEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLQUERYCOUNTERANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int target);
    };
    public interface PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader, int bufsize, IntByReference length, Pointer source);
    };
    public interface PFNGLDRAWELEMENTARRAYAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int first, int count);
    };
    public interface PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int end, int first, int count);
    };
    public interface PFNGLELEMENTPOINTERAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, IntByReference first, IntByReference count, int primcount);
    };
    public interface PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int end, IntByReference first, IntByReference count, int primcount);
    };
    public interface PFNGLDELETEFENCESAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference fences);
    };
    public interface PFNGLFINISHFENCEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int fence);
    };
    public interface PFNGLFINISHOBJECTAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int object, int name);
    };
    public interface PFNGLGENFENCESAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference fences);
    };
    public interface PFNGLISFENCEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int fence);
    };
    public interface PFNGLSETFENCEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int fence);
    };
    public interface PFNGLTESTFENCEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int fence);
    };
    public interface PFNGLTESTOBJECTAPPLEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int object, int name);
    };
    public interface PFNGLBUFFERPARAMETERIAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize offset, NativeSize size);
    };
    public interface PFNGLGETOBJECTPARAMETERIVAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int objectType, int name, int pname, IntByReference params);
    };
    public interface PFNGLOBJECTPURGEABLEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        int apply(int objectType, int name, int option);
    };
    public interface PFNGLOBJECTUNPURGEABLEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        int apply(int objectType, int name, int option);
    };
    public interface PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, PointerByReference params);
    };
    public interface PFNGLTEXTURERANGEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int length, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLBINDVERTEXARRAYAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array);
    };
    public interface PFNGLDELETEVERTEXARRAYSAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference arrays);
    };
    public interface PFNGLGENVERTEXARRAYSAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference arrays);
    };
    public interface PFNGLISVERTEXARRAYAPPLEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int array);
    };
    public interface PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int length, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLVERTEXARRAYPARAMETERIAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLVERTEXARRAYRANGEAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int length, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLDISABLEVERTEXATTRIBAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname);
    };
    public interface PFNGLENABLEVERTEXATTRIBAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname);
    };
    public interface PFNGLISVERTEXATTRIBENABLEDAPPLEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int index, int pname);
    };
    public interface PFNGLMAPVERTEXATTRIB1DAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, double u1, double u2, int stride, int order, DoubleByReference points);
    };
    public interface PFNGLMAPVERTEXATTRIB1FAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, float u1, float u2, int stride, int order, FloatByReference points);
    };
    public interface PFNGLMAPVERTEXATTRIB2DAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, DoubleByReference points);
    };
    public interface PFNGLMAPVERTEXATTRIB2FAPPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, FloatByReference points);
    };
    public interface PFNGLCLEARDEPTHFPROC extends StdCallLibrary.StdCallCallback {
        void apply(float d);
    };
    public interface PFNGLDEPTHRANGEFPROC extends StdCallLibrary.StdCallCallback {
        void apply(float n, float f);
    };
    public interface PFNGLGETSHADERPRECISIONFORMATPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shadertype, int precisiontype, IntByReference range, IntByReference precision);
    };
    public interface PFNGLRELEASESHADERCOMPILERPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLSHADERBINARYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int count, IntByReference shaders, int binaryformat, TestLibrary.GLvoid binary, int length);
    };
    public interface PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int first, int count, int primcount, int baseinstance);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, TestLibrary.GLvoid indices, int primcount, int baseinstance);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, TestLibrary.GLvoid indices, int primcount, int basevertex, int baseinstance);
    };
    public interface PFNGLGETIMAGEHANDLEARBPROC extends StdCallLibrary.StdCallCallback {
        long apply(int texture, int level, byte layered, int layer, int format);
    };
    public interface PFNGLGETTEXTUREHANDLEARBPROC extends StdCallLibrary.StdCallCallback {
        long apply(int texture);
    };
    public interface PFNGLGETTEXTURESAMPLERHANDLEARBPROC extends StdCallLibrary.StdCallCallback {
        long apply(int texture, int sampler);
    };
    public interface PFNGLGETVERTEXATTRIBLUI64VARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, LongByReference params);
    };
    public interface PFNGLISIMAGEHANDLERESIDENTARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(long handle);
    };
    public interface PFNGLISTEXTUREHANDLERESIDENTARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(long handle);
    };
    public interface PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle);
    };
    public interface PFNGLMAKEIMAGEHANDLERESIDENTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle, int access);
    };
    public interface PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle);
    };
    public interface PFNGLMAKETEXTUREHANDLERESIDENTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle);
    };
    public interface PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long value);
    };
    public interface PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference values);
    };
    public interface PFNGLUNIFORMHANDLEUI64ARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long value);
    };
    public interface PFNGLUNIFORMHANDLEUI64VARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLVERTEXATTRIBL1UI64ARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x);
    };
    public interface PFNGLVERTEXATTRIBL1UI64VARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLBINDFRAGDATALOCATIONINDEXEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int colorNumber, int index, Pointer name);
    };
    public interface PFNGLGETFRAGDATAINDEXPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, Pointer name);
    };
    public interface PFNGLBUFFERSTORAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize size, TestLibrary.GLvoid data, int flags);
    };
    public interface PFNGLNAMEDBUFFERSTORAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, NativeSize size, TestLibrary.GLvoid data, int flags);
    };
    public interface PFNGLCREATESYNCFROMCLEVENTARBPROC extends StdCallLibrary.StdCallCallback {
        TestLibrary.GLsync apply(Pointer context, Pointer event, int flags);
    };
    public interface PFNGLCLEARBUFFERDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCLEARBUFFERSUBDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, NativeSize offset, NativeSize size, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCLEARNAMEDBUFFERDATAEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int internalformat, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int internalformat, NativeSize offset, NativeSize size, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCLEARTEXIMAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int level, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCLEARTEXSUBIMAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCLAMPCOLORARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int clamp);
    };
    public interface PFNGLDISPATCHCOMPUTEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int num_groups_x, int num_groups_y, int num_groups_z);
    };
    public interface PFNGLDISPATCHCOMPUTEINDIRECTPROC extends StdCallLibrary.StdCallCallback {
        void apply(NativeSize indirect);
    };
    public interface PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int num_groups_x, int num_groups_y, int num_groups_z, int group_size_x, int group_size_y, int group_size_z);
    };
    public interface PFNGLCOPYBUFFERSUBDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int readtarget, int writetarget, NativeSize readoffset, NativeSize writeoffset, NativeSize size);
    };
    public interface PFNGLCOPYIMAGESUBDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    };
    public interface GLDEBUGPROCARB extends StdCallLibrary.StdCallCallback {
        void apply(int source, int type, int id, int severity, int length, Pointer message, TestLibrary.GLvoid userParam);
    };
    public interface PFNGLDEBUGMESSAGECALLBACKARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(TestLibrary.GLDEBUGPROCARB callback, TestLibrary.GLvoid userParam);
    };
    public interface PFNGLDEBUGMESSAGECONTROLARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int source, int type, int severity, int count, IntByReference ids, byte enabled);
    };
    public interface PFNGLDEBUGMESSAGEINSERTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int source, int type, int id, int severity, int length, Pointer buf);
    };
    public interface PFNGLGETDEBUGMESSAGELOGARBPROC extends StdCallLibrary.StdCallCallback {
        int apply(int count, int bufsize, IntByReference sources, IntByReference types, IntByReference ids, IntByReference severities, IntByReference lengths, Pointer messageLog);
    };
    public interface PFNGLDRAWBUFFERSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference bufs);
    };
    public interface PFNGLBLENDEQUATIONSEPARATEIARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int modeRGB, int modeAlpha);
    };
    public interface PFNGLBLENDEQUATIONIARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int mode);
    };
    public interface PFNGLBLENDFUNCSEPARATEIARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
    };
    public interface PFNGLBLENDFUNCIARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, int src, int dst);
    };
    public interface PFNGLDRAWELEMENTSBASEVERTEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, TestLibrary.GLvoid indices, int basevertex);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, TestLibrary.GLvoid indices, int primcount, int basevertex);
    };
    public interface PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int end, int count, int type, TestLibrary.GLvoid indices, int basevertex);
    };
    public interface PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, IntByReference count, int type, PointerByReference indices, int primcount, IntByReference basevertex);
    };
    public interface PFNGLDRAWARRAYSINDIRECTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, TestLibrary.GLvoid indirect);
    };
    public interface PFNGLDRAWELEMENTSINDIRECTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int type, TestLibrary.GLvoid indirect);
    };
    public interface PFNGLFRAMEBUFFERPARAMETERIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLGETFRAMEBUFFERPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int pname, IntByReference params);
    };
    public interface PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int pname, int param);
    };
    public interface PFNGLBINDFRAMEBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int framebuffer);
    };
    public interface PFNGLBINDRENDERBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int renderbuffer);
    };
    public interface PFNGLBLITFRAMEBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);
    };
    public interface PFNGLCHECKFRAMEBUFFERSTATUSPROC extends StdCallLibrary.StdCallCallback {
        int apply(int target);
    };
    public interface PFNGLDELETEFRAMEBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference framebuffers);
    };
    public interface PFNGLDELETERENDERBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference renderbuffers);
    };
    public interface PFNGLFRAMEBUFFERRENDERBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int renderbuffertarget, int renderbuffer);
    };
    public interface PFNGLFRAMEBUFFERTEXTURE1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int textarget, int texture, int level);
    };
    public interface PFNGLFRAMEBUFFERTEXTURE2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int textarget, int texture, int level);
    };
    public interface PFNGLFRAMEBUFFERTEXTURE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int textarget, int texture, int level, int layer);
    };
    public interface PFNGLFRAMEBUFFERTEXTURELAYERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level, int layer);
    };
    public interface PFNGLGENFRAMEBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference framebuffers);
    };
    public interface PFNGLGENRENDERBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference renderbuffers);
    };
    public interface PFNGLGENERATEMIPMAPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int pname, IntByReference params);
    };
    public interface PFNGLGETRENDERBUFFERPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLISFRAMEBUFFERPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int framebuffer);
    };
    public interface PFNGLISRENDERBUFFERPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int renderbuffer);
    };
    public interface PFNGLRENDERBUFFERSTORAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int height);
    };
    public interface PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height);
    };
    public interface PFNGLFRAMEBUFFERTEXTUREARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level);
    };
    public interface PFNGLFRAMEBUFFERTEXTUREFACEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level, int face);
    };
    public interface PFNGLFRAMEBUFFERTEXTURELAYERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level, int layer);
    };
    public interface PFNGLPROGRAMPARAMETERIARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int pname, int value);
    };
    public interface PFNGLGETPROGRAMBINARYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int bufSize, IntByReference length, IntByReference binaryFormat, TestLibrary.GLvoid binary);
    };
    public interface PFNGLPROGRAMBINARYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int binaryFormat, TestLibrary.GLvoid binary, int length);
    };
    public interface PFNGLPROGRAMPARAMETERIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int pname, int value);
    };
    public interface PFNGLGETUNIFORMDVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, DoubleByReference params);
    };
    public interface PFNGLUNIFORM1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, double x);
    };
    public interface PFNGLUNIFORM1DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, DoubleByReference value);
    };
    public interface PFNGLUNIFORM2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, double x, double y);
    };
    public interface PFNGLUNIFORM2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, DoubleByReference value);
    };
    public interface PFNGLUNIFORM3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, double x, double y, double z);
    };
    public interface PFNGLUNIFORM3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, DoubleByReference value);
    };
    public interface PFNGLUNIFORM4DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, double x, double y, double z, double w);
    };
    public interface PFNGLUNIFORM4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX2X3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX2X4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3X2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3X4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4X2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4X3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLCOLORSUBTABLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int start, int count, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOLORTABLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int format, int type, TestLibrary.GLvoid table);
    };
    public interface PFNGLCOLORTABLEPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLCOLORTABLEPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLCONVOLUTIONFILTER1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int format, int type, TestLibrary.GLvoid image);
    };
    public interface PFNGLCONVOLUTIONFILTER2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int height, int format, int type, TestLibrary.GLvoid image);
    };
    public interface PFNGLCONVOLUTIONPARAMETERFPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, float params);
    };
    public interface PFNGLCONVOLUTIONPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLCONVOLUTIONPARAMETERIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int params);
    };
    public interface PFNGLCONVOLUTIONPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLCOPYCOLORSUBTABLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int start, int x, int y, int width);
    };
    public interface PFNGLCOPYCOLORTABLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int x, int y, int width);
    };
    public interface PFNGLCOPYCONVOLUTIONFILTER1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int x, int y, int width);
    };
    public interface PFNGLCOPYCONVOLUTIONFILTER2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int x, int y, int width, int height);
    };
    public interface PFNGLGETCOLORTABLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid table);
    };
    public interface PFNGLGETCOLORTABLEPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETCOLORTABLEPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETCONVOLUTIONFILTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid image);
    };
    public interface PFNGLGETCONVOLUTIONPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETCONVOLUTIONPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETHISTOGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, byte reset, int format, int type, TestLibrary.GLvoid values);
    };
    public interface PFNGLGETHISTOGRAMPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETHISTOGRAMPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETMINMAXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, byte reset, int format, int types, TestLibrary.GLvoid values);
    };
    public interface PFNGLGETMINMAXPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETMINMAXPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETSEPARABLEFILTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid row, TestLibrary.GLvoid column, TestLibrary.GLvoid span);
    };
    public interface PFNGLHISTOGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int width, int internalformat, byte sink);
    };
    public interface PFNGLMINMAXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, byte sink);
    };
    public interface PFNGLRESETHISTOGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLRESETMINMAXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLSEPARABLEFILTER2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int height, int format, int type, TestLibrary.GLvoid row, TestLibrary.GLvoid column);
    };
    public interface PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, TestLibrary.GLvoid indirect, NativeSize drawcount, int maxdrawcount, int stride);
    };
    public interface PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int type, TestLibrary.GLvoid indirect, NativeSize drawcount, int maxdrawcount, int stride);
    };
    public interface PFNGLDRAWARRAYSINSTANCEDARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int first, int count, int primcount);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, Pointer indices, int primcount);
    };
    public interface PFNGLVERTEXATTRIBDIVISORARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int divisor);
    };
    public interface PFNGLGETINTERNALFORMATIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int pname, int bufSize, IntByReference params);
    };
    public interface PFNGLGETINTERNALFORMATI64VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int pname, int bufSize, LongByReference params);
    };
    public interface PFNGLINVALIDATEBUFFERDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer);
    };
    public interface PFNGLINVALIDATEBUFFERSUBDATAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, NativeSize offset, NativeSize length);
    };
    public interface PFNGLINVALIDATEFRAMEBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int numAttachments, IntByReference attachments);
    };
    public interface PFNGLINVALIDATESUBFRAMEBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int numAttachments, IntByReference attachments, int x, int y, int width, int height);
    };
    public interface PFNGLINVALIDATETEXIMAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int level);
    };
    public interface PFNGLINVALIDATETEXSUBIMAGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
    };
    public interface PFNGLFLUSHMAPPEDBUFFERRANGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize offset, NativeSize length);
    };
    public interface PFNGLMAPBUFFERRANGEPROC extends Callback {
        TestLibrary.GLvoid apply(int target, NativeSize offset, NativeSize length, int access);
    };
    public interface PFNGLCURRENTPALETTEMATRIXARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index);
    };
    public interface PFNGLMATRIXINDEXPOINTERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLMATRIXINDEXUBVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, Pointer indices);
    };
    public interface PFNGLMATRIXINDEXUIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, IntByReference indices);
    };
    public interface PFNGLMATRIXINDEXUSVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, ShortByReference indices);
    };
    public interface PFNGLBINDBUFFERSBASEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int first, int count, IntByReference buffers);
    };
    public interface PFNGLBINDBUFFERSRANGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int first, int count, IntByReference buffers, NativeSizeByReference offsets, NativeSizeByReference sizes);
    };
    public interface PFNGLBINDIMAGETEXTURESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, IntByReference textures);
    };
    public interface PFNGLBINDSAMPLERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, IntByReference samplers);
    };
    public interface PFNGLBINDTEXTURESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, IntByReference textures);
    };
    public interface PFNGLBINDVERTEXBUFFERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, IntByReference buffers, NativeSizeByReference offsets, IntByReference strides);
    };
    public interface PFNGLMULTIDRAWARRAYSINDIRECTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, TestLibrary.GLvoid indirect, int primcount, int stride);
    };
    public interface PFNGLMULTIDRAWELEMENTSINDIRECTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int type, TestLibrary.GLvoid indirect, int primcount, int stride);
    };
    public interface PFNGLSAMPLECOVERAGEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(float value, byte invert);
    };
    public interface PFNGLACTIVETEXTUREARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture);
    };
    public interface PFNGLCLIENTACTIVETEXTUREARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture);
    };
    public interface PFNGLMULTITEXCOORD1DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s);
    };
    public interface PFNGLMULTITEXCOORD1DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD1FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s);
    };
    public interface PFNGLMULTITEXCOORD1FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD1IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s);
    };
    public interface PFNGLMULTITEXCOORD1IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD1SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s);
    };
    public interface PFNGLMULTITEXCOORD1SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD2DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s, double t);
    };
    public interface PFNGLMULTITEXCOORD2DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD2FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s, float t);
    };
    public interface PFNGLMULTITEXCOORD2FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD2IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t);
    };
    public interface PFNGLMULTITEXCOORD2IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD2SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t);
    };
    public interface PFNGLMULTITEXCOORD2SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD3DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s, double t, double r);
    };
    public interface PFNGLMULTITEXCOORD3DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD3FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s, float t, float r);
    };
    public interface PFNGLMULTITEXCOORD3FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD3IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t, int r);
    };
    public interface PFNGLMULTITEXCOORD3IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD3SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t, short r);
    };
    public interface PFNGLMULTITEXCOORD3SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD4DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, double s, double t, double r, double q);
    };
    public interface PFNGLMULTITEXCOORD4DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, DoubleByReference v);
    };
    public interface PFNGLMULTITEXCOORD4FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float s, float t, float r, float q);
    };
    public interface PFNGLMULTITEXCOORD4FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference v);
    };
    public interface PFNGLMULTITEXCOORD4IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t, int r, int q);
    };
    public interface PFNGLMULTITEXCOORD4IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, IntByReference v);
    };
    public interface PFNGLMULTITEXCOORD4SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t, short r, short q);
    };
    public interface PFNGLMULTITEXCOORD4SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLBEGINQUERYARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id);
    };
    public interface PFNGLDELETEQUERIESARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLENDQUERYARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLGENQUERIESARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLGETQUERYOBJECTIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETQUERYOBJECTUIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETQUERYIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLISQUERYARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLPOINTPARAMETERFARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLPOINTPARAMETERFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLGETPROGRAMINTERFACEIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int programInterface, int pname, IntByReference params);
    };
    public interface PFNGLGETPROGRAMRESOURCEINDEXPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, int programInterface, Pointer name);
    };
    public interface PFNGLGETPROGRAMRESOURCELOCATIONPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, int programInterface, Pointer name);
    };
    public interface PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, int programInterface, Pointer name);
    };
    public interface PFNGLGETPROGRAMRESOURCENAMEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int programInterface, int index, int bufSize, IntByReference length, Pointer name);
    };
    public interface PFNGLGETPROGRAMRESOURCEIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int programInterface, int index, int propCount, IntByReference props, int bufSize, IntByReference length, IntByReference params);
    };
    public interface PFNGLPROVOKINGVERTEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLGETGRAPHICSRESETSTATUSARBPROC extends StdCallLibrary.StdCallCallback {
        int apply();
    };
    public interface PFNGLGETNCOLORTABLEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, int bufSize, Pointer table);
    };
    public interface PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int lod, int bufSize, Pointer img);
    };
    public interface PFNGLGETNCONVOLUTIONFILTERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, int bufSize, Pointer image);
    };
    public interface PFNGLGETNHISTOGRAMARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, byte reset, int format, int type, int bufSize, Pointer values);
    };
    public interface PFNGLGETNMAPDVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int query, int bufSize, DoubleByReference v);
    };
    public interface PFNGLGETNMAPFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int query, int bufSize, FloatByReference v);
    };
    public interface PFNGLGETNMAPIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int query, int bufSize, IntByReference v);
    };
    public interface PFNGLGETNMINMAXARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, byte reset, int format, int type, int bufSize, Pointer values);
    };
    public interface PFNGLGETNPIXELMAPFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int map, int bufSize, FloatByReference values);
    };
    public interface PFNGLGETNPIXELMAPUIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int map, int bufSize, IntByReference values);
    };
    public interface PFNGLGETNPIXELMAPUSVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int map, int bufSize, ShortByReference values);
    };
    public interface PFNGLGETNPOLYGONSTIPPLEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int bufSize, Pointer pattern);
    };
    public interface PFNGLGETNSEPARABLEFILTERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, int rowBufSize, Pointer row, int columnBufSize, TestLibrary.GLvoid column, TestLibrary.GLvoid span);
    };
    public interface PFNGLGETNTEXIMAGEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int format, int type, int bufSize, Pointer img);
    };
    public interface PFNGLGETNUNIFORMDVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int bufSize, DoubleByReference params);
    };
    public interface PFNGLGETNUNIFORMFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int bufSize, FloatByReference params);
    };
    public interface PFNGLGETNUNIFORMIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int bufSize, IntByReference params);
    };
    public interface PFNGLGETNUNIFORMUIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int bufSize, IntByReference params);
    };
    public interface PFNGLREADNPIXELSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int width, int height, int format, int type, int bufSize, Pointer data);
    };
    public interface PFNGLMINSAMPLESHADINGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(float value);
    };
    public interface PFNGLBINDSAMPLERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int unit, int sampler);
    };
    public interface PFNGLDELETESAMPLERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int count, IntByReference samplers);
    };
    public interface PFNGLGENSAMPLERSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int count, IntByReference samplers);
    };
    public interface PFNGLGETSAMPLERPARAMETERIIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, IntByReference params);
    };
    public interface PFNGLGETSAMPLERPARAMETERIUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, IntByReference params);
    };
    public interface PFNGLGETSAMPLERPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, FloatByReference params);
    };
    public interface PFNGLGETSAMPLERPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, IntByReference params);
    };
    public interface PFNGLISSAMPLERPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int sampler);
    };
    public interface PFNGLSAMPLERPARAMETERIIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, IntByReference params);
    };
    public interface PFNGLSAMPLERPARAMETERIUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, IntByReference params);
    };
    public interface PFNGLSAMPLERPARAMETERFPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, float param);
    };
    public interface PFNGLSAMPLERPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, FloatByReference params);
    };
    public interface PFNGLSAMPLERPARAMETERIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, int param);
    };
    public interface PFNGLSAMPLERPARAMETERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sampler, int pname, IntByReference params);
    };
    public interface PFNGLACTIVESHADERPROGRAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pipeline, int program);
    };
    public interface PFNGLBINDPROGRAMPIPELINEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pipeline);
    };
    public interface PFNGLCREATESHADERPROGRAMVPROC extends StdCallLibrary.StdCallCallback {
        int apply(int type, int count, PointerByReference strings);
    };
    public interface PFNGLDELETEPROGRAMPIPELINESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference pipelines);
    };
    public interface PFNGLGENPROGRAMPIPELINESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference pipelines);
    };
    public interface PFNGLGETPROGRAMPIPELINEINFOLOGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pipeline, int bufSize, IntByReference length, Pointer infoLog);
    };
    public interface PFNGLGETPROGRAMPIPELINEIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pipeline, int pname, IntByReference params);
    };
    public interface PFNGLISPROGRAMPIPELINEPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int pipeline);
    };
    public interface PFNGLPROGRAMUNIFORM1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, double x);
    };
    public interface PFNGLPROGRAMUNIFORM1DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM1FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float x);
    };
    public interface PFNGLPROGRAMUNIFORM1FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM1IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x);
    };
    public interface PFNGLPROGRAMUNIFORM1IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM1UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x);
    };
    public interface PFNGLPROGRAMUNIFORM1UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, double x, double y);
    };
    public interface PFNGLPROGRAMUNIFORM2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float x, float y);
    };
    public interface PFNGLPROGRAMUNIFORM2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x, int y);
    };
    public interface PFNGLPROGRAMUNIFORM2IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x, int y);
    };
    public interface PFNGLPROGRAMUNIFORM2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, double x, double y, double z);
    };
    public interface PFNGLPROGRAMUNIFORM3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float x, float y, float z);
    };
    public interface PFNGLPROGRAMUNIFORM3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x, int y, int z);
    };
    public interface PFNGLPROGRAMUNIFORM3IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x, int y, int z);
    };
    public interface PFNGLPROGRAMUNIFORM3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, double x, double y, double z, double w);
    };
    public interface PFNGLPROGRAMUNIFORM4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4FPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float x, float y, float z, float w);
    };
    public interface PFNGLPROGRAMUNIFORM4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4IPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x, int y, int z, int w);
    };
    public interface PFNGLPROGRAMUNIFORM4IVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int x, int y, int z, int w);
    };
    public interface PFNGLPROGRAMUNIFORM4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, DoubleByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUSEPROGRAMSTAGESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pipeline, int stages, int program);
    };
    public interface PFNGLVALIDATEPROGRAMPIPELINEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pipeline);
    };
    public interface PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int bufferIndex, int pname, IntByReference params);
    };
    public interface PFNGLBINDIMAGETEXTUREPROC extends StdCallLibrary.StdCallCallback {
        void apply(int unit, int texture, int level, byte layered, int layer, int access, int format);
    };
    public interface PFNGLMEMORYBARRIERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int barriers);
    };
    public interface PFNGLATTACHOBJECTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int containerObj, int obj);
    };
    public interface PFNGLCOMPILESHADERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shaderObj);
    };
    public interface PFNGLCREATEPROGRAMOBJECTARBPROC extends StdCallLibrary.StdCallCallback {
        int apply();
    };
    public interface PFNGLCREATESHADEROBJECTARBPROC extends StdCallLibrary.StdCallCallback {
        int apply(int shaderType);
    };
    public interface PFNGLDELETEOBJECTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int obj);
    };
    public interface PFNGLDETACHOBJECTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int containerObj, int attachedObj);
    };
    public interface PFNGLGETACTIVEUNIFORMARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj, int index, int maxLength, IntByReference length, IntByReference size, IntByReference type, Pointer name);
    };
    public interface PFNGLGETATTACHEDOBJECTSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int containerObj, int maxCount, IntByReference count, IntByReference obj);
    };
    public interface PFNGLGETHANDLEARBPROC extends StdCallLibrary.StdCallCallback {
        int apply(int pname);
    };
    public interface PFNGLGETINFOLOGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int obj, int maxLength, IntByReference length, Pointer infoLog);
    };
    public interface PFNGLGETOBJECTPARAMETERFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int obj, int pname, FloatByReference params);
    };
    public interface PFNGLGETOBJECTPARAMETERIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int obj, int pname, IntByReference params);
    };
    public interface PFNGLGETSHADERSOURCEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int obj, int maxLength, IntByReference length, Pointer source);
    };
    public interface PFNGLGETUNIFORMLOCATIONARBPROC extends StdCallLibrary.StdCallCallback {
        int apply(int programObj, Pointer name);
    };
    public interface PFNGLGETUNIFORMFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj, int location, FloatByReference params);
    };
    public interface PFNGLGETUNIFORMIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj, int location, IntByReference params);
    };
    public interface PFNGLLINKPROGRAMARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj);
    };
    public interface PFNGLSHADERSOURCEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shaderObj, int count, PointerByReference string, IntByReference length);
    };
    public interface PFNGLUNIFORM1FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0);
    };
    public interface PFNGLUNIFORM1FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM1IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0);
    };
    public interface PFNGLUNIFORM1IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM2FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0, float v1);
    };
    public interface PFNGLUNIFORM2FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM2IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1);
    };
    public interface PFNGLUNIFORM2IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM3FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0, float v1, float v2);
    };
    public interface PFNGLUNIFORM3FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM3IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1, int v2);
    };
    public interface PFNGLUNIFORM3IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM4FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, float v0, float v1, float v2, float v3);
    };
    public interface PFNGLUNIFORM4FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, FloatByReference value);
    };
    public interface PFNGLUNIFORM4IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1, int v2, int v3);
    };
    public interface PFNGLUNIFORM4IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORMMATRIX2FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX3FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUNIFORMMATRIX4FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLUSEPROGRAMOBJECTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj);
    };
    public interface PFNGLVALIDATEPROGRAMARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj);
    };
    public interface PFNGLSHADERSTORAGEBLOCKBINDINGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int storageBlockIndex, int storageBlockBinding);
    };
    public interface PFNGLGETACTIVESUBROUTINENAMEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int shadertype, int index, int bufsize, IntByReference length, Pointer name);
    };
    public interface PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int shadertype, int index, int bufsize, IntByReference length, Pointer name);
    };
    public interface PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int shadertype, int index, int pname, IntByReference values);
    };
    public interface PFNGLGETPROGRAMSTAGEIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int shadertype, int pname, IntByReference values);
    };
    public interface PFNGLGETSUBROUTINEINDEXPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, int shadertype, Pointer name);
    };
    public interface PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, int shadertype, Pointer name);
    };
    public interface PFNGLGETUNIFORMSUBROUTINEUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shadertype, int location, IntByReference params);
    };
    public interface PFNGLUNIFORMSUBROUTINESUIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shadertype, int count, IntByReference indices);
    };
    public interface PFNGLCOMPILESHADERINCLUDEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int shader, int count, PointerByReference path, IntByReference length);
    };
    public interface PFNGLDELETENAMEDSTRINGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int namelen, Pointer name);
    };
    public interface PFNGLGETNAMEDSTRINGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int namelen, Pointer name, int bufSize, IntByReference stringlen, Pointer string);
    };
    public interface PFNGLGETNAMEDSTRINGIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int namelen, Pointer name, int pname, IntByReference params);
    };
    public interface PFNGLISNAMEDSTRINGARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int namelen, Pointer name);
    };
    public interface PFNGLNAMEDSTRINGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int namelen, Pointer name, int stringlen, Pointer string);
    };
    public interface PFNGLTEXPAGECOMMITMENTARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit);
    };
    public interface PFNGLTEXTUREPAGECOMMITMENTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit);
    };
    public interface PFNGLCLIENTWAITSYNCPROC extends StdCallLibrary.StdCallCallback {
        int apply(Pointer GLsync, int flags, long timeout);
    };
    public interface PFNGLDELETESYNCPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer GLsync);
    };
    public interface PFNGLFENCESYNCPROC extends StdCallLibrary.StdCallCallback {
        TestLibrary.GLsync apply(int condition, int flags);
    };
    public interface PFNGLGETINTEGER64VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, LongByReference params);
    };
    public interface PFNGLGETSYNCIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer GLsync, int pname, int bufSize, IntByReference length, IntByReference values);
    };
    public interface PFNGLISSYNCPROC extends StdCallLibrary.StdCallCallback {
        byte apply(Pointer GLsync);
    };
    public interface PFNGLWAITSYNCPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer GLsync, int flags, long timeout);
    };
    public interface PFNGLPATCHPARAMETERFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference values);
    };
    public interface PFNGLPATCHPARAMETERIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int value);
    };
    public interface PFNGLTEXBUFFERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int buffer);
    };
    public interface PFNGLTEXBUFFERRANGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int buffer, NativeSize offset, NativeSize size);
    };
    public interface PFNGLTEXTUREBUFFERRANGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int internalformat, int buffer, NativeSize offset, NativeSize size);
    };
    public interface PFNGLCOMPRESSEDTEXIMAGE1DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXIMAGE2DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int height, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXIMAGE3DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int width, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETCOMPRESSEDTEXIMAGEARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int lod, TestLibrary.GLvoid img);
    };
    public interface PFNGLGETMULTISAMPLEFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, FloatByReference val);
    };
    public interface PFNGLSAMPLEMASKIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int mask);
    };
    public interface PFNGLTEXIMAGE2DMULTISAMPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height, byte fixedsamplelocations);
    };
    public interface PFNGLTEXIMAGE3DMULTISAMPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height, int depth, byte fixedsamplelocations);
    };
    public interface PFNGLTEXSTORAGE1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int levels, int internalformat, int width);
    };
    public interface PFNGLTEXSTORAGE2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int levels, int internalformat, int width, int height);
    };
    public interface PFNGLTEXSTORAGE3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int levels, int internalformat, int width, int height, int depth);
    };
    public interface PFNGLTEXTURESTORAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int levels, int internalformat, int width);
    };
    public interface PFNGLTEXTURESTORAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int levels, int internalformat, int width, int height);
    };
    public interface PFNGLTEXTURESTORAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int levels, int internalformat, int width, int height, int depth);
    };
    public interface PFNGLTEXSTORAGE2DMULTISAMPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height, byte fixedsamplelocations);
    };
    public interface PFNGLTEXSTORAGE3DMULTISAMPLEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height, int depth, byte fixedsamplelocations);
    };
    public interface PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int samples, int internalformat, int width, int height, byte fixedsamplelocations);
    };
    public interface PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int samples, int internalformat, int width, int height, int depth, byte fixedsamplelocations);
    };
    public interface PFNGLTEXTUREVIEWPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers);
    };
    public interface PFNGLGETQUERYOBJECTI64VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, LongByReference params);
    };
    public interface PFNGLGETQUERYOBJECTUI64VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, LongByReference params);
    };
    public interface PFNGLQUERYCOUNTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int target);
    };
    public interface PFNGLBINDTRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id);
    };
    public interface PFNGLDELETETRANSFORMFEEDBACKSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLDRAWTRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int id);
    };
    public interface PFNGLGENTRANSFORMFEEDBACKSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLISTRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLPAUSETRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLRESUMETRANSFORMFEEDBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLBEGINQUERYINDEXEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int id);
    };
    public interface PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int id, int stream);
    };
    public interface PFNGLENDQUERYINDEXEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index);
    };
    public interface PFNGLGETQUERYINDEXEDIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int pname, IntByReference params);
    };
    public interface PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int id, int primcount);
    };
    public interface PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int id, int stream, int primcount);
    };
    public interface PFNGLLOADTRANSPOSEMATRIXDARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference m);
    };
    public interface PFNGLLOADTRANSPOSEMATRIXFARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference m);
    };
    public interface PFNGLMULTTRANSPOSEMATRIXDARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference m);
    };
    public interface PFNGLMULTTRANSPOSEMATRIXFARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference m);
    };
    public interface PFNGLBINDBUFFERBASEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer);
    };
    public interface PFNGLBINDBUFFERRANGEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer, NativeSize offset, NativeSize size);
    };
    public interface PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int uniformBlockIndex, int bufSize, IntByReference length, Pointer uniformBlockName);
    };
    public interface PFNGLGETACTIVEUNIFORMBLOCKIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int uniformBlockIndex, int pname, IntByReference params);
    };
    public interface PFNGLGETACTIVEUNIFORMNAMEPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int uniformIndex, int bufSize, IntByReference length, Pointer uniformName);
    };
    public interface PFNGLGETACTIVEUNIFORMSIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int uniformCount, IntByReference uniformIndices, int pname, IntByReference params);
    };
    public interface PFNGLGETINTEGERI_VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, IntByReference data);
    };
    public interface PFNGLGETUNIFORMBLOCKINDEXPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, Pointer uniformBlockName);
    };
    public interface PFNGLGETUNIFORMINDICESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int uniformCount, PointerByReference uniformNames, IntByReference uniformIndices);
    };
    public interface PFNGLUNIFORMBLOCKBINDINGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int uniformBlockIndex, int uniformBlockBinding);
    };
    public interface PFNGLBINDVERTEXARRAYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array);
    };
    public interface PFNGLDELETEVERTEXARRAYSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference arrays);
    };
    public interface PFNGLGENVERTEXARRAYSPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference arrays);
    };
    public interface PFNGLISVERTEXARRAYPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int array);
    };
    public interface PFNGLGETVERTEXATTRIBLDVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, DoubleByReference params);
    };
    public interface PFNGLVERTEXATTRIBL1DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x);
    };
    public interface PFNGLVERTEXATTRIBL1DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBL2DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y);
    };
    public interface PFNGLVERTEXATTRIBL2DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBL3DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z);
    };
    public interface PFNGLVERTEXATTRIBL3DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBL4DPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z, double w);
    };
    public interface PFNGLVERTEXATTRIBL4DVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBLPOINTERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, int stride, Pointer pointer);
    };
    public interface PFNGLBINDVERTEXBUFFERPROC extends StdCallLibrary.StdCallCallback {
        void apply(int bindingindex, int buffer, NativeSize offset, int stride);
    };
    public interface PFNGLVERTEXATTRIBBINDINGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int attribindex, int bindingindex);
    };
    public interface PFNGLVERTEXATTRIBFORMATPROC extends StdCallLibrary.StdCallCallback {
        void apply(int attribindex, int size, int type, byte normalized, int relativeoffset);
    };
    public interface PFNGLVERTEXATTRIBIFORMATPROC extends StdCallLibrary.StdCallCallback {
        void apply(int attribindex, int size, int type, int relativeoffset);
    };
    public interface PFNGLVERTEXATTRIBLFORMATPROC extends StdCallLibrary.StdCallCallback {
        void apply(int attribindex, int size, int type, int relativeoffset);
    };
    public interface PFNGLVERTEXBINDINGDIVISORPROC extends StdCallLibrary.StdCallCallback {
        void apply(int bindingindex, int divisor);
    };
    public interface PFNGLVERTEXBLENDARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int count);
    };
    public interface PFNGLWEIGHTPOINTERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLWEIGHTBVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, Pointer weights);
    };
    public interface PFNGLWEIGHTDVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, DoubleByReference weights);
    };
    public interface PFNGLWEIGHTFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, FloatByReference weights);
    };
    public interface PFNGLWEIGHTIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, IntByReference weights);
    };
    public interface PFNGLWEIGHTSVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, ShortByReference weights);
    };
    public interface PFNGLWEIGHTUBVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, Pointer weights);
    };
    public interface PFNGLWEIGHTUIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, IntByReference weights);
    };
    public interface PFNGLWEIGHTUSVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, ShortByReference weights);
    };
    public interface PFNGLBINDBUFFERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int buffer);
    };
    public interface PFNGLBUFFERDATAARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize size, TestLibrary.GLvoid data, int usage);
    };
    public interface PFNGLBUFFERSUBDATAARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize offset, NativeSize size, TestLibrary.GLvoid data);
    };
    public interface PFNGLDELETEBUFFERSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference buffers);
    };
    public interface PFNGLGENBUFFERSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference buffers);
    };
    public interface PFNGLGETBUFFERPARAMETERIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETBUFFERPOINTERVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, PointerByReference params);
    };
    public interface PFNGLGETBUFFERSUBDATAARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, NativeSize offset, NativeSize size, TestLibrary.GLvoid data);
    };
    public interface PFNGLISBUFFERARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int buffer);
    };
    public interface PFNGLMAPBUFFERARBPROC extends Callback {
        TestLibrary.GLvoid apply(int target, int access);
    };
    public interface PFNGLUNMAPBUFFERARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int target);
    };
    public interface PFNGLBINDPROGRAMARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int program);
    };
    public interface PFNGLDELETEPROGRAMSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference programs);
    };
    public interface PFNGLDISABLEVERTEXATTRIBARRAYARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index);
    };
    public interface PFNGLENABLEVERTEXATTRIBARRAYARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index);
    };
    public interface PFNGLGENPROGRAMSARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference programs);
    };
    public interface PFNGLGETPROGRAMENVPARAMETERDVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference params);
    };
    public interface PFNGLGETPROGRAMENVPARAMETERFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference params);
    };
    public interface PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference params);
    };
    public interface PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference params);
    };
    public interface PFNGLGETPROGRAMSTRINGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, TestLibrary.GLvoid string);
    };
    public interface PFNGLGETPROGRAMIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBPOINTERVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, PointerByReference pointer);
    };
    public interface PFNGLGETVERTEXATTRIBDVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, DoubleByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBFVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, FloatByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, IntByReference params);
    };
    public interface PFNGLISPROGRAMARBPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int program);
    };
    public interface PFNGLPROGRAMENVPARAMETER4DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, double x, double y, double z, double w);
    };
    public interface PFNGLPROGRAMENVPARAMETER4DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference params);
    };
    public interface PFNGLPROGRAMENVPARAMETER4FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, float x, float y, float z, float w);
    };
    public interface PFNGLPROGRAMENVPARAMETER4FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETER4DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, double x, double y, double z, double w);
    };
    public interface PFNGLPROGRAMLOCALPARAMETER4DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETER4FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, float x, float y, float z, float w);
    };
    public interface PFNGLPROGRAMLOCALPARAMETER4FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference params);
    };
    public interface PFNGLPROGRAMSTRINGARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int len, TestLibrary.GLvoid string);
    };
    public interface PFNGLVERTEXATTRIB1DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x);
    };
    public interface PFNGLVERTEXATTRIB1DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB1FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x);
    };
    public interface PFNGLVERTEXATTRIB1FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB1SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x);
    };
    public interface PFNGLVERTEXATTRIB1SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB2DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y);
    };
    public interface PFNGLVERTEXATTRIB2DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB2FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y);
    };
    public interface PFNGLVERTEXATTRIB2FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB2SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y);
    };
    public interface PFNGLVERTEXATTRIB2SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB3DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z);
    };
    public interface PFNGLVERTEXATTRIB3DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB3FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float z);
    };
    public interface PFNGLVERTEXATTRIB3FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB3SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z);
    };
    public interface PFNGLVERTEXATTRIB3SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NBVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4NIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NSVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NUBARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, byte x, byte y, byte z, byte w);
    };
    public interface PFNGLVERTEXATTRIB4NUBVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4NUIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4NUSVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4BVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z, double w);
    };
    public interface PFNGLVERTEXATTRIB4DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB4FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float z, float w);
    };
    public interface PFNGLVERTEXATTRIB4FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB4IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z, short w);
    };
    public interface PFNGLVERTEXATTRIB4SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4UBVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIB4UIVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIB4USVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBPOINTERARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, byte normalized, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLBINDATTRIBLOCATIONARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj, int index, Pointer name);
    };
    public interface PFNGLGETACTIVEATTRIBARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int programObj, int index, int maxLength, IntByReference length, IntByReference size, IntByReference type, Pointer name);
    };
    public interface PFNGLGETATTRIBLOCATIONARBPROC extends StdCallLibrary.StdCallCallback {
        int apply(int programObj, Pointer name);
    };
    public interface PFNGLCOLORP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int color);
    };
    public interface PFNGLCOLORP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference color);
    };
    public interface PFNGLCOLORP4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int color);
    };
    public interface PFNGLCOLORP4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference color);
    };
    public interface PFNGLMULTITEXCOORDP1UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, int coords);
    };
    public interface PFNGLMULTITEXCOORDP1UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, IntByReference coords);
    };
    public interface PFNGLMULTITEXCOORDP2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, int coords);
    };
    public interface PFNGLMULTITEXCOORDP2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, IntByReference coords);
    };
    public interface PFNGLMULTITEXCOORDP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, int coords);
    };
    public interface PFNGLMULTITEXCOORDP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, IntByReference coords);
    };
    public interface PFNGLMULTITEXCOORDP4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, int coords);
    };
    public interface PFNGLMULTITEXCOORDP4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int type, IntByReference coords);
    };
    public interface PFNGLNORMALP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int coords);
    };
    public interface PFNGLNORMALP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference coords);
    };
    public interface PFNGLSECONDARYCOLORP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int color);
    };
    public interface PFNGLSECONDARYCOLORP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference color);
    };
    public interface PFNGLTEXCOORDP1UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int coords);
    };
    public interface PFNGLTEXCOORDP1UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference coords);
    };
    public interface PFNGLTEXCOORDP2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int coords);
    };
    public interface PFNGLTEXCOORDP2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference coords);
    };
    public interface PFNGLTEXCOORDP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int coords);
    };
    public interface PFNGLTEXCOORDP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference coords);
    };
    public interface PFNGLTEXCOORDP4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int coords);
    };
    public interface PFNGLTEXCOORDP4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference coords);
    };
    public interface PFNGLVERTEXATTRIBP1UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, int value);
    };
    public interface PFNGLVERTEXATTRIBP1UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, IntByReference value);
    };
    public interface PFNGLVERTEXATTRIBP2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, int value);
    };
    public interface PFNGLVERTEXATTRIBP2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, IntByReference value);
    };
    public interface PFNGLVERTEXATTRIBP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, int value);
    };
    public interface PFNGLVERTEXATTRIBP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, IntByReference value);
    };
    public interface PFNGLVERTEXATTRIBP4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, int value);
    };
    public interface PFNGLVERTEXATTRIBP4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int type, byte normalized, IntByReference value);
    };
    public interface PFNGLVERTEXP2UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int value);
    };
    public interface PFNGLVERTEXP2UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference value);
    };
    public interface PFNGLVERTEXP3UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int value);
    };
    public interface PFNGLVERTEXP3UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference value);
    };
    public interface PFNGLVERTEXP4UIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int value);
    };
    public interface PFNGLVERTEXP4UIVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, IntByReference value);
    };
    public interface PFNGLDEPTHRANGEARRAYVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, DoubleByReference v);
    };
    public interface PFNGLDEPTHRANGEINDEXEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double n, double f);
    };
    public interface PFNGLGETDOUBLEI_VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference data);
    };
    public interface PFNGLGETFLOATI_VPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference data);
    };
    public interface PFNGLSCISSORARRAYVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, IntByReference v);
    };
    public interface PFNGLSCISSORINDEXEDPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int left, int bottom, int width, int height);
    };
    public interface PFNGLSCISSORINDEXEDVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVIEWPORTARRAYVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count, FloatByReference v);
    };
    public interface PFNGLVIEWPORTINDEXEDFPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float w, float h);
    };
    public interface PFNGLVIEWPORTINDEXEDFVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLWINDOWPOS2DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y);
    };
    public interface PFNGLWINDOWPOS2DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS2FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y);
    };
    public interface PFNGLWINDOWPOS2FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS2IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y);
    };
    public interface PFNGLWINDOWPOS2IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS2SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y);
    };
    public interface PFNGLWINDOWPOS2SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLWINDOWPOS3DARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y, double z);
    };
    public interface PFNGLWINDOWPOS3DVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS3FARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y, float z);
    };
    public interface PFNGLWINDOWPOS3FVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS3IARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int z);
    };
    public interface PFNGLWINDOWPOS3IVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS3SARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y, short z);
    };
    public interface PFNGLWINDOWPOS3SVARBPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLDRAWBUFFERSATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference bufs);
    };
    public interface PFNGLDRAWELEMENTARRAYATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count);
    };
    public interface PFNGLDRAWRANGEELEMENTARRAYATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int end, int count);
    };
    public interface PFNGLELEMENTPOINTERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLGETTEXBUMPPARAMETERFVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference param);
    };
    public interface PFNGLGETTEXBUMPPARAMETERIVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference param);
    };
    public interface PFNGLTEXBUMPPARAMETERFVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference param);
    };
    public interface PFNGLTEXBUMPPARAMETERIVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference param);
    };
    public interface PFNGLALPHAFRAGMENTOP1ATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod);
    };
    public interface PFNGLALPHAFRAGMENTOP2ATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod);
    };
    public interface PFNGLALPHAFRAGMENTOP3ATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod);
    };
    public interface PFNGLBEGINFRAGMENTSHADERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLBINDFRAGMENTSHADERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLCOLORFRAGMENTOP1ATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod);
    };
    public interface PFNGLCOLORFRAGMENTOP2ATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod);
    };
    public interface PFNGLCOLORFRAGMENTOP3ATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod);
    };
    public interface PFNGLDELETEFRAGMENTSHADERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLENDFRAGMENTSHADERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLGENFRAGMENTSHADERSATIPROC extends StdCallLibrary.StdCallCallback {
        int apply(int range);
    };
    public interface PFNGLPASSTEXCOORDATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int dst, int coord, int swizzle);
    };
    public interface PFNGLSAMPLEMAPATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int dst, int interp, int swizzle);
    };
    public interface PFNGLSETFRAGMENTSHADERCONSTANTATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int dst, FloatByReference value);
    };
    public interface PFNGLMAPOBJECTBUFFERATIPROC extends Callback {
        TestLibrary.GLvoid apply(int buffer);
    };
    public interface PFNGLUNMAPOBJECTBUFFERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer);
    };
    public interface PFNGLPNTRIANGLESFATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLPNTRIANGLESIATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLSTENCILFUNCSEPARATEATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int frontfunc, int backfunc, int ref, int mask);
    };
    public interface PFNGLSTENCILOPSEPARATEATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int sfail, int dpfail, int dppass);
    };
    public interface PFNGLARRAYOBJECTATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int size, int type, int stride, int buffer, int offset);
    };
    public interface PFNGLFREEOBJECTBUFFERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer);
    };
    public interface PFNGLGETARRAYOBJECTFVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int pname, FloatByReference params);
    };
    public interface PFNGLGETARRAYOBJECTIVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int pname, IntByReference params);
    };
    public interface PFNGLGETOBJECTBUFFERFVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int pname, FloatByReference params);
    };
    public interface PFNGLGETOBJECTBUFFERIVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int pname, IntByReference params);
    };
    public interface PFNGLGETVARIANTARRAYOBJECTFVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, FloatByReference params);
    };
    public interface PFNGLGETVARIANTARRAYOBJECTIVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLISOBJECTBUFFERATIPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int buffer);
    };
    public interface PFNGLNEWOBJECTBUFFERATIPROC extends StdCallLibrary.StdCallCallback {
        int apply(int size, TestLibrary.GLvoid pointer, int usage);
    };
    public interface PFNGLUPDATEOBJECTBUFFERATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int offset, int size, TestLibrary.GLvoid pointer, int preserve);
    };
    public interface PFNGLVARIANTARRAYOBJECTATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int type, int stride, int buffer, int offset);
    };
    public interface PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, FloatByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, IntByReference params);
    };
    public interface PFNGLVERTEXATTRIBARRAYOBJECTATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, byte normalized, int stride, int buffer, int offset);
    };
    public interface PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream);
    };
    public interface PFNGLNORMALSTREAM3BATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, byte x, byte y, byte z);
    };
    public interface PFNGLNORMALSTREAM3BVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, Pointer coords);
    };
    public interface PFNGLNORMALSTREAM3DATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, double x, double y, double z);
    };
    public interface PFNGLNORMALSTREAM3DVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, DoubleByReference coords);
    };
    public interface PFNGLNORMALSTREAM3FATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, float x, float y, float z);
    };
    public interface PFNGLNORMALSTREAM3FVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, FloatByReference coords);
    };
    public interface PFNGLNORMALSTREAM3IATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, int x, int y, int z);
    };
    public interface PFNGLNORMALSTREAM3IVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, IntByReference coords);
    };
    public interface PFNGLNORMALSTREAM3SATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, short x, short y, short z);
    };
    public interface PFNGLNORMALSTREAM3SVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, ShortByReference coords);
    };
    public interface PFNGLVERTEXBLENDENVFATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLVERTEXBLENDENVIATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLVERTEXSTREAM1DATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, double x);
    };
    public interface PFNGLVERTEXSTREAM1DVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, DoubleByReference coords);
    };
    public interface PFNGLVERTEXSTREAM1FATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, float x);
    };
    public interface PFNGLVERTEXSTREAM1FVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, FloatByReference coords);
    };
    public interface PFNGLVERTEXSTREAM1IATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, int x);
    };
    public interface PFNGLVERTEXSTREAM1IVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, IntByReference coords);
    };
    public interface PFNGLVERTEXSTREAM1SATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, short x);
    };
    public interface PFNGLVERTEXSTREAM1SVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, ShortByReference coords);
    };
    public interface PFNGLVERTEXSTREAM2DATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, double x, double y);
    };
    public interface PFNGLVERTEXSTREAM2DVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, DoubleByReference coords);
    };
    public interface PFNGLVERTEXSTREAM2FATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, float x, float y);
    };
    public interface PFNGLVERTEXSTREAM2FVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, FloatByReference coords);
    };
    public interface PFNGLVERTEXSTREAM2IATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, int x, int y);
    };
    public interface PFNGLVERTEXSTREAM2IVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, IntByReference coords);
    };
    public interface PFNGLVERTEXSTREAM2SATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, short x, short y);
    };
    public interface PFNGLVERTEXSTREAM2SVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, ShortByReference coords);
    };
    public interface PFNGLVERTEXSTREAM3DATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, double x, double y, double z);
    };
    public interface PFNGLVERTEXSTREAM3DVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, DoubleByReference coords);
    };
    public interface PFNGLVERTEXSTREAM3FATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, float x, float y, float z);
    };
    public interface PFNGLVERTEXSTREAM3FVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, FloatByReference coords);
    };
    public interface PFNGLVERTEXSTREAM3IATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, int x, int y, int z);
    };
    public interface PFNGLVERTEXSTREAM3IVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, IntByReference coords);
    };
    public interface PFNGLVERTEXSTREAM3SATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, short x, short y, short z);
    };
    public interface PFNGLVERTEXSTREAM3SVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, ShortByReference coords);
    };
    public interface PFNGLVERTEXSTREAM4DATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, double x, double y, double z, double w);
    };
    public interface PFNGLVERTEXSTREAM4DVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, DoubleByReference coords);
    };
    public interface PFNGLVERTEXSTREAM4FATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, float x, float y, float z, float w);
    };
    public interface PFNGLVERTEXSTREAM4FVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, FloatByReference coords);
    };
    public interface PFNGLVERTEXSTREAM4IATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, int x, int y, int z, int w);
    };
    public interface PFNGLVERTEXSTREAM4IVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, IntByReference coords);
    };
    public interface PFNGLVERTEXSTREAM4SATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, short x, short y, short z, short w);
    };
    public interface PFNGLVERTEXSTREAM4SVATIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stream, ShortByReference coords);
    };
    public interface PFNGLGETUNIFORMBUFFERSIZEEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, int location);
    };
    public interface PFNGLGETUNIFORMOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        NativeSize apply(int program, int location);
    };
    public interface PFNGLUNIFORMBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int buffer);
    };
    public interface PFNGLBLENDCOLOREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(float red, float green, float blue, float alpha);
    };
    public interface PFNGLBLENDEQUATIONSEPARATEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int modeRGB, int modeAlpha);
    };
    public interface PFNGLBLENDFUNCSEPARATEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);
    };
    public interface PFNGLBLENDEQUATIONEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLCOLORSUBTABLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int start, int count, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOPYCOLORSUBTABLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int start, int x, int y, int width);
    };
    public interface PFNGLLOCKARRAYSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int first, int count);
    };
    public interface PFNGLUNLOCKARRAYSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLCONVOLUTIONFILTER1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int format, int type, TestLibrary.GLvoid image);
    };
    public interface PFNGLCONVOLUTIONFILTER2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int height, int format, int type, TestLibrary.GLvoid image);
    };
    public interface PFNGLCONVOLUTIONPARAMETERFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, float param);
    };
    public interface PFNGLCONVOLUTIONPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLCONVOLUTIONPARAMETERIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLCONVOLUTIONPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int x, int y, int width);
    };
    public interface PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int x, int y, int width, int height);
    };
    public interface PFNGLGETCONVOLUTIONFILTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid image);
    };
    public interface PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETSEPARABLEFILTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid row, TestLibrary.GLvoid column, TestLibrary.GLvoid span);
    };
    public interface PFNGLSEPARABLEFILTER2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int height, int format, int type, TestLibrary.GLvoid row, TestLibrary.GLvoid column);
    };
    public interface PFNGLBINORMALPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLTANGENTPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLCOPYTEXIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int x, int y, int width, int border);
    };
    public interface PFNGLCOPYTEXIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int x, int y, int width, int height, int border);
    };
    public interface PFNGLCOPYTEXSUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int x, int y, int width);
    };
    public interface PFNGLCOPYTEXSUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    };
    public interface PFNGLCOPYTEXSUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    };
    public interface PFNGLCULLPARAMETERDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, DoubleByReference params);
    };
    public interface PFNGLCULLPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLINSERTEVENTMARKEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int length, Pointer marker);
    };
    public interface PFNGLPOPGROUPMARKEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLPUSHGROUPMARKEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int length, Pointer marker);
    };
    public interface PFNGLDEPTHBOUNDSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(double zmin, double zmax);
    };
    public interface PFNGLBINDMULTITEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int texture);
    };
    public interface PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int framebuffer, int target);
    };
    public interface PFNGLCLIENTATTRIBDEFAULTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mask);
    };
    public interface PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int width, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int width, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, TestLibrary.GLvoid data);
    };
    public interface PFNGLCOPYMULTITEXIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int x, int y, int width, int border);
    };
    public interface PFNGLCOPYMULTITEXIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border);
    };
    public interface PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int x, int y, int width);
    };
    public interface PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    };
    public interface PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    };
    public interface PFNGLCOPYTEXTUREIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int x, int y, int width, int border);
    };
    public interface PFNGLCOPYTEXTUREIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border);
    };
    public interface PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int x, int y, int width);
    };
    public interface PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    };
    public interface PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
    };
    public interface PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int index);
    };
    public interface PFNGLDISABLECLIENTSTATEIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int index);
    };
    public interface PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int index);
    };
    public interface PFNGLDISABLEVERTEXARRAYEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int array);
    };
    public interface PFNGLENABLECLIENTSTATEINDEXEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int index);
    };
    public interface PFNGLENABLECLIENTSTATEIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int array, int index);
    };
    public interface PFNGLENABLEVERTEXARRAYATTRIBEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int index);
    };
    public interface PFNGLENABLEVERTEXARRAYEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int array);
    };
    public interface PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, NativeSize offset, NativeSize length);
    };
    public interface PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int mode);
    };
    public interface PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int n, IntByReference bufs);
    };
    public interface PFNGLFRAMEBUFFERREADBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int mode);
    };
    public interface PFNGLGENERATEMULTITEXMIPMAPEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target);
    };
    public interface PFNGLGENERATETEXTUREMIPMAPEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target);
    };
    public interface PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, TestLibrary.GLvoid img);
    };
    public interface PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, TestLibrary.GLvoid img);
    };
    public interface PFNGLGETDOUBLEINDEXEDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference params);
    };
    public interface PFNGLGETDOUBLEI_VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, DoubleByReference params);
    };
    public interface PFNGLGETFLOATINDEXEDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference params);
    };
    public interface PFNGLGETFLOATI_VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, FloatByReference params);
    };
    public interface PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int pname, IntByReference param);
    };
    public interface PFNGLGETMULTITEXENVFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETMULTITEXENVIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETMULTITEXGENDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, DoubleByReference params);
    };
    public interface PFNGLGETMULTITEXGENFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, FloatByReference params);
    };
    public interface PFNGLGETMULTITEXGENIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, IntByReference params);
    };
    public interface PFNGLGETMULTITEXIMAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int pname, FloatByReference params);
    };
    public interface PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int pname, IntByReference params);
    };
    public interface PFNGLGETMULTITEXPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETMULTITEXPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETMULTITEXPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETMULTITEXPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int pname, IntByReference params);
    };
    public interface PFNGLGETNAMEDBUFFERPOINTERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int pname, PointerByReference params);
    };
    public interface PFNGLGETNAMEDBUFFERSUBDATAEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, NativeSize offset, NativeSize size, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int pname, IntByReference params);
    };
    public interface PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, IntByReference params);
    };
    public interface PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, IntByReference params);
    };
    public interface PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, DoubleByReference params);
    };
    public interface PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, FloatByReference params);
    };
    public interface PFNGLGETNAMEDPROGRAMSTRINGEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int pname, TestLibrary.GLvoid string);
    };
    public interface PFNGLGETNAMEDPROGRAMIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int renderbuffer, int pname, IntByReference params);
    };
    public interface PFNGLGETPOINTERINDEXEDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, PointerByReference params);
    };
    public interface PFNGLGETPOINTERI_VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, PointerByReference params);
    };
    public interface PFNGLGETTEXTUREIMAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int pname, FloatByReference params);
    };
    public interface PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int pname, IntByReference params);
    };
    public interface PFNGLGETTEXTUREPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETTEXTUREPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETTEXTUREPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETTEXTUREPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, IntByReference params);
    };
    public interface PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int index, int pname, IntByReference param);
    };
    public interface PFNGLGETVERTEXARRAYINTEGERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int pname, IntByReference param);
    };
    public interface PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int index, int pname, PointerByReference param);
    };
    public interface PFNGLGETVERTEXARRAYPOINTERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int pname, PointerByReference param);
    };
    public interface PFNGLMAPNAMEDBUFFEREXTPROC extends Callback {
        TestLibrary.GLvoid apply(int buffer, int access);
    };
    public interface PFNGLMAPNAMEDBUFFERRANGEEXTPROC extends Callback {
        TestLibrary.GLvoid apply(int buffer, NativeSize offset, NativeSize length, int access);
    };
    public interface PFNGLMATRIXFRUSTUMEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, double l, double r, double b, double t, double n, double f);
    };
    public interface PFNGLMATRIXLOADIDENTITYEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode);
    };
    public interface PFNGLMATRIXLOADTRANSPOSEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, DoubleByReference m);
    };
    public interface PFNGLMATRIXLOADTRANSPOSEFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, FloatByReference m);
    };
    public interface PFNGLMATRIXLOADDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, DoubleByReference m);
    };
    public interface PFNGLMATRIXLOADFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, FloatByReference m);
    };
    public interface PFNGLMATRIXMULTTRANSPOSEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, DoubleByReference m);
    };
    public interface PFNGLMATRIXMULTTRANSPOSEFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, FloatByReference m);
    };
    public interface PFNGLMATRIXMULTDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, DoubleByReference m);
    };
    public interface PFNGLMATRIXMULTFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, FloatByReference m);
    };
    public interface PFNGLMATRIXORTHOEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, double l, double r, double b, double t, double n, double f);
    };
    public interface PFNGLMATRIXPOPEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode);
    };
    public interface PFNGLMATRIXPUSHEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode);
    };
    public interface PFNGLMATRIXROTATEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, double angle, double x, double y, double z);
    };
    public interface PFNGLMATRIXROTATEFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, float angle, float x, float y, float z);
    };
    public interface PFNGLMATRIXSCALEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, double x, double y, double z);
    };
    public interface PFNGLMATRIXSCALEFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, float x, float y, float z);
    };
    public interface PFNGLMATRIXTRANSLATEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, double x, double y, double z);
    };
    public interface PFNGLMATRIXTRANSLATEFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int matrixMode, float x, float y, float z);
    };
    public interface PFNGLMULTITEXBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int internalformat, int buffer);
    };
    public interface PFNGLMULTITEXCOORDPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLMULTITEXENVFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, float param);
    };
    public interface PFNGLMULTITEXENVFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, FloatByReference params);
    };
    public interface PFNGLMULTITEXENVIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, int param);
    };
    public interface PFNGLMULTITEXENVIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLMULTITEXGENDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, double param);
    };
    public interface PFNGLMULTITEXGENDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, DoubleByReference params);
    };
    public interface PFNGLMULTITEXGENFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, float param);
    };
    public interface PFNGLMULTITEXGENFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, FloatByReference params);
    };
    public interface PFNGLMULTITEXGENIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, int param);
    };
    public interface PFNGLMULTITEXGENIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int coord, int pname, IntByReference params);
    };
    public interface PFNGLMULTITEXIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLMULTITEXIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLMULTITEXIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLMULTITEXPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLMULTITEXPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference params);
    };
    public interface PFNGLMULTITEXPARAMETERFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, float param);
    };
    public interface PFNGLMULTITEXPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, FloatByReference param);
    };
    public interface PFNGLMULTITEXPARAMETERIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, int param);
    };
    public interface PFNGLMULTITEXPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int pname, IntByReference param);
    };
    public interface PFNGLMULTITEXRENDERBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int renderbuffer);
    };
    public interface PFNGLMULTITEXSUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int width, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLMULTITEXSUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLMULTITEXSUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLNAMEDBUFFERDATAEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, NativeSize size, TestLibrary.GLvoid data, int usage);
    };
    public interface PFNGLNAMEDBUFFERSUBDATAEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, NativeSize offset, NativeSize size, TestLibrary.GLvoid data);
    };
    public interface PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int readBuffer, int writeBuffer, NativeSize readOffset, NativeSize writeOffset, NativeSize size);
    };
    public interface PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer);
    };
    public interface PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int textarget, int texture, int level);
    };
    public interface PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int textarget, int texture, int level);
    };
    public interface PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int textarget, int texture, int level, int zoffset);
    };
    public interface PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int texture, int level);
    };
    public interface PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int texture, int level, int face);
    };
    public interface PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int framebuffer, int attachment, int texture, int level, int layer);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, double x, double y, double z, double w);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, DoubleByReference params);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, float x, float y, float z, float w);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, FloatByReference params);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, int x, int y, int z, int w);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, IntByReference params);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, int x, int y, int z, int w);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, IntByReference params);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, int count, FloatByReference params);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, int count, IntByReference params);
    };
    public interface PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int index, int count, IntByReference params);
    };
    public interface PFNGLNAMEDPROGRAMSTRINGEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int target, int format, int len, TestLibrary.GLvoid string);
    };
    public interface PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int renderbuffer, int internalformat, int width, int height);
    };
    public interface PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height);
    };
    public interface PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int renderbuffer, int samples, int internalformat, int width, int height);
    };
    public interface PFNGLPROGRAMUNIFORM1FEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float v0);
    };
    public interface PFNGLPROGRAMUNIFORM1FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM1IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0);
    };
    public interface PFNGLPROGRAMUNIFORM1IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM1UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0);
    };
    public interface PFNGLPROGRAMUNIFORM1UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2FEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float v0, float v1);
    };
    public interface PFNGLPROGRAMUNIFORM2FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0, int v1);
    };
    public interface PFNGLPROGRAMUNIFORM2IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0, int v1);
    };
    public interface PFNGLPROGRAMUNIFORM2UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3FEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float v0, float v1, float v2);
    };
    public interface PFNGLPROGRAMUNIFORM3FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0, int v1, int v2);
    };
    public interface PFNGLPROGRAMUNIFORM3IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0, int v1, int v2);
    };
    public interface PFNGLPROGRAMUNIFORM3UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4FEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, float v0, float v1, float v2, float v3);
    };
    public interface PFNGLPROGRAMUNIFORM4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0, int v1, int v2, int v3);
    };
    public interface PFNGLPROGRAMUNIFORM4IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int v0, int v1, int v2, int v3);
    };
    public interface PFNGLPROGRAMUNIFORM4UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, IntByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, byte transpose, FloatByReference value);
    };
    public interface PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mask);
    };
    public interface PFNGLTEXTUREBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int internalformat, int buffer);
    };
    public interface PFNGLTEXTUREIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int width, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXTUREIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXTUREIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXTUREPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, IntByReference params);
    };
    public interface PFNGLTEXTUREPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, IntByReference params);
    };
    public interface PFNGLTEXTUREPARAMETERFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, float param);
    };
    public interface PFNGLTEXTUREPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, FloatByReference param);
    };
    public interface PFNGLTEXTUREPARAMETERIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, int param);
    };
    public interface PFNGLTEXTUREPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int pname, IntByReference param);
    };
    public interface PFNGLTEXTURERENDERBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int renderbuffer);
    };
    public interface PFNGLTEXTURESUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int width, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXTURESUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXTURESUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLUNMAPNAMEDBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int buffer);
    };
    public interface PFNGLVERTEXARRAYCOLOROFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYINDEXOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int texunit, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYNORMALOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int index, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int index, int size, int type, byte normalized, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLCOLORMASKINDEXEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buf, byte r, byte g, byte b, byte a);
    };
    public interface PFNGLDISABLEINDEXEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index);
    };
    public interface PFNGLENABLEINDEXEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index);
    };
    public interface PFNGLGETBOOLEANINDEXEDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int value, int index, Pointer data);
    };
    public interface PFNGLGETINTEGERINDEXEDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int value, int index, IntByReference data);
    };
    public interface PFNGLISENABLEDINDEXEDEXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int target, int index);
    };
    public interface PFNGLDRAWARRAYSINSTANCEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int count, int primcount);
    };
    public interface PFNGLDRAWELEMENTSINSTANCEDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int count, int type, TestLibrary.GLvoid indices, int primcount);
    };
    public interface PFNGLDRAWRANGEELEMENTSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int start, int end, int count, int type, TestLibrary.GLvoid indices);
    };
    public interface PFNGLFOGCOORDPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLFOGCOORDDEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(double coord);
    };
    public interface PFNGLFOGCOORDDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference coord);
    };
    public interface PFNGLFOGCOORDFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(float coord);
    };
    public interface PFNGLFOGCOORDFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference coord);
    };
    public interface PFNGLFRAGMENTCOLORMATERIALEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int mode);
    };
    public interface PFNGLFRAGMENTLIGHTMODELFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLFRAGMENTLIGHTMODELFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLFRAGMENTLIGHTMODELIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLFRAGMENTLIGHTMODELIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLFRAGMENTLIGHTFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, float param);
    };
    public interface PFNGLFRAGMENTLIGHTFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, FloatByReference params);
    };
    public interface PFNGLFRAGMENTLIGHTIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, int param);
    };
    public interface PFNGLFRAGMENTLIGHTIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, IntByReference params);
    };
    public interface PFNGLFRAGMENTMATERIALFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, float param);
    };
    public interface PFNGLFRAGMENTMATERIALFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, FloatByReference params);
    };
    public interface PFNGLFRAGMENTMATERIALIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, int param);
    };
    public interface PFNGLFRAGMENTMATERIALIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, IntByReference params);
    };
    public interface PFNGLGETFRAGMENTLIGHTFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, FloatByReference params);
    };
    public interface PFNGLGETFRAGMENTLIGHTIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, IntByReference params);
    };
    public interface PFNGLGETFRAGMENTMATERIALFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, FloatByReference params);
    };
    public interface PFNGLGETFRAGMENTMATERIALIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, IntByReference params);
    };
    public interface PFNGLLIGHTENVIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLBLITFRAMEBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);
    };
    public interface PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int samples, int internalformat, int width, int height);
    };
    public interface PFNGLBINDFRAMEBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int framebuffer);
    };
    public interface PFNGLBINDRENDERBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int renderbuffer);
    };
    public interface PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int target);
    };
    public interface PFNGLDELETEFRAMEBUFFERSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference framebuffers);
    };
    public interface PFNGLDELETERENDERBUFFERSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference renderbuffers);
    };
    public interface PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int renderbuffertarget, int renderbuffer);
    };
    public interface PFNGLFRAMEBUFFERTEXTURE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int textarget, int texture, int level);
    };
    public interface PFNGLFRAMEBUFFERTEXTURE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int textarget, int texture, int level);
    };
    public interface PFNGLFRAMEBUFFERTEXTURE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int textarget, int texture, int level, int zoffset);
    };
    public interface PFNGLGENFRAMEBUFFERSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference framebuffers);
    };
    public interface PFNGLGENRENDERBUFFERSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference renderbuffers);
    };
    public interface PFNGLGENERATEMIPMAPEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int pname, IntByReference params);
    };
    public interface PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLISFRAMEBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int framebuffer);
    };
    public interface PFNGLISRENDERBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int renderbuffer);
    };
    public interface PFNGLRENDERBUFFERSTORAGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int height);
    };
    public interface PFNGLFRAMEBUFFERTEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level);
    };
    public interface PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level, int face);
    };
    public interface PFNGLPROGRAMPARAMETERIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int pname, int value);
    };
    public interface PFNGLPROGRAMENVPARAMETERS4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int count, FloatByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int count, FloatByReference params);
    };
    public interface PFNGLBINDFRAGDATALOCATIONEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int color, Pointer name);
    };
    public interface PFNGLGETFRAGDATALOCATIONEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, Pointer name);
    };
    public interface PFNGLGETUNIFORMUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, IntByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, IntByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, IntByReference params);
    };
    public interface PFNGLUNIFORM1UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0);
    };
    public interface PFNGLUNIFORM1UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM2UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1);
    };
    public interface PFNGLUNIFORM2UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM3UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1, int v2);
    };
    public interface PFNGLUNIFORM3UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLUNIFORM4UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int v0, int v1, int v2, int v3);
    };
    public interface PFNGLUNIFORM4UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, IntByReference value);
    };
    public interface PFNGLVERTEXATTRIBI1IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x);
    };
    public interface PFNGLVERTEXATTRIBI1IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI1UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x);
    };
    public interface PFNGLVERTEXATTRIBI1UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI2IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x, int y);
    };
    public interface PFNGLVERTEXATTRIBI2IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI2UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x, int y);
    };
    public interface PFNGLVERTEXATTRIBI2UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI3IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x, int y, int z);
    };
    public interface PFNGLVERTEXATTRIBI3IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI3UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x, int y, int z);
    };
    public interface PFNGLVERTEXATTRIBI3UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI4BVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIBI4IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x, int y, int z, int w);
    };
    public interface PFNGLVERTEXATTRIBI4IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI4SVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBI4UBVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIBI4UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int x, int y, int z, int w);
    };
    public interface PFNGLVERTEXATTRIBI4UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, IntByReference v);
    };
    public interface PFNGLVERTEXATTRIBI4USVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBIPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLGETHISTOGRAMEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, byte reset, int format, int type, TestLibrary.GLvoid values);
    };
    public interface PFNGLGETHISTOGRAMPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETHISTOGRAMPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETMINMAXEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, byte reset, int format, int type, TestLibrary.GLvoid values);
    };
    public interface PFNGLGETMINMAXPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETMINMAXPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLHISTOGRAMEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int width, int internalformat, byte sink);
    };
    public interface PFNGLMINMAXEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, byte sink);
    };
    public interface PFNGLRESETHISTOGRAMEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLRESETMINMAXEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLINDEXFUNCEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int func, float ref);
    };
    public interface PFNGLINDEXMATERIALEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int mode);
    };
    public interface PFNGLAPPLYTEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLTEXTURELIGHTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname);
    };
    public interface PFNGLTEXTUREMATERIALEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int mode);
    };
    public interface PFNGLMULTIDRAWARRAYSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, IntByReference first, IntByReference count, int primcount);
    };
    public interface PFNGLMULTIDRAWELEMENTSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, IntByReference count, int type, PointerByReference indices, int primcount);
    };
    public interface PFNGLSAMPLEMASKEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(float value, byte invert);
    };
    public interface PFNGLSAMPLEPATTERNEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pattern);
    };
    public interface PFNGLCOLORTABLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalFormat, int width, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETCOLORTABLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid data);
    };
    public interface PFNGLGETCOLORTABLEPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETCOLORTABLEPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLPIXELTRANSFORMPARAMETERFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, float param);
    };
    public interface PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLPIXELTRANSFORMPARAMETERIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLPOINTPARAMETERFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLPOINTPARAMETERFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLPOLYGONOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(float factor, float bias);
    };
    public interface PFNGLPROVOKINGVERTEXEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLBEGINSCENEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLENDSCENEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLSECONDARYCOLOR3BEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte red, byte green, byte blue);
    };
    public interface PFNGLSECONDARYCOLOR3BVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer v);
    };
    public interface PFNGLSECONDARYCOLOR3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(double red, double green, double blue);
    };
    public interface PFNGLSECONDARYCOLOR3DVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3FEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(float red, float green, float blue);
    };
    public interface PFNGLSECONDARYCOLOR3FVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3IEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue);
    };
    public interface PFNGLSECONDARYCOLOR3IVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3SEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue);
    };
    public interface PFNGLSECONDARYCOLOR3SVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3UBEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte red, byte green, byte blue);
    };
    public interface PFNGLSECONDARYCOLOR3UBVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer v);
    };
    public interface PFNGLSECONDARYCOLOR3UIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue);
    };
    public interface PFNGLSECONDARYCOLOR3UIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3USEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue);
    };
    public interface PFNGLSECONDARYCOLOR3USVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLSECONDARYCOLORPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLACTIVEPROGRAMEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program);
    };
    public interface PFNGLCREATESHADERPROGRAMEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int type, Pointer string);
    };
    public interface PFNGLUSESHADERPROGRAMEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int program);
    };
    public interface PFNGLBINDIMAGETEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int texture, int level, byte layered, int layer, int access, int format);
    };
    public interface PFNGLMEMORYBARRIEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int barriers);
    };
    public interface PFNGLACTIVESTENCILFACEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face);
    };
    public interface PFNGLTEXSUBIMAGE1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int width, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXSUBIMAGE2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXSUBIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXIMAGE3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int attachment, int texture, int level, int layer);
    };
    public interface PFNGLTEXBUFFEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int buffer);
    };
    public interface PFNGLCLEARCOLORIIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue, int alpha);
    };
    public interface PFNGLCLEARCOLORIUIEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue, int alpha);
    };
    public interface PFNGLGETTEXPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETTEXPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLTEXPARAMETERIIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLTEXPARAMETERIUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLARETEXTURESRESIDENTEXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int n, IntByReference textures, Pointer residences);
    };
    public interface PFNGLBINDTEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int texture);
    };
    public interface PFNGLDELETETEXTURESEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference textures);
    };
    public interface PFNGLGENTEXTURESEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference textures);
    };
    public interface PFNGLISTEXTUREEXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int texture);
    };
    public interface PFNGLPRIORITIZETEXTURESEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference textures, FloatByReference priorities);
    };
    public interface PFNGLTEXTURENORMALEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLGETQUERYOBJECTI64VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, LongByReference params);
    };
    public interface PFNGLGETQUERYOBJECTUI64VEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, LongByReference params);
    };
    public interface PFNGLBEGINTRANSFORMFEEDBACKEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int primitiveMode);
    };
    public interface PFNGLBINDBUFFERBASEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer);
    };
    public interface PFNGLBINDBUFFEROFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer, NativeSize offset);
    };
    public interface PFNGLBINDBUFFERRANGEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer, NativeSize offset, NativeSize size);
    };
    public interface PFNGLENDTRANSFORMFEEDBACKEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int index, int bufSize, IntByReference length, IntByReference size, IntByReference type, Pointer name);
    };
    public interface PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int count, PointerByReference varyings, int bufferMode);
    };
    public interface PFNGLARRAYELEMENTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int i);
    };
    public interface PFNGLCOLORPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, int count, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLDRAWARRAYSEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int first, int count);
    };
    public interface PFNGLEDGEFLAGPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stride, int count, Pointer pointer);
    };
    public interface PFNGLINDEXPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, int count, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLNORMALPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, int count, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLTEXCOORDPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, int count, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLVERTEXPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, int count, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLGETVERTEXATTRIBLDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, DoubleByReference params);
    };
    public interface PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int vaobj, int buffer, int index, int size, int type, int stride, NativeSize offset);
    };
    public interface PFNGLVERTEXATTRIBL1DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x);
    };
    public interface PFNGLVERTEXATTRIBL1DVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBL2DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y);
    };
    public interface PFNGLVERTEXATTRIBL2DVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBL3DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z);
    };
    public interface PFNGLVERTEXATTRIBL3DVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBL4DEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z, double w);
    };
    public interface PFNGLVERTEXATTRIBL4DVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBLPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLBEGINVERTEXSHADEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLBINDLIGHTPARAMETEREXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int light, int value);
    };
    public interface PFNGLBINDMATERIALPARAMETEREXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int face, int value);
    };
    public interface PFNGLBINDPARAMETEREXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int value);
    };
    public interface PFNGLBINDTEXGENPARAMETEREXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int unit, int coord, int value);
    };
    public interface PFNGLBINDTEXTUREUNITPARAMETEREXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int unit, int value);
    };
    public interface PFNGLBINDVERTEXSHADEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLDELETEVERTEXSHADEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLENABLEVARIANTCLIENTSTATEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLENDVERTEXSHADEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLEXTRACTCOMPONENTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int res, int src, int num);
    };
    public interface PFNGLGENSYMBOLSEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int dataType, int storageType, int range, int components);
    };
    public interface PFNGLGENVERTEXSHADERSEXTPROC extends StdCallLibrary.StdCallCallback {
        int apply(int range);
    };
    public interface PFNGLGETINVARIANTBOOLEANVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, Pointer data);
    };
    public interface PFNGLGETINVARIANTFLOATVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, FloatByReference data);
    };
    public interface PFNGLGETINVARIANTINTEGERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, IntByReference data);
    };
    public interface PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, Pointer data);
    };
    public interface PFNGLGETLOCALCONSTANTFLOATVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, FloatByReference data);
    };
    public interface PFNGLGETLOCALCONSTANTINTEGERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, IntByReference data);
    };
    public interface PFNGLGETVARIANTBOOLEANVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, Pointer data);
    };
    public interface PFNGLGETVARIANTFLOATVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, FloatByReference data);
    };
    public interface PFNGLGETVARIANTINTEGERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, IntByReference data);
    };
    public interface PFNGLGETVARIANTPOINTERVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int value, PointerByReference data);
    };
    public interface PFNGLINSERTCOMPONENTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int res, int src, int num);
    };
    public interface PFNGLISVARIANTENABLEDEXTPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id, int cap);
    };
    public interface PFNGLSETINVARIANTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int type, TestLibrary.GLvoid addr);
    };
    public interface PFNGLSETLOCALCONSTANTEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int type, TestLibrary.GLvoid addr);
    };
    public interface PFNGLSHADEROP1EXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int res, int arg1);
    };
    public interface PFNGLSHADEROP2EXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int res, int arg1, int arg2);
    };
    public interface PFNGLSHADEROP3EXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int op, int res, int arg1, int arg2, int arg3);
    };
    public interface PFNGLSWIZZLEEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int res, int in, int outX, int outY, int outZ, int outW);
    };
    public interface PFNGLVARIANTPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int type, int stride, TestLibrary.GLvoid addr);
    };
    public interface PFNGLVARIANTBVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, Pointer addr);
    };
    public interface PFNGLVARIANTDVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, DoubleByReference addr);
    };
    public interface PFNGLVARIANTFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, FloatByReference addr);
    };
    public interface PFNGLVARIANTIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, IntByReference addr);
    };
    public interface PFNGLVARIANTSVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, ShortByReference addr);
    };
    public interface PFNGLVARIANTUBVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, Pointer addr);
    };
    public interface PFNGLVARIANTUIVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, IntByReference addr);
    };
    public interface PFNGLVARIANTUSVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, ShortByReference addr);
    };
    public interface PFNGLWRITEMASKEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int res, int in, int outX, int outY, int outZ, int outW);
    };
    public interface PFNGLVERTEXWEIGHTPOINTEREXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLVERTEXWEIGHTFEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(float weight);
    };
    public interface PFNGLVERTEXWEIGHTFVEXTPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference weight);
    };
    public interface PFNGLIMPORTSYNCEXTPROC extends StdCallLibrary.StdCallCallback {
        TestLibrary.GLsync apply(int external_sync_type, NativeSize external_sync, int flags);
    };
    public interface PFNGLFRAMETERMINATORGREMEDYPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLSTRINGMARKERGREMEDYPROC extends StdCallLibrary.StdCallCallback {
        void apply(int len, TestLibrary.GLvoid string);
    };
    public interface PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLIMAGETRANSFORMPARAMETERFHPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, float param);
    };
    public interface PFNGLIMAGETRANSFORMPARAMETERFVHPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLIMAGETRANSFORMPARAMETERIHPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLIMAGETRANSFORMPARAMETERIVHPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLMULTIMODEDRAWARRAYSIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference mode, IntByReference first, IntByReference count, int primcount, int modestride);
    };
    public interface PFNGLMULTIMODEDRAWELEMENTSIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference mode, IntByReference count, int type, PointerByReference indices, int primcount, int modestride);
    };
    public interface PFNGLCOLORPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLEDGEFLAGPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLFOGCOORDPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLINDEXPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLNORMALPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLSECONDARYCOLORPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLTEXCOORDPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLVERTEXPOINTERLISTIBMPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride, PointerByReference pointer, int ptrstride);
    };
    public interface PFNGLMAPTEXTURE2DINTELPROC extends Callback {
        TestLibrary.GLvoid apply(int texture, int level, int access, IntByReference stride, IntByReference layout);
    };
    public interface PFNGLSYNCTEXTUREINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture);
    };
    public interface PFNGLUNMAPTEXTURE2DINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int level);
    };
    public interface PFNGLCOLORPOINTERVINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, PointerByReference pointer);
    };
    public interface PFNGLNORMALPOINTERVINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, PointerByReference pointer);
    };
    public interface PFNGLTEXCOORDPOINTERVINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, PointerByReference pointer);
    };
    public interface PFNGLVERTEXPOINTERVINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, PointerByReference pointer);
    };
    public interface PFNGLTEXSCISSORFUNCINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int lfunc, int hfunc);
    };
    public interface PFNGLTEXSCISSORINTELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, float tlow, float thigh);
    };
    public interface GLDEBUGPROC extends StdCallLibrary.StdCallCallback {
        void apply(int source, int type, int id, int severity, int length, Pointer message, TestLibrary.GLvoid userParam);
    };
    public interface PFNGLDEBUGMESSAGECALLBACKPROC extends StdCallLibrary.StdCallCallback {
        void apply(TestLibrary.GLDEBUGPROC callback, TestLibrary.GLvoid userParam);
    };
    public interface PFNGLDEBUGMESSAGECONTROLPROC extends StdCallLibrary.StdCallCallback {
        void apply(int source, int type, int severity, int count, IntByReference ids, byte enabled);
    };
    public interface PFNGLDEBUGMESSAGEINSERTPROC extends StdCallLibrary.StdCallCallback {
        void apply(int source, int type, int id, int severity, int length, Pointer buf);
    };
    public interface PFNGLGETDEBUGMESSAGELOGPROC extends StdCallLibrary.StdCallCallback {
        int apply(int count, int bufsize, IntByReference sources, IntByReference types, IntByReference ids, IntByReference severities, IntByReference lengths, Pointer messageLog);
    };
    public interface PFNGLGETOBJECTLABELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int identifier, int name, int bufSize, IntByReference length, Pointer label);
    };
    public interface PFNGLGETOBJECTPTRLABELPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer ptr, int bufSize, IntByReference length, Pointer label);
    };
    public interface PFNGLOBJECTLABELPROC extends StdCallLibrary.StdCallCallback {
        void apply(int identifier, int name, int length, Pointer label);
    };
    public interface PFNGLOBJECTPTRLABELPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer ptr, int length, Pointer label);
    };
    public interface PFNGLPOPDEBUGGROUPPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLPUSHDEBUGGROUPPROC extends StdCallLibrary.StdCallCallback {
        void apply(int source, int id, int length, Pointer message);
    };
    public interface PFNGLBUFFERREGIONENABLEDPROC extends StdCallLibrary.StdCallCallback {
        int apply();
    };
    public interface PFNGLDELETEBUFFERREGIONPROC extends StdCallLibrary.StdCallCallback {
        void apply(int region);
    };
    public interface PFNGLDRAWBUFFERREGIONPROC extends StdCallLibrary.StdCallCallback {
        void apply(int region, int x, int y, int width, int height, int xDest, int yDest);
    };
    public interface PFNGLNEWBUFFERREGIONPROC extends StdCallLibrary.StdCallCallback {
        int apply(int region);
    };
    public interface PFNGLREADBUFFERREGIONPROC extends StdCallLibrary.StdCallCallback {
        void apply(int region, int x, int y, int width, int height);
    };
    public interface PFNGLRESIZEBUFFERSMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLWINDOWPOS2DMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y);
    };
    public interface PFNGLWINDOWPOS2DVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS2FMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y);
    };
    public interface PFNGLWINDOWPOS2FVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS2IMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y);
    };
    public interface PFNGLWINDOWPOS2IVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS2SMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y);
    };
    public interface PFNGLWINDOWPOS2SVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLWINDOWPOS3DMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y, double z);
    };
    public interface PFNGLWINDOWPOS3DVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS3FMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y, float z);
    };
    public interface PFNGLWINDOWPOS3FVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS3IMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int z);
    };
    public interface PFNGLWINDOWPOS3IVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS3SMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y, short z);
    };
    public interface PFNGLWINDOWPOS3SVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLWINDOWPOS4DMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(double x, double y, double z, double GLdouble1);
    };
    public interface PFNGLWINDOWPOS4DVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference p);
    };
    public interface PFNGLWINDOWPOS4FMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(float x, float y, float z, float w);
    };
    public interface PFNGLWINDOWPOS4FVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference p);
    };
    public interface PFNGLWINDOWPOS4IMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int z, int w);
    };
    public interface PFNGLWINDOWPOS4IVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference p);
    };
    public interface PFNGLWINDOWPOS4SMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y, short z, short w);
    };
    public interface PFNGLWINDOWPOS4SVMESAPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference p);
    };
    public interface PFNGLBEGINCONDITIONALRENDERNVXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLENDCONDITIONALRENDERNVXPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, TestLibrary.GLvoid indirect, int drawCount, int stride, int vertexBufferCount);
    };
    public interface PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int type, TestLibrary.GLvoid indirect, int drawCount, int stride, int vertexBufferCount);
    };
    public interface PFNGLGETIMAGEHANDLENVPROC extends StdCallLibrary.StdCallCallback {
        long apply(int texture, int level, byte layered, int layer, int format);
    };
    public interface PFNGLGETTEXTUREHANDLENVPROC extends StdCallLibrary.StdCallCallback {
        long apply(int texture);
    };
    public interface PFNGLGETTEXTURESAMPLERHANDLENVPROC extends StdCallLibrary.StdCallCallback {
        long apply(int texture, int sampler);
    };
    public interface PFNGLISIMAGEHANDLERESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(long handle);
    };
    public interface PFNGLISTEXTUREHANDLERESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(long handle);
    };
    public interface PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle);
    };
    public interface PFNGLMAKEIMAGEHANDLERESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle, int access);
    };
    public interface PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle);
    };
    public interface PFNGLMAKETEXTUREHANDLERESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(long handle);
    };
    public interface PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long value);
    };
    public interface PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference values);
    };
    public interface PFNGLUNIFORMHANDLEUI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long value);
    };
    public interface PFNGLUNIFORMHANDLEUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLBLENDBARRIERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLBLENDPARAMETERINVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int value);
    };
    public interface PFNGLBEGINCONDITIONALRENDERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int mode);
    };
    public interface PFNGLENDCONDITIONALRENDERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLCOPYIMAGESUBDATANVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
    };
    public interface PFNGLCLEARDEPTHDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(double depth);
    };
    public interface PFNGLDEPTHBOUNDSDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(double zmin, double zmax);
    };
    public interface PFNGLDEPTHRANGEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(double zNear, double zFar);
    };
    public interface PFNGLDRAWTEXTURENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
    };
    public interface PFNGLEVALMAPSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int mode);
    };
    public interface PFNGLGETMAPATTRIBPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int pname, FloatByReference params);
    };
    public interface PFNGLGETMAPATTRIBPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int pname, IntByReference params);
    };
    public interface PFNGLGETMAPCONTROLPOINTSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int type, int ustride, int vstride, byte packed, TestLibrary.GLvoid points);
    };
    public interface PFNGLGETMAPPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETMAPPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLMAPCONTROLPOINTSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, byte packed, TestLibrary.GLvoid points);
    };
    public interface PFNGLMAPPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLMAPPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETMULTISAMPLEFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, FloatByReference val);
    };
    public interface PFNGLSAMPLEMASKINDEXEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int mask);
    };
    public interface PFNGLTEXRENDERBUFFERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int renderbuffer);
    };
    public interface PFNGLDELETEFENCESNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference fences);
    };
    public interface PFNGLFINISHFENCENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int fence);
    };
    public interface PFNGLGENFENCESNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference fences);
    };
    public interface PFNGLGETFENCEIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int fence, int pname, IntByReference params);
    };
    public interface PFNGLISFENCENVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int fence);
    };
    public interface PFNGLSETFENCENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int fence, int condition);
    };
    public interface PFNGLTESTFENCENVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int fence);
    };
    public interface PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int len, Pointer name, DoubleByReference params);
    };
    public interface PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int len, Pointer name, FloatByReference params);
    };
    public interface PFNGLPROGRAMNAMEDPARAMETER4DNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int len, Pointer name, double x, double y, double z, double w);
    };
    public interface PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int len, Pointer name, DoubleByReference v);
    };
    public interface PFNGLPROGRAMNAMEDPARAMETER4FNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int len, Pointer name, float x, float y, float z, float w);
    };
    public interface PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int len, Pointer name, FloatByReference v);
    };
    public interface PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);
    };
    public interface PFNGLPROGRAMVERTEXLIMITNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int limit);
    };
    public interface PFNGLPROGRAMENVPARAMETERI4INVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int x, int y, int z, int w);
    };
    public interface PFNGLPROGRAMENVPARAMETERI4IVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, IntByReference params);
    };
    public interface PFNGLPROGRAMENVPARAMETERI4UINVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int x, int y, int z, int w);
    };
    public interface PFNGLPROGRAMENVPARAMETERI4UIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, IntByReference params);
    };
    public interface PFNGLPROGRAMENVPARAMETERSI4IVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int count, IntByReference params);
    };
    public interface PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int count, IntByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERI4INVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int x, int y, int z, int w);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, IntByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERI4UINVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int x, int y, int z, int w);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, IntByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int count, IntByReference params);
    };
    public interface PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int count, IntByReference params);
    };
    public interface PFNGLGETUNIFORMI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, LongByReference params);
    };
    public interface PFNGLGETUNIFORMUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, LongByReference params);
    };
    public interface PFNGLPROGRAMUNIFORM1I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x);
    };
    public interface PFNGLPROGRAMUNIFORM1I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM1UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x);
    };
    public interface PFNGLPROGRAMUNIFORM1UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x, long y);
    };
    public interface PFNGLPROGRAMUNIFORM2I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM2UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x, long y);
    };
    public interface PFNGLPROGRAMUNIFORM2UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x, long y, long z);
    };
    public interface PFNGLPROGRAMUNIFORM3I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM3UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x, long y, long z);
    };
    public interface PFNGLPROGRAMUNIFORM3UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x, long y, long z, long w);
    };
    public interface PFNGLPROGRAMUNIFORM4I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLPROGRAMUNIFORM4UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long x, long y, long z, long w);
    };
    public interface PFNGLPROGRAMUNIFORM4UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM1I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x);
    };
    public interface PFNGLUNIFORM1I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM1UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x);
    };
    public interface PFNGLUNIFORM1UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM2I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x, long y);
    };
    public interface PFNGLUNIFORM2I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM2UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x, long y);
    };
    public interface PFNGLUNIFORM2UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM3I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x, long y, long z);
    };
    public interface PFNGLUNIFORM3I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM3UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x, long y, long z);
    };
    public interface PFNGLUNIFORM3UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM4I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x, long y, long z, long w);
    };
    public interface PFNGLUNIFORM4I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORM4UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long x, long y, long z, long w);
    };
    public interface PFNGLUNIFORM4UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLCOLOR3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue);
    };
    public interface PFNGLCOLOR3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLCOLOR4HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue, short alpha);
    };
    public interface PFNGLCOLOR4HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLFOGCOORDHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short fog);
    };
    public interface PFNGLFOGCOORDHVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference fog);
    };
    public interface PFNGLMULTITEXCOORD1HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s);
    };
    public interface PFNGLMULTITEXCOORD1HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD2HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t);
    };
    public interface PFNGLMULTITEXCOORD2HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t, short r);
    };
    public interface PFNGLMULTITEXCOORD3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLMULTITEXCOORD4HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, short s, short t, short r, short q);
    };
    public interface PFNGLMULTITEXCOORD4HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, ShortByReference v);
    };
    public interface PFNGLNORMAL3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short nx, short ny, short nz);
    };
    public interface PFNGLNORMAL3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLSECONDARYCOLOR3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short red, short green, short blue);
    };
    public interface PFNGLSECONDARYCOLOR3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLTEXCOORD1HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short s);
    };
    public interface PFNGLTEXCOORD1HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLTEXCOORD2HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short s, short t);
    };
    public interface PFNGLTEXCOORD2HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLTEXCOORD3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short s, short t, short r);
    };
    public interface PFNGLTEXCOORD3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLTEXCOORD4HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short s, short t, short r, short q);
    };
    public interface PFNGLTEXCOORD4HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLVERTEX2HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y);
    };
    public interface PFNGLVERTEX2HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLVERTEX3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y, short z);
    };
    public interface PFNGLVERTEX3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLVERTEX4HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short x, short y, short z, short w);
    };
    public interface PFNGLVERTEX4HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB1HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x);
    };
    public interface PFNGLVERTEXATTRIB1HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB2HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y);
    };
    public interface PFNGLVERTEXATTRIB2HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB3HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z);
    };
    public interface PFNGLVERTEXATTRIB3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4HNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z, short w);
    };
    public interface PFNGLVERTEXATTRIB4HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS1HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS2HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS3HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS4HVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXWEIGHTHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(short weight);
    };
    public interface PFNGLVERTEXWEIGHTHVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference weight);
    };
    public interface PFNGLBEGINOCCLUSIONQUERYNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id);
    };
    public interface PFNGLDELETEOCCLUSIONQUERIESNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLENDOCCLUSIONQUERYNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLGENOCCLUSIONQUERIESNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLGETOCCLUSIONQUERYIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETOCCLUSIONQUERYUIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLISOCCLUSIONQUERYNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int buffer, int index, int count, IntByReference params);
    };
    public interface PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int buffer, int index, int count, IntByReference params);
    };
    public interface PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int buffer, int index, int count, FloatByReference params);
    };
    public interface PFNGLCOPYPATHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int resultPath, int srcPath);
    };
    public interface PFNGLCOVERFILLPATHINSTANCEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int numPaths, int pathNameType, Pointer paths, int pathBase, int coverMode, int transformType, FloatByReference transformValues);
    };
    public interface PFNGLCOVERFILLPATHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int coverMode);
    };
    public interface PFNGLCOVERSTROKEPATHINSTANCEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int numPaths, int pathNameType, Pointer paths, int pathBase, int coverMode, int transformType, FloatByReference transformValues);
    };
    public interface PFNGLCOVERSTROKEPATHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int name, int coverMode);
    };
    public interface PFNGLDELETEPATHSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int range);
    };
    public interface PFNGLGENPATHSNVPROC extends StdCallLibrary.StdCallCallback {
        int apply(int range);
    };
    public interface PFNGLGETPATHCOLORGENFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int color, int pname, FloatByReference value);
    };
    public interface PFNGLGETPATHCOLORGENIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int color, int pname, IntByReference value);
    };
    public interface PFNGLGETPATHCOMMANDSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int name, Pointer commands);
    };
    public interface PFNGLGETPATHCOORDSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int name, FloatByReference coords);
    };
    public interface PFNGLGETPATHDASHARRAYNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int name, FloatByReference dashArray);
    };
    public interface PFNGLGETPATHLENGTHNVPROC extends StdCallLibrary.StdCallCallback {
        float apply(int path, int startSegment, int numSegments);
    };
    public interface PFNGLGETPATHMETRICRANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int metricQueryMask, int fistPathName, int numPaths, int stride, FloatByReference metrics);
    };
    public interface PFNGLGETPATHMETRICSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int metricQueryMask, int numPaths, int pathNameType, Pointer paths, int pathBase, int stride, FloatByReference metrics);
    };
    public interface PFNGLGETPATHPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int name, int param, FloatByReference value);
    };
    public interface PFNGLGETPATHPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int name, int param, IntByReference value);
    };
    public interface PFNGLGETPATHSPACINGNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pathListMode, int numPaths, int pathNameType, Pointer paths, int pathBase, float advanceScale, float kerningScale, int transformType, FloatByReference returnedSpacing);
    };
    public interface PFNGLGETPATHTEXGENFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texCoordSet, int pname, FloatByReference value);
    };
    public interface PFNGLGETPATHTEXGENIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texCoordSet, int pname, IntByReference value);
    };
    public interface PFNGLINTERPOLATEPATHSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int resultPath, int pathA, int pathB, float weight);
    };
    public interface PFNGLISPATHNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int path);
    };
    public interface PFNGLISPOINTINFILLPATHNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int path, int mask, float x, float y);
    };
    public interface PFNGLISPOINTINSTROKEPATHNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int path, float x, float y);
    };
    public interface PFNGLPATHCOLORGENNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int color, int genMode, int colorFormat, FloatByReference coeffs);
    };
    public interface PFNGLPATHCOMMANDSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int numCommands, Pointer commands, int numCoords, int coordType, TestLibrary.GLvoid coords);
    };
    public interface PFNGLPATHCOORDSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int numCoords, int coordType, Pointer coords);
    };
    public interface PFNGLPATHCOVERDEPTHFUNCNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int zfunc);
    };
    public interface PFNGLPATHDASHARRAYNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int dashCount, FloatByReference dashArray);
    };
    public interface PFNGLPATHFOGGENNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int genMode);
    };
    public interface PFNGLPATHGLYPHRANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int firstPathName, int fontTarget, Pointer fontName, int fontStyle, int firstGlyph, int numGlyphs, int handleMissingGlyphs, int pathParameterTemplate, float emScale);
    };
    public interface PFNGLPATHGLYPHSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int firstPathName, int fontTarget, Pointer fontName, int fontStyle, int numGlyphs, int type, TestLibrary.GLvoid charcodes, int handleMissingGlyphs, int pathParameterTemplate, float emScale);
    };
    public interface PFNGLPATHPARAMETERFNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int pname, float value);
    };
    public interface PFNGLPATHPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int pname, FloatByReference value);
    };
    public interface PFNGLPATHPARAMETERINVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int pname, int value);
    };
    public interface PFNGLPATHPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int pname, IntByReference value);
    };
    public interface PFNGLPATHSTENCILDEPTHOFFSETNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(float factor, float units);
    };
    public interface PFNGLPATHSTENCILFUNCNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int func, int ref, int mask);
    };
    public interface PFNGLPATHSTRINGNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int format, int length, Pointer pathString);
    };
    public interface PFNGLPATHSUBCOMMANDSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int commandStart, int commandsToDelete, int numCommands, Pointer commands, int numCoords, int coordType, TestLibrary.GLvoid coords);
    };
    public interface PFNGLPATHSUBCOORDSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int coordStart, int numCoords, int coordType, Pointer coords);
    };
    public interface PFNGLPATHTEXGENNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texCoordSet, int genMode, int components, FloatByReference coeffs);
    };
    public interface PFNGLPOINTALONGPATHNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int path, int startSegment, int numSegments, float distance, FloatByReference x, FloatByReference y, FloatByReference tangentX, FloatByReference tangentY);
    };
    public interface PFNGLSTENCILFILLPATHINSTANCEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int numPaths, int pathNameType, Pointer paths, int pathBase, int fillMode, int mask, int transformType, FloatByReference transformValues);
    };
    public interface PFNGLSTENCILFILLPATHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int fillMode, int mask);
    };
    public interface PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int numPaths, int pathNameType, Pointer paths, int pathBase, int reference, int mask, int transformType, FloatByReference transformValues);
    };
    public interface PFNGLSTENCILSTROKEPATHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int path, int reference, int mask);
    };
    public interface PFNGLTRANSFORMPATHNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int resultPath, int srcPath, int transformType, FloatByReference transformValues);
    };
    public interface PFNGLWEIGHTPATHSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int resultPath, int numPaths, IntByReference paths, FloatByReference weights);
    };
    public interface PFNGLFLUSHPIXELDATARANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLPIXELDATARANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int length, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLPOINTPARAMETERINVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLPOINTPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLGETVIDEOI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_slot, int pname, LongByReference params);
    };
    public interface PFNGLGETVIDEOIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_slot, int pname, IntByReference params);
    };
    public interface PFNGLGETVIDEOUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_slot, int pname, LongByReference params);
    };
    public interface PFNGLGETVIDEOUIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_slot, int pname, IntByReference params);
    };
    public interface PFNGLPRESENTFRAMEDUALFILLNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_slot, long minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int target1, int fill1, int target2, int fill2, int target3, int fill3);
    };
    public interface PFNGLPRESENTFRAMEKEYEDNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_slot, long minPresentTime, int beginPresentTimeId, int presentDurationId, int type, int target0, int fill0, int key0, int target1, int fill1, int key1);
    };
    public interface PFNGLPRIMITIVERESTARTINDEXNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index);
    };
    public interface PFNGLPRIMITIVERESTARTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLCOMBINERINPUTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int portion, int variable, int input, int mapping, int componentUsage);
    };
    public interface PFNGLCOMBINEROUTPUTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, byte abDotProduct, byte cdDotProduct, byte muxSum);
    };
    public interface PFNGLCOMBINERPARAMETERFNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLCOMBINERPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLCOMBINERPARAMETERINVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLCOMBINERPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLFINALCOMBINERINPUTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int variable, int input, int mapping, int componentUsage);
    };
    public interface PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int portion, int variable, int pname, FloatByReference params);
    };
    public interface PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int portion, int variable, int pname, IntByReference params);
    };
    public interface PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int portion, int pname, FloatByReference params);
    };
    public interface PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int portion, int pname, IntByReference params);
    };
    public interface PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int variable, int pname, FloatByReference params);
    };
    public interface PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int variable, int pname, IntByReference params);
    };
    public interface PFNGLCOMBINERSTAGEPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int pname, FloatByReference params);
    };
    public interface PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stage, int pname, FloatByReference params);
    };
    public interface PFNGLGETBUFFERPARAMETERUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, LongByReference params);
    };
    public interface PFNGLGETINTEGERUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int value, LongByReference result);
    };
    public interface PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int pname, LongByReference params);
    };
    public interface PFNGLISBUFFERRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int target);
    };
    public interface PFNGLISNAMEDBUFFERRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int buffer);
    };
    public interface PFNGLMAKEBUFFERNONRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target);
    };
    public interface PFNGLMAKEBUFFERRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int access);
    };
    public interface PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer);
    };
    public interface PFNGLMAKENAMEDBUFFERRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int buffer, int access);
    };
    public interface PFNGLPROGRAMUNIFORMUI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, long value);
    };
    public interface PFNGLPROGRAMUNIFORMUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int location, int count, LongByReference value);
    };
    public interface PFNGLUNIFORMUI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, long value);
    };
    public interface PFNGLUNIFORMUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int location, int count, LongByReference value);
    };
    public interface PFNGLTEXTUREBARRIERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations);
    };
    public interface PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations);
    };
    public interface PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations);
    };
    public interface PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int samples, int internalFormat, int width, int height, byte fixedSampleLocations);
    };
    public interface PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations);
    };
    public interface PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int texture, int target, int samples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations);
    };
    public interface PFNGLACTIVEVARYINGNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, Pointer name);
    };
    public interface PFNGLBEGINTRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int primitiveMode);
    };
    public interface PFNGLBINDBUFFERBASENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer);
    };
    public interface PFNGLBINDBUFFEROFFSETNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer, NativeSize offset);
    };
    public interface PFNGLBINDBUFFERRANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int buffer, NativeSize offset, NativeSize size);
    };
    public interface PFNGLENDTRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLGETACTIVEVARYINGNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int index, int bufSize, IntByReference length, IntByReference size, IntByReference type, Pointer name);
    };
    public interface PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int index, IntByReference location);
    };
    public interface PFNGLGETVARYINGLOCATIONNVPROC extends StdCallLibrary.StdCallCallback {
        int apply(int program, Pointer name);
    };
    public interface PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int count, IntByReference attribs, int bufferMode);
    };
    public interface PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int program, int count, IntByReference locations, int bufferMode);
    };
    public interface PFNGLBINDTRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id);
    };
    public interface PFNGLDELETETRANSFORMFEEDBACKSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLDRAWTRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode, int id);
    };
    public interface PFNGLGENTRANSFORMFEEDBACKSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLISTRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLPAUSETRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLRESUMETRANSFORMFEEDBACKNVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLVDPAUFININVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLVDPAUGETSURFACEIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(NativeSize surface, int pname, int bufSize, IntByReference length, IntByReference values);
    };
    public interface PFNGLVDPAUINITNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer vdpDevice, TestLibrary.GLvoid getProcAddress);
    };
    public interface PFNGLVDPAUISSURFACENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(NativeSize surface);
    };
    public interface PFNGLVDPAUMAPSURFACESNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int numSurfaces, NativeSizeByReference surfaces);
    };
    public interface PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC extends StdCallLibrary.StdCallCallback {
        NativeSize apply(Pointer vdpSurface, int target, int numTextureNames, IntByReference textureNames);
    };
    public interface PFNGLVDPAUREGISTERVIDEOSURFACENVPROC extends StdCallLibrary.StdCallCallback {
        NativeSize apply(Pointer vdpSurface, int target, int numTextureNames, IntByReference textureNames);
    };
    public interface PFNGLVDPAUSURFACEACCESSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(NativeSize surface, int access);
    };
    public interface PFNGLVDPAUUNMAPSURFACESNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int numSurface, NativeSizeByReference surfaces);
    };
    public interface PFNGLVDPAUUNREGISTERSURFACENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(NativeSize surface);
    };
    public interface PFNGLFLUSHVERTEXARRAYRANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLVERTEXARRAYRANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int length, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLGETVERTEXATTRIBLI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, LongByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBLUI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, LongByReference params);
    };
    public interface PFNGLVERTEXATTRIBL1I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x);
    };
    public interface PFNGLVERTEXATTRIBL1I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL1UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x);
    };
    public interface PFNGLVERTEXATTRIBL1UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL2I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x, long y);
    };
    public interface PFNGLVERTEXATTRIBL2I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL2UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x, long y);
    };
    public interface PFNGLVERTEXATTRIBL2UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL3I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x, long y, long z);
    };
    public interface PFNGLVERTEXATTRIBL3I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL3UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x, long y, long z);
    };
    public interface PFNGLVERTEXATTRIBL3UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL4I64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x, long y, long z, long w);
    };
    public interface PFNGLVERTEXATTRIBL4I64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBL4UI64NVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, long x, long y, long z, long w);
    };
    public interface PFNGLVERTEXATTRIBL4UI64VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, LongByReference v);
    };
    public interface PFNGLVERTEXATTRIBLFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, int stride);
    };
    public interface PFNGLBUFFERADDRESSRANGENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int index, long address, NativeSize length);
    };
    public interface PFNGLCOLORFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride);
    };
    public interface PFNGLEDGEFLAGFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int stride);
    };
    public interface PFNGLFOGCOORDFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride);
    };
    public interface PFNGLGETINTEGERUI64I_VNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int value, int index, LongByReference result);
    };
    public interface PFNGLINDEXFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride);
    };
    public interface PFNGLNORMALFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride);
    };
    public interface PFNGLSECONDARYCOLORFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride);
    };
    public interface PFNGLTEXCOORDFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride);
    };
    public interface PFNGLVERTEXATTRIBFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, byte normalized, int stride);
    };
    public interface PFNGLVERTEXATTRIBIFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, int stride);
    };
    public interface PFNGLVERTEXFORMATNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size, int type, int stride);
    };
    public interface PFNGLAREPROGRAMSRESIDENTNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int n, IntByReference ids, Pointer residences);
    };
    public interface PFNGLBINDPROGRAMNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id);
    };
    public interface PFNGLDELETEPROGRAMSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLEXECUTEPROGRAMNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id, FloatByReference params);
    };
    public interface PFNGLGENPROGRAMSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLGETPROGRAMPARAMETERDVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int pname, DoubleByReference params);
    };
    public interface PFNGLGETPROGRAMPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int pname, FloatByReference params);
    };
    public interface PFNGLGETPROGRAMSTRINGNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, Pointer program);
    };
    public interface PFNGLGETPROGRAMIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int id, int pname, IntByReference params);
    };
    public interface PFNGLGETTRACKMATRIXIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int address, int pname, IntByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBPOINTERVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, PointerByReference pointer);
    };
    public interface PFNGLGETVERTEXATTRIBDVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, DoubleByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, FloatByReference params);
    };
    public interface PFNGLGETVERTEXATTRIBIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int pname, IntByReference params);
    };
    public interface PFNGLISPROGRAMNVPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int id);
    };
    public interface PFNGLLOADPROGRAMNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int id, int len, Pointer program);
    };
    public interface PFNGLPROGRAMPARAMETER4DNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, double x, double y, double z, double w);
    };
    public interface PFNGLPROGRAMPARAMETER4DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, DoubleByReference params);
    };
    public interface PFNGLPROGRAMPARAMETER4FNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, float x, float y, float z, float w);
    };
    public interface PFNGLPROGRAMPARAMETER4FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, FloatByReference params);
    };
    public interface PFNGLPROGRAMPARAMETERS4DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int num, DoubleByReference params);
    };
    public interface PFNGLPROGRAMPARAMETERS4FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int index, int num, FloatByReference params);
    };
    public interface PFNGLREQUESTRESIDENTPROGRAMSNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, IntByReference ids);
    };
    public interface PFNGLTRACKMATRIXNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int address, int matrix, int transform);
    };
    public interface PFNGLVERTEXATTRIB1DNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x);
    };
    public interface PFNGLVERTEXATTRIB1DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB1FNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x);
    };
    public interface PFNGLVERTEXATTRIB1FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB1SNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x);
    };
    public interface PFNGLVERTEXATTRIB1SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB2DNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y);
    };
    public interface PFNGLVERTEXATTRIB2DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB2FNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y);
    };
    public interface PFNGLVERTEXATTRIB2FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB2SNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y);
    };
    public interface PFNGLVERTEXATTRIB2SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB3DNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z);
    };
    public interface PFNGLVERTEXATTRIB3DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB3FNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float z);
    };
    public interface PFNGLVERTEXATTRIB3FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB3SNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z);
    };
    public interface PFNGLVERTEXATTRIB3SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4DNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, double x, double y, double z, double w);
    };
    public interface PFNGLVERTEXATTRIB4DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIB4FNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, float x, float y, float z, float w);
    };
    public interface PFNGLVERTEXATTRIB4FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIB4SNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, short x, short y, short z, short w);
    };
    public interface PFNGLVERTEXATTRIB4SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIB4UBNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, byte x, byte y, byte z, byte w);
    };
    public interface PFNGLVERTEXATTRIB4UBVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, Pointer v);
    };
    public interface PFNGLVERTEXATTRIBPOINTERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int size, int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLVERTEXATTRIBS1DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBS1FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIBS1SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS2DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBS2FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIBS2SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS3DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBS3FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIBS3SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS4DVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, DoubleByReference v);
    };
    public interface PFNGLVERTEXATTRIBS4FVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, FloatByReference v);
    };
    public interface PFNGLVERTEXATTRIBS4SVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, ShortByReference v);
    };
    public interface PFNGLVERTEXATTRIBS4UBVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int index, int n, Pointer v);
    };
    public interface PFNGLBEGINVIDEOCAPTURENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot);
    };
    public interface PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int frame_region, NativeSize offset);
    };
    public interface PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int frame_region, int target, int texture);
    };
    public interface PFNGLENDVIDEOCAPTURENVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot);
    };
    public interface PFNGLGETVIDEOCAPTURESTREAMDVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int pname, DoubleByReference params);
    };
    public interface PFNGLGETVIDEOCAPTURESTREAMFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int pname, FloatByReference params);
    };
    public interface PFNGLGETVIDEOCAPTURESTREAMIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int pname, IntByReference params);
    };
    public interface PFNGLGETVIDEOCAPTUREIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int pname, IntByReference params);
    };
    public interface PFNGLVIDEOCAPTURENVPROC extends StdCallLibrary.StdCallCallback {
        int apply(int video_capture_slot, IntByReference sequence_num, LongByReference capture_time);
    };
    public interface PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int pname, DoubleByReference params);
    };
    public interface PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int pname, FloatByReference params);
    };
    public interface PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int video_capture_slot, int stream, int pname, IntByReference params);
    };
    public interface PFNGLCLEARDEPTHFOESPROC extends StdCallLibrary.StdCallCallback {
        void apply(double depth);
    };
    public interface PFNGLCLIPPLANEFOESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int plane, FloatByReference equation);
    };
    public interface PFNGLDEPTHRANGEFOESPROC extends StdCallLibrary.StdCallCallback {
        void apply(float n, float f);
    };
    public interface PFNGLFRUSTUMFOESPROC extends StdCallLibrary.StdCallCallback {
        void apply(float l, float r, float b, float t, float n, float f);
    };
    public interface PFNGLGETCLIPPLANEFOESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int plane, FloatByReference equation);
    };
    public interface PFNGLORTHOFOESPROC extends StdCallLibrary.StdCallCallback {
        void apply(float l, float r, float b, float t, float n, float f);
    };
    public interface PFNGLALPHAFUNCXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int func, int ref);
    };
    public interface PFNGLCLEARCOLORXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue, int alpha);
    };
    public interface PFNGLCLEARDEPTHXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int depth);
    };
    public interface PFNGLCOLOR4XPROC extends StdCallLibrary.StdCallCallback {
        void apply(int red, int green, int blue, int alpha);
    };
    public interface PFNGLDEPTHRANGEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int zNear, int zFar);
    };
    public interface PFNGLFOGXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLFOGXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLFRUSTUMFPROC extends StdCallLibrary.StdCallCallback {
        void apply(float left, float right, float bottom, float top, float zNear, float zFar);
    };
    public interface PFNGLFRUSTUMXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int left, int right, int bottom, int top, int zNear, int zFar);
    };
    public interface PFNGLLIGHTMODELXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLLIGHTMODELXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLLIGHTXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, int param);
    };
    public interface PFNGLLIGHTXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, IntByReference params);
    };
    public interface PFNGLLINEWIDTHXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int width);
    };
    public interface PFNGLLOADMATRIXXPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference m);
    };
    public interface PFNGLMATERIALXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, int param);
    };
    public interface PFNGLMATERIALXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, IntByReference params);
    };
    public interface PFNGLMULTMATRIXXPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference m);
    };
    public interface PFNGLMULTITEXCOORD4XPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int s, int t, int r, int q);
    };
    public interface PFNGLNORMAL3XPROC extends StdCallLibrary.StdCallCallback {
        void apply(int nx, int ny, int nz);
    };
    public interface PFNGLORTHOFPROC extends StdCallLibrary.StdCallCallback {
        void apply(float left, float right, float bottom, float top, float zNear, float zFar);
    };
    public interface PFNGLORTHOXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int left, int right, int bottom, int top, int zNear, int zFar);
    };
    public interface PFNGLPOINTSIZEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int size);
    };
    public interface PFNGLPOLYGONOFFSETXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int factor, int units);
    };
    public interface PFNGLROTATEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int angle, int x, int y, int z);
    };
    public interface PFNGLSAMPLECOVERAGEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int value, byte invert);
    };
    public interface PFNGLSCALEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int z);
    };
    public interface PFNGLTEXENVXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLTEXENVXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLTEXPARAMETERXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, int param);
    };
    public interface PFNGLTRANSLATEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int z);
    };
    public interface PFNGLCLIPPLANEFPROC extends StdCallLibrary.StdCallCallback {
        void apply(int plane, FloatByReference equation);
    };
    public interface PFNGLCLIPPLANEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int plane, IntByReference equation);
    };
    public interface PFNGLGETCLIPPLANEFPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference eqn);
    };
    public interface PFNGLGETCLIPPLANEXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference eqn);
    };
    public interface PFNGLGETFIXEDVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLGETLIGHTXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, IntByReference params);
    };
    public interface PFNGLGETMATERIALXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, IntByReference params);
    };
    public interface PFNGLGETTEXENVXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int env, int pname, IntByReference params);
    };
    public interface PFNGLGETTEXPARAMETERXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLPOINTPARAMETERXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLPOINTPARAMETERXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLPOINTSIZEPOINTEROESPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLTEXPARAMETERXVPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLERRORSTRINGREGALPROC extends Callback {
        Pointer apply(int error);
    };
    public interface PFNGLGETEXTENSIONREGALPROC extends StdCallLibrary.StdCallCallback {
        byte apply(Pointer ext);
    };
    public interface PFNGLISSUPPORTEDREGALPROC extends StdCallLibrary.StdCallCallback {
        byte apply(Pointer ext);
    };
    public interface GLLOGPROCREGAL extends StdCallLibrary.StdCallCallback {
        void apply(int stream, int length, Pointer message, TestLibrary.GLvoid context);
    };
    public interface PFNGLLOGMESSAGECALLBACKREGALPROC extends StdCallLibrary.StdCallCallback {
        void apply(TestLibrary.GLLOGPROCREGAL callback);
    };
    public interface PFNGLDETAILTEXFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int n, FloatByReference points);
    };
    public interface PFNGLGETDETAILTEXFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference points);
    };
    public interface PFNGLFOGFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int n, FloatByReference points);
    };
    public interface PFNGLGETFOGFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference points);
    };
    public interface PFNGLSAMPLEMASKSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(float value, byte invert);
    };
    public interface PFNGLSAMPLEPATTERNSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pattern);
    };
    public interface PFNGLGETSHARPENTEXFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, FloatByReference points);
    };
    public interface PFNGLSHARPENTEXFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int n, FloatByReference points);
    };
    public interface PFNGLTEXIMAGE4DSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int internalformat, int width, int height, int depth, int extent, int border, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLTEXSUBIMAGE4DSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int extent, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLGETTEXFILTERFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int filter, FloatByReference weights);
    };
    public interface PFNGLTEXFILTERFUNCSGISPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int filter, int n, FloatByReference weights);
    };
    public interface PFNGLASYNCMARKERSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int marker);
    };
    public interface PFNGLDELETEASYNCMARKERSSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int marker, int range);
    };
    public interface PFNGLFINISHASYNCSGIXPROC extends StdCallLibrary.StdCallCallback {
        int apply(IntByReference markerp);
    };
    public interface PFNGLGENASYNCMARKERSSGIXPROC extends StdCallLibrary.StdCallCallback {
        int apply(int range);
    };
    public interface PFNGLISASYNCMARKERSGIXPROC extends StdCallLibrary.StdCallCallback {
        byte apply(int marker);
    };
    public interface PFNGLPOLLASYNCSGIXPROC extends StdCallLibrary.StdCallCallback {
        int apply(IntByReference markerp);
    };
    public interface PFNGLFLUSHRASTERSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLTEXTUREFOGSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname);
    };
    public interface PFNGLFRAGMENTCOLORMATERIALSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int mode);
    };
    public interface PFNGLFRAGMENTLIGHTMODELFSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLFRAGMENTLIGHTMODELFVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLFRAGMENTLIGHTMODELISGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLFRAGMENTLIGHTMODELIVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLFRAGMENTLIGHTFSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, float param);
    };
    public interface PFNGLFRAGMENTLIGHTFVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, FloatByReference params);
    };
    public interface PFNGLFRAGMENTLIGHTISGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, int param);
    };
    public interface PFNGLFRAGMENTLIGHTIVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int pname, IntByReference params);
    };
    public interface PFNGLFRAGMENTMATERIALFSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, float param);
    };
    public interface PFNGLFRAGMENTMATERIALFVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, FloatByReference params);
    };
    public interface PFNGLFRAGMENTMATERIALISGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, int param);
    };
    public interface PFNGLFRAGMENTMATERIALIVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, IntByReference params);
    };
    public interface PFNGLGETFRAGMENTLIGHTFVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int value, FloatByReference data);
    };
    public interface PFNGLGETFRAGMENTLIGHTIVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int light, int value, IntByReference data);
    };
    public interface PFNGLGETFRAGMENTMATERIALFVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, FloatByReference data);
    };
    public interface PFNGLGETFRAGMENTMATERIALIVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int face, int pname, IntByReference data);
    };
    public interface PFNGLFRAMEZOOMSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int factor);
    };
    public interface PFNGLPIXELTEXGENSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int mode);
    };
    public interface PFNGLREFERENCEPLANESGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(DoubleByReference equation);
    };
    public interface PFNGLSPRITEPARAMETERFSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, float param);
    };
    public interface PFNGLSPRITEPARAMETERFVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, FloatByReference params);
    };
    public interface PFNGLSPRITEPARAMETERISGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, int param);
    };
    public interface PFNGLSPRITEPARAMETERIVSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply(int pname, IntByReference params);
    };
    public interface PFNGLTAGSAMPLEBUFFERSGIXPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLCOLORTABLEPARAMETERFVSGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLCOLORTABLEPARAMETERIVSGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLCOLORTABLESGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int width, int format, int type, TestLibrary.GLvoid table);
    };
    public interface PFNGLCOPYCOLORTABLESGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int internalformat, int x, int y, int width);
    };
    public interface PFNGLGETCOLORTABLEPARAMETERFVSGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, FloatByReference params);
    };
    public interface PFNGLGETCOLORTABLEPARAMETERIVSGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int pname, IntByReference params);
    };
    public interface PFNGLGETCOLORTABLESGIPROC extends StdCallLibrary.StdCallCallback {
        void apply(int target, int format, int type, TestLibrary.GLvoid table);
    };
    public interface PFNGLFINISHTEXTURESUNXPROC extends StdCallLibrary.StdCallCallback {
        void apply();
    };
    public interface PFNGLGLOBALALPHAFACTORBSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte factor);
    };
    public interface PFNGLGLOBALALPHAFACTORDSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(double factor);
    };
    public interface PFNGLGLOBALALPHAFACTORFSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float factor);
    };
    public interface PFNGLGLOBALALPHAFACTORISUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int factor);
    };
    public interface PFNGLGLOBALALPHAFACTORSSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(short factor);
    };
    public interface PFNGLGLOBALALPHAFACTORUBSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte factor);
    };
    public interface PFNGLGLOBALALPHAFACTORUISUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int factor);
    };
    public interface PFNGLGLOBALALPHAFACTORUSSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(short factor);
    };
    public interface PFNGLREADVIDEOPIXELSSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    };
    public interface PFNGLREPLACEMENTCODEPOINTERSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int type, int stride, TestLibrary.GLvoid pointer);
    };
    public interface PFNGLREPLACEMENTCODEUBSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte code);
    };
    public interface PFNGLREPLACEMENTCODEUBVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer code);
    };
    public interface PFNGLREPLACEMENTCODEUISUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int code);
    };
    public interface PFNGLREPLACEMENTCODEUIVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference code);
    };
    public interface PFNGLREPLACEMENTCODEUSSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(short code);
    };
    public interface PFNGLREPLACEMENTCODEUSVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(ShortByReference code);
    };
    public interface PFNGLCOLOR3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float r, float g, float b, float x, float y, float z);
    };
    public interface PFNGLCOLOR3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference c, FloatByReference v);
    };
    public interface PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference c, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLCOLOR4UBVERTEX2FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte r, byte g, byte b, byte a, float x, float y);
    };
    public interface PFNGLCOLOR4UBVERTEX2FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer c, FloatByReference v);
    };
    public interface PFNGLCOLOR4UBVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(byte r, byte g, byte b, byte a, float x, float y, float z);
    };
    public interface PFNGLCOLOR4UBVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(Pointer c, FloatByReference v);
    };
    public interface PFNGLNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference n, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float r, float g, float b, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference c, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference c, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, byte r, byte g, byte b, byte a, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, Pointer c, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference tc, FloatByReference c, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference tc, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float s, float t, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference tc, FloatByReference v);
    };
    public interface PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(int rc, float x, float y, float z);
    };
    public interface PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(IntByReference rc, FloatByReference v);
    };
    public interface PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, float r, float g, float b, float x, float y, float z);
    };
    public interface PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, FloatByReference c, FloatByReference v);
    };
    public interface PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, FloatByReference c, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);
    };
    public interface PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, Pointer c, FloatByReference v);
    };
    public interface PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, float nx, float ny, float nz, float x, float y, float z);
    };
    public interface PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLTEXCOORD2FVERTEX3FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, float x, float y, float z);
    };
    public interface PFNGLTEXCOORD2FVERTEX3FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, FloatByReference v);
    };
    public interface PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);
    };
    public interface PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, FloatByReference c, FloatByReference n, FloatByReference v);
    };
    public interface PFNGLTEXCOORD4FVERTEX4FSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(float s, float t, float p, float q, float x, float y, float z, float w);
    };
    public interface PFNGLTEXCOORD4FVERTEX4FVSUNPROC extends StdCallLibrary.StdCallCallback {
        void apply(FloatByReference tc, FloatByReference v);
    };
    public interface PFNGLADDSWAPHINTRECTWINPROC extends StdCallLibrary.StdCallCallback {
        void apply(int x, int y, int width, int height);
    };
    /**
     * Original signature : <code>void glAccum(GLenum, GLfloat)</code><br>
     * <i>native declaration : line 841</i>
     */
    void glAccum(int op, float value);
    /**
     * Original signature : <code>void glAlphaFunc(GLenum, GLclampf)</code><br>
     * <i>native declaration : line 842</i>
     */
    void glAlphaFunc(int func, float ref);
    /**
     * Original signature : <code>GLboolean glAreTexturesResident(GLsizei, const GLuint*, GLboolean*)</code><br>
     * <i>native declaration : line 843</i><br>
     * @deprecated use the safer methods {@link #glAreTexturesResident(int, int[], java.nio.ByteBuffer)} and {@link #glAreTexturesResident(int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    byte glAreTexturesResident(int n, IntByReference textures, Pointer residences);
    /**
     * Original signature : <code>GLboolean glAreTexturesResident(GLsizei, const GLuint*, GLboolean*)</code><br>
     * <i>native declaration : line 843</i>
     */
    byte glAreTexturesResident(int n, int textures[], ByteBuffer residences);
    /**
     * Original signature : <code>void glArrayElement(GLint)</code><br>
     * <i>native declaration : line 844</i>
     */
    void glArrayElement(int i);
    /**
     * Original signature : <code>void glBegin(GLenum)</code><br>
     * <i>native declaration : line 845</i>
     */
    void glBegin(int mode);
    /**
     * Original signature : <code>void glBindTexture(GLenum, GLuint)</code><br>
     * <i>native declaration : line 846</i>
     */
    void glBindTexture(int target, int texture);
    /**
     * Original signature : <code>void glBitmap(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte*)</code><br>
     * <i>native declaration : line 847</i><br>
     * @deprecated use the safer methods {@link #glBitmap(int, int, float, float, float, float, java.nio.ByteBuffer)} and {@link #glBitmap(int, int, float, float, float, float, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, Pointer bitmap);
    /**
     * Original signature : <code>void glBitmap(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte*)</code><br>
     * <i>native declaration : line 847</i>
     */
    void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ByteBuffer bitmap);
    /**
     * Original signature : <code>void glBlendFunc(GLenum, GLenum)</code><br>
     * <i>native declaration : line 848</i>
     */
    void glBlendFunc(int sfactor, int dfactor);
    /**
     * Original signature : <code>void glCallList(GLuint)</code><br>
     * <i>native declaration : line 849</i>
     */
    void glCallList(int list);
    /**
     * Original signature : <code>void glCallLists(GLsizei, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 850</i>
     */
    void glCallLists(int n, int type, TestLibrary.GLvoid lists);
    /**
     * Original signature : <code>void glClear(GLbitfield)</code><br>
     * <i>native declaration : line 851</i>
     */
    void glClear(int mask);
    /**
     * Original signature : <code>void glClearAccum(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 852</i>
     */
    void glClearAccum(float red, float green, float blue, float alpha);
    /**
     * Original signature : <code>void glClearColor(GLclampf, GLclampf, GLclampf, GLclampf)</code><br>
     * <i>native declaration : line 853</i>
     */
    void glClearColor(float red, float green, float blue, float alpha);
    /**
     * Original signature : <code>void glClearDepth(GLclampd)</code><br>
     * <i>native declaration : line 854</i>
     */
    void glClearDepth(double depth);
    /**
     * Original signature : <code>void glClearIndex(GLfloat)</code><br>
     * <i>native declaration : line 855</i>
     */
    void glClearIndex(float c);
    /**
     * Original signature : <code>void glClearStencil(GLint)</code><br>
     * <i>native declaration : line 856</i>
     */
    void glClearStencil(int s);
    /**
     * Original signature : <code>void glClipPlane(GLenum, const GLdouble*)</code><br>
     * <i>native declaration : line 857</i><br>
     * @deprecated use the safer methods {@link #glClipPlane(int, java.nio.DoubleBuffer)} and {@link #glClipPlane(int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glClipPlane(int plane, DoubleByReference equation);
    /**
     * Original signature : <code>void glClipPlane(GLenum, const GLdouble*)</code><br>
     * <i>native declaration : line 857</i>
     */
    void glClipPlane(int plane, DoubleBuffer equation);
    /**
     * Original signature : <code>void glColor3b(GLbyte, GLbyte, GLbyte)</code><br>
     * <i>native declaration : line 858</i>
     */
    void glColor3b(byte red, byte green, byte blue);
    /**
     * Original signature : <code>void glColor3bv(const GLbyte*)</code><br>
     * <i>native declaration : line 859</i><br>
     * @deprecated use the safer methods {@link #glColor3bv(java.nio.ByteBuffer)} and {@link #glColor3bv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glColor3bv(Pointer v);
    /**
     * Original signature : <code>void glColor3bv(const GLbyte*)</code><br>
     * <i>native declaration : line 859</i>
     */
    void glColor3bv(ByteBuffer v);
    /**
     * Original signature : <code>void glColor3d(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 860</i>
     */
    void glColor3d(double red, double green, double blue);
    /**
     * Original signature : <code>void glColor3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 861</i><br>
     * @deprecated use the safer methods {@link #glColor3dv(java.nio.DoubleBuffer)} and {@link #glColor3dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glColor3dv(DoubleByReference v);
    /**
     * Original signature : <code>void glColor3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 861</i>
     */
    void glColor3dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glColor3f(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 862</i>
     */
    void glColor3f(float red, float green, float blue);
    /**
     * Original signature : <code>void glColor3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 863</i><br>
     * @deprecated use the safer methods {@link #glColor3fv(java.nio.FloatBuffer)} and {@link #glColor3fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glColor3fv(FloatByReference v);
    /**
     * Original signature : <code>void glColor3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 863</i>
     */
    void glColor3fv(FloatBuffer v);
    /**
     * Original signature : <code>void glColor3i(GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 864</i>
     */
    void glColor3i(int red, int green, int blue);
    /**
     * Original signature : <code>void glColor3iv(const GLint*)</code><br>
     * <i>native declaration : line 865</i><br>
     * @deprecated use the safer methods {@link #glColor3iv(int[])} and {@link #glColor3iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glColor3iv(IntByReference v);
    /**
     * Original signature : <code>void glColor3iv(const GLint*)</code><br>
     * <i>native declaration : line 865</i>
     */
    void glColor3iv(int v[]);
    /**
     * Original signature : <code>void glColor3s(GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 866</i>
     */
    void glColor3s(short red, short green, short blue);
    /**
     * Original signature : <code>void glColor3sv(const GLshort*)</code><br>
     * <i>native declaration : line 867</i><br>
     * @deprecated use the safer methods {@link #glColor3sv(java.nio.ShortBuffer)} and {@link #glColor3sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glColor3sv(ShortByReference v);
    /**
     * Original signature : <code>void glColor3sv(const GLshort*)</code><br>
     * <i>native declaration : line 867</i>
     */
    void glColor3sv(ShortBuffer v);
    /**
     * Original signature : <code>void glColor3ub(GLubyte, GLubyte, GLubyte)</code><br>
     * <i>native declaration : line 868</i>
     */
    void glColor3ub(byte red, byte green, byte blue);
    /**
     * Original signature : <code>void glColor3ubv(const GLubyte*)</code><br>
     * <i>native declaration : line 869</i><br>
     * @deprecated use the safer methods {@link #glColor3ubv(java.nio.ByteBuffer)} and {@link #glColor3ubv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glColor3ubv(Pointer v);
    /**
     * Original signature : <code>void glColor3ubv(const GLubyte*)</code><br>
     * <i>native declaration : line 869</i>
     */
    void glColor3ubv(ByteBuffer v);
    /**
     * Original signature : <code>void glColor3ui(GLuint, GLuint, GLuint)</code><br>
     * <i>native declaration : line 870</i>
     */
    void glColor3ui(int red, int green, int blue);
    /**
     * Original signature : <code>void glColor3uiv(const GLuint*)</code><br>
     * <i>native declaration : line 871</i><br>
     * @deprecated use the safer methods {@link #glColor3uiv(int[])} and {@link #glColor3uiv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glColor3uiv(IntByReference v);
    /**
     * Original signature : <code>void glColor3uiv(const GLuint*)</code><br>
     * <i>native declaration : line 871</i>
     */
    void glColor3uiv(int v[]);
    /**
     * Original signature : <code>void glColor3us(GLushort, GLushort, GLushort)</code><br>
     * <i>native declaration : line 872</i>
     */
    void glColor3us(short red, short green, short blue);
    /**
     * Original signature : <code>void glColor3usv(const GLushort*)</code><br>
     * <i>native declaration : line 873</i><br>
     * @deprecated use the safer methods {@link #glColor3usv(java.nio.ShortBuffer)} and {@link #glColor3usv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glColor3usv(ShortByReference v);
    /**
     * Original signature : <code>void glColor3usv(const GLushort*)</code><br>
     * <i>native declaration : line 873</i>
     */
    void glColor3usv(ShortBuffer v);
    /**
     * Original signature : <code>void glColor4b(GLbyte, GLbyte, GLbyte, GLbyte)</code><br>
     * <i>native declaration : line 874</i>
     */
    void glColor4b(byte red, byte green, byte blue, byte alpha);
    /**
     * Original signature : <code>void glColor4bv(const GLbyte*)</code><br>
     * <i>native declaration : line 875</i><br>
     * @deprecated use the safer methods {@link #glColor4bv(java.nio.ByteBuffer)} and {@link #glColor4bv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glColor4bv(Pointer v);
    /**
     * Original signature : <code>void glColor4bv(const GLbyte*)</code><br>
     * <i>native declaration : line 875</i>
     */
    void glColor4bv(ByteBuffer v);
    /**
     * Original signature : <code>void glColor4d(GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 876</i>
     */
    void glColor4d(double red, double green, double blue, double alpha);
    /**
     * Original signature : <code>void glColor4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 877</i><br>
     * @deprecated use the safer methods {@link #glColor4dv(java.nio.DoubleBuffer)} and {@link #glColor4dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glColor4dv(DoubleByReference v);
    /**
     * Original signature : <code>void glColor4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 877</i>
     */
    void glColor4dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glColor4f(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 878</i>
     */
    void glColor4f(float red, float green, float blue, float alpha);
    /**
     * Original signature : <code>void glColor4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 879</i><br>
     * @deprecated use the safer methods {@link #glColor4fv(java.nio.FloatBuffer)} and {@link #glColor4fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glColor4fv(FloatByReference v);
    /**
     * Original signature : <code>void glColor4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 879</i>
     */
    void glColor4fv(FloatBuffer v);
    /**
     * Original signature : <code>void glColor4i(GLint, GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 880</i>
     */
    void glColor4i(int red, int green, int blue, int alpha);
    /**
     * Original signature : <code>void glColor4iv(const GLint*)</code><br>
     * <i>native declaration : line 881</i><br>
     * @deprecated use the safer methods {@link #glColor4iv(int[])} and {@link #glColor4iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glColor4iv(IntByReference v);
    /**
     * Original signature : <code>void glColor4iv(const GLint*)</code><br>
     * <i>native declaration : line 881</i>
     */
    void glColor4iv(int v[]);
    /**
     * Original signature : <code>void glColor4s(GLshort, GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 882</i>
     */
    void glColor4s(short red, short green, short blue, short alpha);
    /**
     * Original signature : <code>void glColor4sv(const GLshort*)</code><br>
     * <i>native declaration : line 883</i><br>
     * @deprecated use the safer methods {@link #glColor4sv(java.nio.ShortBuffer)} and {@link #glColor4sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glColor4sv(ShortByReference v);
    /**
     * Original signature : <code>void glColor4sv(const GLshort*)</code><br>
     * <i>native declaration : line 883</i>
     */
    void glColor4sv(ShortBuffer v);
    /**
     * Original signature : <code>void glColor4ub(GLubyte, GLubyte, GLubyte, GLubyte)</code><br>
     * <i>native declaration : line 884</i>
     */
    void glColor4ub(byte red, byte green, byte blue, byte alpha);
    /**
     * Original signature : <code>void glColor4ubv(const GLubyte*)</code><br>
     * <i>native declaration : line 885</i><br>
     * @deprecated use the safer methods {@link #glColor4ubv(java.nio.ByteBuffer)} and {@link #glColor4ubv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glColor4ubv(Pointer v);
    /**
     * Original signature : <code>void glColor4ubv(const GLubyte*)</code><br>
     * <i>native declaration : line 885</i>
     */
    void glColor4ubv(ByteBuffer v);
    /**
     * Original signature : <code>void glColor4ui(GLuint, GLuint, GLuint, GLuint)</code><br>
     * <i>native declaration : line 886</i>
     */
    void glColor4ui(int red, int green, int blue, int alpha);
    /**
     * Original signature : <code>void glColor4uiv(const GLuint*)</code><br>
     * <i>native declaration : line 887</i><br>
     * @deprecated use the safer methods {@link #glColor4uiv(int[])} and {@link #glColor4uiv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glColor4uiv(IntByReference v);
    /**
     * Original signature : <code>void glColor4uiv(const GLuint*)</code><br>
     * <i>native declaration : line 887</i>
     */
    void glColor4uiv(int v[]);
    /**
     * Original signature : <code>void glColor4us(GLushort, GLushort, GLushort, GLushort)</code><br>
     * <i>native declaration : line 888</i>
     */
    void glColor4us(short red, short green, short blue, short alpha);
    /**
     * Original signature : <code>void glColor4usv(const GLushort*)</code><br>
     * <i>native declaration : line 889</i><br>
     * @deprecated use the safer methods {@link #glColor4usv(java.nio.ShortBuffer)} and {@link #glColor4usv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glColor4usv(ShortByReference v);
    /**
     * Original signature : <code>void glColor4usv(const GLushort*)</code><br>
     * <i>native declaration : line 889</i>
     */
    void glColor4usv(ShortBuffer v);
    /**
     * Original signature : <code>void glColorMask(GLboolean, GLboolean, GLboolean, GLboolean)</code><br>
     * <i>native declaration : line 890</i>
     */
    void glColorMask(byte red, byte green, byte blue, byte alpha);
    /**
     * Original signature : <code>void glColorMaterial(GLenum, GLenum)</code><br>
     * <i>native declaration : line 891</i>
     */
    void glColorMaterial(int face, int mode);
    /**
     * Original signature : <code>void glColorPointer(GLint, GLenum, GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 892</i>
     */
    void glColorPointer(int size, int type, int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>void glCopyPixels(GLint, GLint, GLsizei, GLsizei, GLenum)</code><br>
     * <i>native declaration : line 893</i>
     */
    void glCopyPixels(int x, int y, int width, int height, int type);
    /**
     * Original signature : <code>void glCopyTexImage1D(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint)</code><br>
     * <i>native declaration : line 894</i>
     */
    void glCopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border);
    /**
     * Original signature : <code>void glCopyTexImage2D(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint)</code><br>
     * <i>native declaration : line 895</i>
     */
    void glCopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border);
    /**
     * Original signature : <code>void glCopyTexSubImage1D(GLenum, GLint, GLint, GLint, GLint, GLsizei)</code><br>
     * <i>native declaration : line 896</i>
     */
    void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);
    /**
     * Original signature : <code>void glCopyTexSubImage2D(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)</code><br>
     * <i>native declaration : line 897</i>
     */
    void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
    /**
     * Original signature : <code>void glCullFace(GLenum)</code><br>
     * <i>native declaration : line 898</i>
     */
    void glCullFace(int mode);
    /**
     * Original signature : <code>void glDeleteLists(GLuint, GLsizei)</code><br>
     * <i>native declaration : line 899</i>
     */
    void glDeleteLists(int list, int range);
    /**
     * Original signature : <code>void glDeleteTextures(GLsizei, const GLuint*)</code><br>
     * <i>native declaration : line 900</i><br>
     * @deprecated use the safer methods {@link #glDeleteTextures(int, int[])} and {@link #glDeleteTextures(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glDeleteTextures(int n, IntByReference textures);
    /**
     * Original signature : <code>void glDeleteTextures(GLsizei, const GLuint*)</code><br>
     * <i>native declaration : line 900</i>
     */
    void glDeleteTextures(int n, int textures[]);
    /**
     * Original signature : <code>void glDepthFunc(GLenum)</code><br>
     * <i>native declaration : line 901</i>
     */
    void glDepthFunc(int func);
    /**
     * Original signature : <code>void glDepthMask(GLboolean)</code><br>
     * <i>native declaration : line 902</i>
     */
    void glDepthMask(byte flag);
    /**
     * Original signature : <code>void glDepthRange(GLclampd, GLclampd)</code><br>
     * <i>native declaration : line 903</i>
     */
    void glDepthRange(double zNear, double zFar);
    /**
     * Original signature : <code>void glDisable(GLenum)</code><br>
     * <i>native declaration : line 904</i>
     */
    void glDisable(int cap);
    /**
     * Original signature : <code>void glDisableClientState(GLenum)</code><br>
     * <i>native declaration : line 905</i>
     */
    void glDisableClientState(int array);
    /**
     * Original signature : <code>void glDrawArrays(GLenum, GLint, GLsizei)</code><br>
     * <i>native declaration : line 906</i>
     */
    void glDrawArrays(int mode, int first, int count);
    /**
     * Original signature : <code>void glDrawBuffer(GLenum)</code><br>
     * <i>native declaration : line 907</i>
     */
    void glDrawBuffer(int mode);
    /**
     * Original signature : <code>void glDrawElements(GLenum, GLsizei, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 908</i>
     */
    void glDrawElements(int mode, int count, int type, TestLibrary.GLvoid indices);
    /**
     * Original signature : <code>void glDrawPixels(GLsizei, GLsizei, GLenum, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 909</i>
     */
    void glDrawPixels(int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glEdgeFlag(GLboolean)</code><br>
     * <i>native declaration : line 910</i>
     */
    void glEdgeFlag(byte flag);
    /**
     * Original signature : <code>void glEdgeFlagPointer(GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 911</i>
     */
    void glEdgeFlagPointer(int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>void glEdgeFlagv(const GLboolean*)</code><br>
     * <i>native declaration : line 912</i><br>
     * @deprecated use the safer methods {@link #glEdgeFlagv(java.nio.ByteBuffer)} and {@link #glEdgeFlagv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glEdgeFlagv(Pointer flag);
    /**
     * Original signature : <code>void glEdgeFlagv(const GLboolean*)</code><br>
     * <i>native declaration : line 912</i>
     */
    void glEdgeFlagv(ByteBuffer flag);
    /**
     * Original signature : <code>void glEnable(GLenum)</code><br>
     * <i>native declaration : line 913</i>
     */
    void glEnable(int cap);
    /**
     * Original signature : <code>void glEnableClientState(GLenum)</code><br>
     * <i>native declaration : line 914</i>
     */
    void glEnableClientState(int array);
    /**
     * Original signature : <code>void glEnd()</code><br>
     * <i>native declaration : line 915</i>
     */
    void glEnd();
    /**
     * Original signature : <code>void glEndList()</code><br>
     * <i>native declaration : line 916</i>
     */
    void glEndList();
    /**
     * Original signature : <code>void glEvalCoord1d(GLdouble)</code><br>
     * <i>native declaration : line 917</i>
     */
    void glEvalCoord1d(double u);
    /**
     * Original signature : <code>void glEvalCoord1dv(const GLdouble*)</code><br>
     * <i>native declaration : line 918</i><br>
     * @deprecated use the safer methods {@link #glEvalCoord1dv(java.nio.DoubleBuffer)} and {@link #glEvalCoord1dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glEvalCoord1dv(DoubleByReference u);
    /**
     * Original signature : <code>void glEvalCoord1dv(const GLdouble*)</code><br>
     * <i>native declaration : line 918</i>
     */
    void glEvalCoord1dv(DoubleBuffer u);
    /**
     * Original signature : <code>void glEvalCoord1f(GLfloat)</code><br>
     * <i>native declaration : line 919</i>
     */
    void glEvalCoord1f(float u);
    /**
     * Original signature : <code>void glEvalCoord1fv(const GLfloat*)</code><br>
     * <i>native declaration : line 920</i><br>
     * @deprecated use the safer methods {@link #glEvalCoord1fv(java.nio.FloatBuffer)} and {@link #glEvalCoord1fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glEvalCoord1fv(FloatByReference u);
    /**
     * Original signature : <code>void glEvalCoord1fv(const GLfloat*)</code><br>
     * <i>native declaration : line 920</i>
     */
    void glEvalCoord1fv(FloatBuffer u);
    /**
     * Original signature : <code>void glEvalCoord2d(GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 921</i>
     */
    void glEvalCoord2d(double u, double v);
    /**
     * Original signature : <code>void glEvalCoord2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 922</i><br>
     * @deprecated use the safer methods {@link #glEvalCoord2dv(java.nio.DoubleBuffer)} and {@link #glEvalCoord2dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glEvalCoord2dv(DoubleByReference u);
    /**
     * Original signature : <code>void glEvalCoord2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 922</i>
     */
    void glEvalCoord2dv(DoubleBuffer u);
    /**
     * Original signature : <code>void glEvalCoord2f(GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 923</i>
     */
    void glEvalCoord2f(float u, float v);
    /**
     * Original signature : <code>void glEvalCoord2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 924</i><br>
     * @deprecated use the safer methods {@link #glEvalCoord2fv(java.nio.FloatBuffer)} and {@link #glEvalCoord2fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glEvalCoord2fv(FloatByReference u);
    /**
     * Original signature : <code>void glEvalCoord2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 924</i>
     */
    void glEvalCoord2fv(FloatBuffer u);
    /**
     * Original signature : <code>void glEvalMesh1(GLenum, GLint, GLint)</code><br>
     * <i>native declaration : line 925</i>
     */
    void glEvalMesh1(int mode, int i1, int i2);
    /**
     * Original signature : <code>void glEvalMesh2(GLenum, GLint, GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 926</i>
     */
    void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);
    /**
     * Original signature : <code>void glEvalPoint1(GLint)</code><br>
     * <i>native declaration : line 927</i>
     */
    void glEvalPoint1(int i);
    /**
     * Original signature : <code>void glEvalPoint2(GLint, GLint)</code><br>
     * <i>native declaration : line 928</i>
     */
    void glEvalPoint2(int i, int j);
    /**
     * Original signature : <code>void glFeedbackBuffer(GLsizei, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 929</i><br>
     * @deprecated use the safer methods {@link #glFeedbackBuffer(int, int, java.nio.FloatBuffer)} and {@link #glFeedbackBuffer(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glFeedbackBuffer(int size, int type, FloatByReference buffer);
    /**
     * Original signature : <code>void glFeedbackBuffer(GLsizei, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 929</i>
     */
    void glFeedbackBuffer(int size, int type, FloatBuffer buffer);
    /**
     * Original signature : <code>void glFinish()</code><br>
     * <i>native declaration : line 930</i>
     */
    void glFinish();
    /**
     * Original signature : <code>void glFlush()</code><br>
     * <i>native declaration : line 931</i>
     */
    void glFlush();
    /**
     * Original signature : <code>void glFogf(GLenum, GLfloat)</code><br>
     * <i>native declaration : line 932</i>
     */
    void glFogf(int pname, float param);
    /**
     * Original signature : <code>void glFogfv(GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 933</i><br>
     * @deprecated use the safer methods {@link #glFogfv(int, java.nio.FloatBuffer)} and {@link #glFogfv(int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glFogfv(int pname, FloatByReference params);
    /**
     * Original signature : <code>void glFogfv(GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 933</i>
     */
    void glFogfv(int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glFogi(GLenum, GLint)</code><br>
     * <i>native declaration : line 934</i>
     */
    void glFogi(int pname, int param);
    /**
     * Original signature : <code>void glFogiv(GLenum, const GLint*)</code><br>
     * <i>native declaration : line 935</i><br>
     * @deprecated use the safer methods {@link #glFogiv(int, int[])} and {@link #glFogiv(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glFogiv(int pname, IntByReference params);
    /**
     * Original signature : <code>void glFogiv(GLenum, const GLint*)</code><br>
     * <i>native declaration : line 935</i>
     */
    void glFogiv(int pname, int params[]);
    /**
     * Original signature : <code>void glFrontFace(GLenum)</code><br>
     * <i>native declaration : line 936</i>
     */
    void glFrontFace(int mode);
    /**
     * Original signature : <code>void glFrustum(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 937</i>
     */
    void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar);
    /**
     * Original signature : <code>GLuint glGenLists(GLsizei)</code><br>
     * <i>native declaration : line 938</i>
     */
    int glGenLists(int range);
    /**
     * Original signature : <code>void glGenTextures(GLsizei, GLuint*)</code><br>
     * <i>native declaration : line 939</i><br>
     * @deprecated use the safer methods {@link #glGenTextures(int, java.nio.IntBuffer)} and {@link #glGenTextures(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGenTextures(int n, IntByReference textures);
    /**
     * Original signature : <code>void glGenTextures(GLsizei, GLuint*)</code><br>
     * <i>native declaration : line 939</i>
     */
    void glGenTextures(int n, IntBuffer textures);
    /**
     * Original signature : <code>void glGetBooleanv(GLenum, GLboolean*)</code><br>
     * <i>native declaration : line 940</i><br>
     * @deprecated use the safer methods {@link #glGetBooleanv(int, java.nio.ByteBuffer)} and {@link #glGetBooleanv(int, com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glGetBooleanv(int pname, Pointer params);
    /**
     * Original signature : <code>void glGetBooleanv(GLenum, GLboolean*)</code><br>
     * <i>native declaration : line 940</i>
     */
    void glGetBooleanv(int pname, ByteBuffer params);
    /**
     * Original signature : <code>void glGetClipPlane(GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 941</i><br>
     * @deprecated use the safer methods {@link #glGetClipPlane(int, java.nio.DoubleBuffer)} and {@link #glGetClipPlane(int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glGetClipPlane(int plane, DoubleByReference equation);
    /**
     * Original signature : <code>void glGetClipPlane(GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 941</i>
     */
    void glGetClipPlane(int plane, DoubleBuffer equation);
    /**
     * Original signature : <code>void glGetDoublev(GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 942</i><br>
     * @deprecated use the safer methods {@link #glGetDoublev(int, java.nio.DoubleBuffer)} and {@link #glGetDoublev(int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glGetDoublev(int pname, DoubleByReference params);
    /**
     * Original signature : <code>void glGetDoublev(GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 942</i>
     */
    void glGetDoublev(int pname, DoubleBuffer params);
    /**
     * Original signature : <code>GLenum glGetError()</code><br>
     * <i>native declaration : line 943</i>
     */
    int glGetError();
    /**
     * Original signature : <code>void glGetFloatv(GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 944</i><br>
     * @deprecated use the safer methods {@link #glGetFloatv(int, java.nio.FloatBuffer)} and {@link #glGetFloatv(int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetFloatv(int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetFloatv(GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 944</i>
     */
    void glGetFloatv(int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetIntegerv(GLenum, GLint*)</code><br>
     * <i>native declaration : line 945</i><br>
     * @deprecated use the safer methods {@link #glGetIntegerv(int, java.nio.IntBuffer)} and {@link #glGetIntegerv(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetIntegerv(int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetIntegerv(GLenum, GLint*)</code><br>
     * <i>native declaration : line 945</i>
     */
    void glGetIntegerv(int pname, IntBuffer params);
    /**
     * Original signature : <code>void glGetLightfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 946</i><br>
     * @deprecated use the safer methods {@link #glGetLightfv(int, int, java.nio.FloatBuffer)} and {@link #glGetLightfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetLightfv(int light, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetLightfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 946</i>
     */
    void glGetLightfv(int light, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetLightiv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 947</i><br>
     * @deprecated use the safer methods {@link #glGetLightiv(int, int, java.nio.IntBuffer)} and {@link #glGetLightiv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetLightiv(int light, int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetLightiv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 947</i>
     */
    void glGetLightiv(int light, int pname, IntBuffer params);
    /**
     * Original signature : <code>void glGetMapdv(GLenum, GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 948</i><br>
     * @deprecated use the safer methods {@link #glGetMapdv(int, int, java.nio.DoubleBuffer)} and {@link #glGetMapdv(int, int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glGetMapdv(int target, int query, DoubleByReference v);
    /**
     * Original signature : <code>void glGetMapdv(GLenum, GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 948</i>
     */
    void glGetMapdv(int target, int query, DoubleBuffer v);
    /**
     * Original signature : <code>void glGetMapfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 949</i><br>
     * @deprecated use the safer methods {@link #glGetMapfv(int, int, java.nio.FloatBuffer)} and {@link #glGetMapfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetMapfv(int target, int query, FloatByReference v);
    /**
     * Original signature : <code>void glGetMapfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 949</i>
     */
    void glGetMapfv(int target, int query, FloatBuffer v);
    /**
     * Original signature : <code>void glGetMapiv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 950</i><br>
     * @deprecated use the safer methods {@link #glGetMapiv(int, int, java.nio.IntBuffer)} and {@link #glGetMapiv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetMapiv(int target, int query, IntByReference v);
    /**
     * Original signature : <code>void glGetMapiv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 950</i>
     */
    void glGetMapiv(int target, int query, IntBuffer v);
    /**
     * Original signature : <code>void glGetMaterialfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 951</i><br>
     * @deprecated use the safer methods {@link #glGetMaterialfv(int, int, java.nio.FloatBuffer)} and {@link #glGetMaterialfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetMaterialfv(int face, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetMaterialfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 951</i>
     */
    void glGetMaterialfv(int face, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetMaterialiv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 952</i><br>
     * @deprecated use the safer methods {@link #glGetMaterialiv(int, int, java.nio.IntBuffer)} and {@link #glGetMaterialiv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetMaterialiv(int face, int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetMaterialiv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 952</i>
     */
    void glGetMaterialiv(int face, int pname, IntBuffer params);
    /**
     * Original signature : <code>void glGetPixelMapfv(GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 953</i><br>
     * @deprecated use the safer methods {@link #glGetPixelMapfv(int, java.nio.FloatBuffer)} and {@link #glGetPixelMapfv(int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetPixelMapfv(int map, FloatByReference values);
    /**
     * Original signature : <code>void glGetPixelMapfv(GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 953</i>
     */
    void glGetPixelMapfv(int map, FloatBuffer values);
    /**
     * Original signature : <code>void glGetPixelMapuiv(GLenum, GLuint*)</code><br>
     * <i>native declaration : line 954</i><br>
     * @deprecated use the safer methods {@link #glGetPixelMapuiv(int, java.nio.IntBuffer)} and {@link #glGetPixelMapuiv(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetPixelMapuiv(int map, IntByReference values);
    /**
     * Original signature : <code>void glGetPixelMapuiv(GLenum, GLuint*)</code><br>
     * <i>native declaration : line 954</i>
     */
    void glGetPixelMapuiv(int map, IntBuffer values);
    /**
     * Original signature : <code>void glGetPixelMapusv(GLenum, GLushort*)</code><br>
     * <i>native declaration : line 955</i><br>
     * @deprecated use the safer methods {@link #glGetPixelMapusv(int, java.nio.ShortBuffer)} and {@link #glGetPixelMapusv(int, com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glGetPixelMapusv(int map, ShortByReference values);
    /**
     * Original signature : <code>void glGetPixelMapusv(GLenum, GLushort*)</code><br>
     * <i>native declaration : line 955</i>
     */
    void glGetPixelMapusv(int map, ShortBuffer values);
    /**
     * Original signature : <code>void glGetPointerv(GLenum, GLvoid**)</code><br>
     * <i>native declaration : line 956</i>
     */
    void glGetPointerv(int pname, PointerByReference params);
    /**
     * Original signature : <code>void glGetPolygonStipple(GLubyte*)</code><br>
     * <i>native declaration : line 957</i><br>
     * @deprecated use the safer methods {@link #glGetPolygonStipple(java.nio.ByteBuffer)} and {@link #glGetPolygonStipple(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glGetPolygonStipple(Pointer mask);
    /**
     * Original signature : <code>void glGetPolygonStipple(GLubyte*)</code><br>
     * <i>native declaration : line 957</i>
     */
    void glGetPolygonStipple(ByteBuffer mask);
    /**
     * Original signature : <code>GLubyte* glGetString(GLenum)</code><br>
     * <i>native declaration : line 958</i>
     */
    Pointer glGetString(int name);
    /**
     * Original signature : <code>void glGetTexEnvfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 959</i><br>
     * @deprecated use the safer methods {@link #glGetTexEnvfv(int, int, java.nio.FloatBuffer)} and {@link #glGetTexEnvfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetTexEnvfv(int target, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetTexEnvfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 959</i>
     */
    void glGetTexEnvfv(int target, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetTexEnviv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 960</i><br>
     * @deprecated use the safer methods {@link #glGetTexEnviv(int, int, java.nio.IntBuffer)} and {@link #glGetTexEnviv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetTexEnviv(int target, int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetTexEnviv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 960</i>
     */
    void glGetTexEnviv(int target, int pname, IntBuffer params);
    /**
     * Original signature : <code>void glGetTexGendv(GLenum, GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 961</i><br>
     * @deprecated use the safer methods {@link #glGetTexGendv(int, int, java.nio.DoubleBuffer)} and {@link #glGetTexGendv(int, int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glGetTexGendv(int coord, int pname, DoubleByReference params);
    /**
     * Original signature : <code>void glGetTexGendv(GLenum, GLenum, GLdouble*)</code><br>
     * <i>native declaration : line 961</i>
     */
    void glGetTexGendv(int coord, int pname, DoubleBuffer params);
    /**
     * Original signature : <code>void glGetTexGenfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 962</i><br>
     * @deprecated use the safer methods {@link #glGetTexGenfv(int, int, java.nio.FloatBuffer)} and {@link #glGetTexGenfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetTexGenfv(int coord, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetTexGenfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 962</i>
     */
    void glGetTexGenfv(int coord, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetTexGeniv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 963</i><br>
     * @deprecated use the safer methods {@link #glGetTexGeniv(int, int, java.nio.IntBuffer)} and {@link #glGetTexGeniv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetTexGeniv(int coord, int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetTexGeniv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 963</i>
     */
    void glGetTexGeniv(int coord, int pname, IntBuffer params);
    /**
     * Original signature : <code>void glGetTexImage(GLenum, GLint, GLenum, GLenum, GLvoid*)</code><br>
     * <i>native declaration : line 964</i>
     */
    void glGetTexImage(int target, int level, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glGetTexLevelParameterfv(GLenum, GLint, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 965</i><br>
     * @deprecated use the safer methods {@link #glGetTexLevelParameterfv(int, int, int, java.nio.FloatBuffer)} and {@link #glGetTexLevelParameterfv(int, int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetTexLevelParameterfv(int target, int level, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetTexLevelParameterfv(GLenum, GLint, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 965</i>
     */
    void glGetTexLevelParameterfv(int target, int level, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetTexLevelParameteriv(GLenum, GLint, GLenum, GLint*)</code><br>
     * <i>native declaration : line 966</i><br>
     * @deprecated use the safer methods {@link #glGetTexLevelParameteriv(int, int, int, java.nio.IntBuffer)} and {@link #glGetTexLevelParameteriv(int, int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetTexLevelParameteriv(int target, int level, int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetTexLevelParameteriv(GLenum, GLint, GLenum, GLint*)</code><br>
     * <i>native declaration : line 966</i>
     */
    void glGetTexLevelParameteriv(int target, int level, int pname, IntBuffer params);
    /**
     * Original signature : <code>void glGetTexParameterfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 967</i><br>
     * @deprecated use the safer methods {@link #glGetTexParameterfv(int, int, java.nio.FloatBuffer)} and {@link #glGetTexParameterfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glGetTexParameterfv(int target, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glGetTexParameterfv(GLenum, GLenum, GLfloat*)</code><br>
     * <i>native declaration : line 967</i>
     */
    void glGetTexParameterfv(int target, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glGetTexParameteriv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 968</i><br>
     * @deprecated use the safer methods {@link #glGetTexParameteriv(int, int, java.nio.IntBuffer)} and {@link #glGetTexParameteriv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glGetTexParameteriv(int target, int pname, IntByReference params);
    /**
     * Original signature : <code>void glGetTexParameteriv(GLenum, GLenum, GLint*)</code><br>
     * <i>native declaration : line 968</i>
     */
    void glGetTexParameteriv(int target, int pname, IntBuffer params);
    /**
     * Original signature : <code>void glHint(GLenum, GLenum)</code><br>
     * <i>native declaration : line 969</i>
     */
    void glHint(int target, int mode);
    /**
     * Original signature : <code>void glIndexMask(GLuint)</code><br>
     * <i>native declaration : line 970</i>
     */
    void glIndexMask(int mask);
    /**
     * Original signature : <code>void glIndexPointer(GLenum, GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 971</i>
     */
    void glIndexPointer(int type, int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>void glIndexd(GLdouble)</code><br>
     * <i>native declaration : line 972</i>
     */
    void glIndexd(double c);
    /**
     * Original signature : <code>void glIndexdv(const GLdouble*)</code><br>
     * <i>native declaration : line 973</i><br>
     * @deprecated use the safer methods {@link #glIndexdv(java.nio.DoubleBuffer)} and {@link #glIndexdv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glIndexdv(DoubleByReference c);
    /**
     * Original signature : <code>void glIndexdv(const GLdouble*)</code><br>
     * <i>native declaration : line 973</i>
     */
    void glIndexdv(DoubleBuffer c);
    /**
     * Original signature : <code>void glIndexf(GLfloat)</code><br>
     * <i>native declaration : line 974</i>
     */
    void glIndexf(float c);
    /**
     * Original signature : <code>void glIndexfv(const GLfloat*)</code><br>
     * <i>native declaration : line 975</i><br>
     * @deprecated use the safer methods {@link #glIndexfv(java.nio.FloatBuffer)} and {@link #glIndexfv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glIndexfv(FloatByReference c);
    /**
     * Original signature : <code>void glIndexfv(const GLfloat*)</code><br>
     * <i>native declaration : line 975</i>
     */
    void glIndexfv(FloatBuffer c);
    /**
     * Original signature : <code>void glIndexi(GLint)</code><br>
     * <i>native declaration : line 976</i>
     */
    void glIndexi(int c);
    /**
     * Original signature : <code>void glIndexiv(const GLint*)</code><br>
     * <i>native declaration : line 977</i><br>
     * @deprecated use the safer methods {@link #glIndexiv(int[])} and {@link #glIndexiv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glIndexiv(IntByReference c);
    /**
     * Original signature : <code>void glIndexiv(const GLint*)</code><br>
     * <i>native declaration : line 977</i>
     */
    void glIndexiv(int c[]);
    /**
     * Original signature : <code>void glIndexs(GLshort)</code><br>
     * <i>native declaration : line 978</i>
     */
    void glIndexs(short c);
    /**
     * Original signature : <code>void glIndexsv(const GLshort*)</code><br>
     * <i>native declaration : line 979</i><br>
     * @deprecated use the safer methods {@link #glIndexsv(java.nio.ShortBuffer)} and {@link #glIndexsv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glIndexsv(ShortByReference c);
    /**
     * Original signature : <code>void glIndexsv(const GLshort*)</code><br>
     * <i>native declaration : line 979</i>
     */
    void glIndexsv(ShortBuffer c);
    /**
     * Original signature : <code>void glIndexub(GLubyte)</code><br>
     * <i>native declaration : line 980</i>
     */
    void glIndexub(byte c);
    /**
     * Original signature : <code>void glIndexubv(const GLubyte*)</code><br>
     * <i>native declaration : line 981</i><br>
     * @deprecated use the safer methods {@link #glIndexubv(java.nio.ByteBuffer)} and {@link #glIndexubv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glIndexubv(Pointer c);
    /**
     * Original signature : <code>void glIndexubv(const GLubyte*)</code><br>
     * <i>native declaration : line 981</i>
     */
    void glIndexubv(ByteBuffer c);
    /**
     * Original signature : <code>void glInitNames()</code><br>
     * <i>native declaration : line 982</i>
     */
    void glInitNames();
    /**
     * Original signature : <code>void glInterleavedArrays(GLenum, GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 983</i>
     */
    void glInterleavedArrays(int format, int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>GLboolean glIsEnabled(GLenum)</code><br>
     * <i>native declaration : line 984</i>
     */
    byte glIsEnabled(int cap);
    /**
     * Original signature : <code>GLboolean glIsList(GLuint)</code><br>
     * <i>native declaration : line 985</i>
     */
    byte glIsList(int list);
    /**
     * Original signature : <code>GLboolean glIsTexture(GLuint)</code><br>
     * <i>native declaration : line 986</i>
     */
    byte glIsTexture(int texture);
    /**
     * Original signature : <code>void glLightModelf(GLenum, GLfloat)</code><br>
     * <i>native declaration : line 987</i>
     */
    void glLightModelf(int pname, float param);
    /**
     * Original signature : <code>void glLightModelfv(GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 988</i><br>
     * @deprecated use the safer methods {@link #glLightModelfv(int, java.nio.FloatBuffer)} and {@link #glLightModelfv(int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glLightModelfv(int pname, FloatByReference params);
    /**
     * Original signature : <code>void glLightModelfv(GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 988</i>
     */
    void glLightModelfv(int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glLightModeli(GLenum, GLint)</code><br>
     * <i>native declaration : line 989</i>
     */
    void glLightModeli(int pname, int param);
    /**
     * Original signature : <code>void glLightModeliv(GLenum, const GLint*)</code><br>
     * <i>native declaration : line 990</i><br>
     * @deprecated use the safer methods {@link #glLightModeliv(int, int[])} and {@link #glLightModeliv(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glLightModeliv(int pname, IntByReference params);
    /**
     * Original signature : <code>void glLightModeliv(GLenum, const GLint*)</code><br>
     * <i>native declaration : line 990</i>
     */
    void glLightModeliv(int pname, int params[]);
    /**
     * Original signature : <code>void glLightf(GLenum, GLenum, GLfloat)</code><br>
     * <i>native declaration : line 991</i>
     */
    void glLightf(int light, int pname, float param);
    /**
     * Original signature : <code>void glLightfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 992</i><br>
     * @deprecated use the safer methods {@link #glLightfv(int, int, java.nio.FloatBuffer)} and {@link #glLightfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glLightfv(int light, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glLightfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 992</i>
     */
    void glLightfv(int light, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glLighti(GLenum, GLenum, GLint)</code><br>
     * <i>native declaration : line 993</i>
     */
    void glLighti(int light, int pname, int param);
    /**
     * Original signature : <code>void glLightiv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 994</i><br>
     * @deprecated use the safer methods {@link #glLightiv(int, int, int[])} and {@link #glLightiv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glLightiv(int light, int pname, IntByReference params);
    /**
     * Original signature : <code>void glLightiv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 994</i>
     */
    void glLightiv(int light, int pname, int params[]);
    /**
     * Original signature : <code>void glLineStipple(GLint, GLushort)</code><br>
     * <i>native declaration : line 995</i>
     */
    void glLineStipple(int factor, short pattern);
    /**
     * Original signature : <code>void glLineWidth(GLfloat)</code><br>
     * <i>native declaration : line 996</i>
     */
    void glLineWidth(float width);
    /**
     * Original signature : <code>void glListBase(GLuint)</code><br>
     * <i>native declaration : line 997</i>
     */
    void glListBase(int base);
    /**
     * Original signature : <code>void glLoadIdentity()</code><br>
     * <i>native declaration : line 998</i>
     */
    void glLoadIdentity();
    /**
     * Original signature : <code>void glLoadMatrixd(const GLdouble*)</code><br>
     * <i>native declaration : line 999</i><br>
     * @deprecated use the safer methods {@link #glLoadMatrixd(java.nio.DoubleBuffer)} and {@link #glLoadMatrixd(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glLoadMatrixd(DoubleByReference m);
    /**
     * Original signature : <code>void glLoadMatrixd(const GLdouble*)</code><br>
     * <i>native declaration : line 999</i>
     */
    void glLoadMatrixd(DoubleBuffer m);
    /**
     * Original signature : <code>void glLoadMatrixf(const GLfloat*)</code><br>
     * <i>native declaration : line 1000</i><br>
     * @deprecated use the safer methods {@link #glLoadMatrixf(java.nio.FloatBuffer)} and {@link #glLoadMatrixf(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glLoadMatrixf(FloatByReference m);
    /**
     * Original signature : <code>void glLoadMatrixf(const GLfloat*)</code><br>
     * <i>native declaration : line 1000</i>
     */
    void glLoadMatrixf(FloatBuffer m);
    /**
     * Original signature : <code>void glLoadName(GLuint)</code><br>
     * <i>native declaration : line 1001</i>
     */
    void glLoadName(int name);
    /**
     * Original signature : <code>void glLogicOp(GLenum)</code><br>
     * <i>native declaration : line 1002</i>
     */
    void glLogicOp(int opcode);
    /**
     * Original signature : <code>void glMap1d(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble*)</code><br>
     * <i>native declaration : line 1003</i><br>
     * @deprecated use the safer methods {@link #glMap1d(int, double, double, int, int, java.nio.DoubleBuffer)} and {@link #glMap1d(int, double, double, int, int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glMap1d(int target, double u1, double u2, int stride, int order, DoubleByReference points);
    /**
     * Original signature : <code>void glMap1d(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble*)</code><br>
     * <i>native declaration : line 1003</i>
     */
    void glMap1d(int target, double u1, double u2, int stride, int order, DoubleBuffer points);
    /**
     * Original signature : <code>void glMap1f(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat*)</code><br>
     * <i>native declaration : line 1004</i><br>
     * @deprecated use the safer methods {@link #glMap1f(int, float, float, int, int, java.nio.FloatBuffer)} and {@link #glMap1f(int, float, float, int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glMap1f(int target, float u1, float u2, int stride, int order, FloatByReference points);
    /**
     * Original signature : <code>void glMap1f(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat*)</code><br>
     * <i>native declaration : line 1004</i>
     */
    void glMap1f(int target, float u1, float u2, int stride, int order, FloatBuffer points);
    /**
     * Original signature : <code>void glMap2d(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble*)</code><br>
     * <i>native declaration : line 1005</i><br>
     * @deprecated use the safer methods {@link #glMap2d(int, double, double, int, int, double, double, int, int, java.nio.DoubleBuffer)} and {@link #glMap2d(int, double, double, int, int, double, double, int, int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, DoubleByReference points);
    /**
     * Original signature : <code>void glMap2d(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble*)</code><br>
     * <i>native declaration : line 1005</i>
     */
    void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, DoubleBuffer points);
    /**
     * Original signature : <code>void glMap2f(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat*)</code><br>
     * <i>native declaration : line 1006</i><br>
     * @deprecated use the safer methods {@link #glMap2f(int, float, float, int, int, float, float, int, int, java.nio.FloatBuffer)} and {@link #glMap2f(int, float, float, int, int, float, float, int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, FloatByReference points);
    /**
     * Original signature : <code>void glMap2f(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat*)</code><br>
     * <i>native declaration : line 1006</i>
     */
    void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, FloatBuffer points);
    /**
     * Original signature : <code>void glMapGrid1d(GLint, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1007</i>
     */
    void glMapGrid1d(int un, double u1, double u2);
    /**
     * Original signature : <code>void glMapGrid1f(GLint, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1008</i>
     */
    void glMapGrid1f(int un, float u1, float u2);
    /**
     * Original signature : <code>void glMapGrid2d(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1009</i>
     */
    void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);
    /**
     * Original signature : <code>void glMapGrid2f(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1010</i>
     */
    void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);
    /**
     * Original signature : <code>void glMaterialf(GLenum, GLenum, GLfloat)</code><br>
     * <i>native declaration : line 1011</i>
     */
    void glMaterialf(int face, int pname, float param);
    /**
     * Original signature : <code>void glMaterialfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1012</i><br>
     * @deprecated use the safer methods {@link #glMaterialfv(int, int, java.nio.FloatBuffer)} and {@link #glMaterialfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glMaterialfv(int face, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glMaterialfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1012</i>
     */
    void glMaterialfv(int face, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glMateriali(GLenum, GLenum, GLint)</code><br>
     * <i>native declaration : line 1013</i>
     */
    void glMateriali(int face, int pname, int param);
    /**
     * Original signature : <code>void glMaterialiv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1014</i><br>
     * @deprecated use the safer methods {@link #glMaterialiv(int, int, int[])} and {@link #glMaterialiv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glMaterialiv(int face, int pname, IntByReference params);
    /**
     * Original signature : <code>void glMaterialiv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1014</i>
     */
    void glMaterialiv(int face, int pname, int params[]);
    /**
     * Original signature : <code>void glMatrixMode(GLenum)</code><br>
     * <i>native declaration : line 1015</i>
     */
    void glMatrixMode(int mode);
    /**
     * Original signature : <code>void glMultMatrixd(const GLdouble*)</code><br>
     * <i>native declaration : line 1016</i><br>
     * @deprecated use the safer methods {@link #glMultMatrixd(java.nio.DoubleBuffer)} and {@link #glMultMatrixd(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glMultMatrixd(DoubleByReference m);
    /**
     * Original signature : <code>void glMultMatrixd(const GLdouble*)</code><br>
     * <i>native declaration : line 1016</i>
     */
    void glMultMatrixd(DoubleBuffer m);
    /**
     * Original signature : <code>void glMultMatrixf(const GLfloat*)</code><br>
     * <i>native declaration : line 1017</i><br>
     * @deprecated use the safer methods {@link #glMultMatrixf(java.nio.FloatBuffer)} and {@link #glMultMatrixf(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glMultMatrixf(FloatByReference m);
    /**
     * Original signature : <code>void glMultMatrixf(const GLfloat*)</code><br>
     * <i>native declaration : line 1017</i>
     */
    void glMultMatrixf(FloatBuffer m);
    /**
     * Original signature : <code>void glNewList(GLuint, GLenum)</code><br>
     * <i>native declaration : line 1018</i>
     */
    void glNewList(int list, int mode);
    /**
     * Original signature : <code>void glNormal3b(GLbyte, GLbyte, GLbyte)</code><br>
     * <i>native declaration : line 1019</i>
     */
    void glNormal3b(byte nx, byte ny, byte nz);
    /**
     * Original signature : <code>void glNormal3bv(const GLbyte*)</code><br>
     * <i>native declaration : line 1020</i><br>
     * @deprecated use the safer methods {@link #glNormal3bv(java.nio.ByteBuffer)} and {@link #glNormal3bv(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glNormal3bv(Pointer v);
    /**
     * Original signature : <code>void glNormal3bv(const GLbyte*)</code><br>
     * <i>native declaration : line 1020</i>
     */
    void glNormal3bv(ByteBuffer v);
    /**
     * Original signature : <code>void glNormal3d(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1021</i>
     */
    void glNormal3d(double nx, double ny, double nz);
    /**
     * Original signature : <code>void glNormal3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1022</i><br>
     * @deprecated use the safer methods {@link #glNormal3dv(java.nio.DoubleBuffer)} and {@link #glNormal3dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glNormal3dv(DoubleByReference v);
    /**
     * Original signature : <code>void glNormal3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1022</i>
     */
    void glNormal3dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glNormal3f(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1023</i>
     */
    void glNormal3f(float nx, float ny, float nz);
    /**
     * Original signature : <code>void glNormal3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1024</i><br>
     * @deprecated use the safer methods {@link #glNormal3fv(java.nio.FloatBuffer)} and {@link #glNormal3fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glNormal3fv(FloatByReference v);
    /**
     * Original signature : <code>void glNormal3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1024</i>
     */
    void glNormal3fv(FloatBuffer v);
    /**
     * Original signature : <code>void glNormal3i(GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1025</i>
     */
    void glNormal3i(int nx, int ny, int nz);
    /**
     * Original signature : <code>void glNormal3iv(const GLint*)</code><br>
     * <i>native declaration : line 1026</i><br>
     * @deprecated use the safer methods {@link #glNormal3iv(int[])} and {@link #glNormal3iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glNormal3iv(IntByReference v);
    /**
     * Original signature : <code>void glNormal3iv(const GLint*)</code><br>
     * <i>native declaration : line 1026</i>
     */
    void glNormal3iv(int v[]);
    /**
     * Original signature : <code>void glNormal3s(GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1027</i>
     */
    void glNormal3s(short nx, short ny, short nz);
    /**
     * Original signature : <code>void glNormal3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1028</i><br>
     * @deprecated use the safer methods {@link #glNormal3sv(java.nio.ShortBuffer)} and {@link #glNormal3sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glNormal3sv(ShortByReference v);
    /**
     * Original signature : <code>void glNormal3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1028</i>
     */
    void glNormal3sv(ShortBuffer v);
    /**
     * Original signature : <code>void glNormalPointer(GLenum, GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 1029</i>
     */
    void glNormalPointer(int type, int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>void glOrtho(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1030</i>
     */
    void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar);
    /**
     * Original signature : <code>void glPassThrough(GLfloat)</code><br>
     * <i>native declaration : line 1031</i>
     */
    void glPassThrough(float token);
    /**
     * Original signature : <code>void glPixelMapfv(GLenum, GLsizei, const GLfloat*)</code><br>
     * <i>native declaration : line 1032</i><br>
     * @deprecated use the safer methods {@link #glPixelMapfv(int, int, java.nio.FloatBuffer)} and {@link #glPixelMapfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glPixelMapfv(int map, int mapsize, FloatByReference values);
    /**
     * Original signature : <code>void glPixelMapfv(GLenum, GLsizei, const GLfloat*)</code><br>
     * <i>native declaration : line 1032</i>
     */
    void glPixelMapfv(int map, int mapsize, FloatBuffer values);
    /**
     * Original signature : <code>void glPixelMapuiv(GLenum, GLsizei, const GLuint*)</code><br>
     * <i>native declaration : line 1033</i><br>
     * @deprecated use the safer methods {@link #glPixelMapuiv(int, int, int[])} and {@link #glPixelMapuiv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glPixelMapuiv(int map, int mapsize, IntByReference values);
    /**
     * Original signature : <code>void glPixelMapuiv(GLenum, GLsizei, const GLuint*)</code><br>
     * <i>native declaration : line 1033</i>
     */
    void glPixelMapuiv(int map, int mapsize, int values[]);
    /**
     * Original signature : <code>void glPixelMapusv(GLenum, GLsizei, const GLushort*)</code><br>
     * <i>native declaration : line 1034</i><br>
     * @deprecated use the safer methods {@link #glPixelMapusv(int, int, java.nio.ShortBuffer)} and {@link #glPixelMapusv(int, int, com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glPixelMapusv(int map, int mapsize, ShortByReference values);
    /**
     * Original signature : <code>void glPixelMapusv(GLenum, GLsizei, const GLushort*)</code><br>
     * <i>native declaration : line 1034</i>
     */
    void glPixelMapusv(int map, int mapsize, ShortBuffer values);
    /**
     * Original signature : <code>void glPixelStoref(GLenum, GLfloat)</code><br>
     * <i>native declaration : line 1035</i>
     */
    void glPixelStoref(int pname, float param);
    /**
     * Original signature : <code>void glPixelStorei(GLenum, GLint)</code><br>
     * <i>native declaration : line 1036</i>
     */
    void glPixelStorei(int pname, int param);
    /**
     * Original signature : <code>void glPixelTransferf(GLenum, GLfloat)</code><br>
     * <i>native declaration : line 1037</i>
     */
    void glPixelTransferf(int pname, float param);
    /**
     * Original signature : <code>void glPixelTransferi(GLenum, GLint)</code><br>
     * <i>native declaration : line 1038</i>
     */
    void glPixelTransferi(int pname, int param);
    /**
     * Original signature : <code>void glPixelZoom(GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1039</i>
     */
    void glPixelZoom(float xfactor, float yfactor);
    /**
     * Original signature : <code>void glPointSize(GLfloat)</code><br>
     * <i>native declaration : line 1040</i>
     */
    void glPointSize(float size);
    /**
     * Original signature : <code>void glPolygonMode(GLenum, GLenum)</code><br>
     * <i>native declaration : line 1041</i>
     */
    void glPolygonMode(int face, int mode);
    /**
     * Original signature : <code>void glPolygonOffset(GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1042</i>
     */
    void glPolygonOffset(float factor, float units);
    /**
     * Original signature : <code>void glPolygonStipple(const GLubyte*)</code><br>
     * <i>native declaration : line 1043</i><br>
     * @deprecated use the safer methods {@link #glPolygonStipple(java.nio.ByteBuffer)} and {@link #glPolygonStipple(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    void glPolygonStipple(Pointer mask);
    /**
     * Original signature : <code>void glPolygonStipple(const GLubyte*)</code><br>
     * <i>native declaration : line 1043</i>
     */
    void glPolygonStipple(ByteBuffer mask);
    /**
     * Original signature : <code>void glPopAttrib()</code><br>
     * <i>native declaration : line 1044</i>
     */
    void glPopAttrib();
    /**
     * Original signature : <code>void glPopClientAttrib()</code><br>
     * <i>native declaration : line 1045</i>
     */
    void glPopClientAttrib();
    /**
     * Original signature : <code>void glPopMatrix()</code><br>
     * <i>native declaration : line 1046</i>
     */
    void glPopMatrix();
    /**
     * Original signature : <code>void glPopName()</code><br>
     * <i>native declaration : line 1047</i>
     */
    void glPopName();
    /**
     * Original signature : <code>void glPrioritizeTextures(GLsizei, const GLuint*, const GLclampf*)</code><br>
     * <i>native declaration : line 1048</i><br>
     * @deprecated use the safer methods {@link #glPrioritizeTextures(int, int[], java.nio.FloatBuffer)} and {@link #glPrioritizeTextures(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glPrioritizeTextures(int n, IntByReference textures, FloatByReference priorities);
    /**
     * Original signature : <code>void glPrioritizeTextures(GLsizei, const GLuint*, const GLclampf*)</code><br>
     * <i>native declaration : line 1048</i>
     */
    void glPrioritizeTextures(int n, int textures[], FloatBuffer priorities);
    /**
     * Original signature : <code>void glPushAttrib(GLbitfield)</code><br>
     * <i>native declaration : line 1049</i>
     */
    void glPushAttrib(int mask);
    /**
     * Original signature : <code>void glPushClientAttrib(GLbitfield)</code><br>
     * <i>native declaration : line 1050</i>
     */
    void glPushClientAttrib(int mask);
    /**
     * Original signature : <code>void glPushMatrix()</code><br>
     * <i>native declaration : line 1051</i>
     */
    void glPushMatrix();
    /**
     * Original signature : <code>void glPushName(GLuint)</code><br>
     * <i>native declaration : line 1052</i>
     */
    void glPushName(int name);
    /**
     * Original signature : <code>void glRasterPos2d(GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1053</i>
     */
    void glRasterPos2d(double x, double y);
    /**
     * Original signature : <code>void glRasterPos2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1054</i><br>
     * @deprecated use the safer methods {@link #glRasterPos2dv(java.nio.DoubleBuffer)} and {@link #glRasterPos2dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glRasterPos2dv(DoubleByReference v);
    /**
     * Original signature : <code>void glRasterPos2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1054</i>
     */
    void glRasterPos2dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glRasterPos2f(GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1055</i>
     */
    void glRasterPos2f(float x, float y);
    /**
     * Original signature : <code>void glRasterPos2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1056</i><br>
     * @deprecated use the safer methods {@link #glRasterPos2fv(java.nio.FloatBuffer)} and {@link #glRasterPos2fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glRasterPos2fv(FloatByReference v);
    /**
     * Original signature : <code>void glRasterPos2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1056</i>
     */
    void glRasterPos2fv(FloatBuffer v);
    /**
     * Original signature : <code>void glRasterPos2i(GLint, GLint)</code><br>
     * <i>native declaration : line 1057</i>
     */
    void glRasterPos2i(int x, int y);
    /**
     * Original signature : <code>void glRasterPos2iv(const GLint*)</code><br>
     * <i>native declaration : line 1058</i><br>
     * @deprecated use the safer methods {@link #glRasterPos2iv(int[])} and {@link #glRasterPos2iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glRasterPos2iv(IntByReference v);
    /**
     * Original signature : <code>void glRasterPos2iv(const GLint*)</code><br>
     * <i>native declaration : line 1058</i>
     */
    void glRasterPos2iv(int v[]);
    /**
     * Original signature : <code>void glRasterPos2s(GLshort, GLshort)</code><br>
     * <i>native declaration : line 1059</i>
     */
    void glRasterPos2s(short x, short y);
    /**
     * Original signature : <code>void glRasterPos2sv(const GLshort*)</code><br>
     * <i>native declaration : line 1060</i><br>
     * @deprecated use the safer methods {@link #glRasterPos2sv(java.nio.ShortBuffer)} and {@link #glRasterPos2sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glRasterPos2sv(ShortByReference v);
    /**
     * Original signature : <code>void glRasterPos2sv(const GLshort*)</code><br>
     * <i>native declaration : line 1060</i>
     */
    void glRasterPos2sv(ShortBuffer v);
    /**
     * Original signature : <code>void glRasterPos3d(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1061</i>
     */
    void glRasterPos3d(double x, double y, double z);
    /**
     * Original signature : <code>void glRasterPos3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1062</i><br>
     * @deprecated use the safer methods {@link #glRasterPos3dv(java.nio.DoubleBuffer)} and {@link #glRasterPos3dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glRasterPos3dv(DoubleByReference v);
    /**
     * Original signature : <code>void glRasterPos3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1062</i>
     */
    void glRasterPos3dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glRasterPos3f(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1063</i>
     */
    void glRasterPos3f(float x, float y, float z);
    /**
     * Original signature : <code>void glRasterPos3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1064</i><br>
     * @deprecated use the safer methods {@link #glRasterPos3fv(java.nio.FloatBuffer)} and {@link #glRasterPos3fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glRasterPos3fv(FloatByReference v);
    /**
     * Original signature : <code>void glRasterPos3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1064</i>
     */
    void glRasterPos3fv(FloatBuffer v);
    /**
     * Original signature : <code>void glRasterPos3i(GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1065</i>
     */
    void glRasterPos3i(int x, int y, int z);
    /**
     * Original signature : <code>void glRasterPos3iv(const GLint*)</code><br>
     * <i>native declaration : line 1066</i><br>
     * @deprecated use the safer methods {@link #glRasterPos3iv(int[])} and {@link #glRasterPos3iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glRasterPos3iv(IntByReference v);
    /**
     * Original signature : <code>void glRasterPos3iv(const GLint*)</code><br>
     * <i>native declaration : line 1066</i>
     */
    void glRasterPos3iv(int v[]);
    /**
     * Original signature : <code>void glRasterPos3s(GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1067</i>
     */
    void glRasterPos3s(short x, short y, short z);
    /**
     * Original signature : <code>void glRasterPos3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1068</i><br>
     * @deprecated use the safer methods {@link #glRasterPos3sv(java.nio.ShortBuffer)} and {@link #glRasterPos3sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glRasterPos3sv(ShortByReference v);
    /**
     * Original signature : <code>void glRasterPos3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1068</i>
     */
    void glRasterPos3sv(ShortBuffer v);
    /**
     * Original signature : <code>void glRasterPos4d(GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1069</i>
     */
    void glRasterPos4d(double x, double y, double z, double w);
    /**
     * Original signature : <code>void glRasterPos4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1070</i><br>
     * @deprecated use the safer methods {@link #glRasterPos4dv(java.nio.DoubleBuffer)} and {@link #glRasterPos4dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glRasterPos4dv(DoubleByReference v);
    /**
     * Original signature : <code>void glRasterPos4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1070</i>
     */
    void glRasterPos4dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glRasterPos4f(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1071</i>
     */
    void glRasterPos4f(float x, float y, float z, float w);
    /**
     * Original signature : <code>void glRasterPos4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1072</i><br>
     * @deprecated use the safer methods {@link #glRasterPos4fv(java.nio.FloatBuffer)} and {@link #glRasterPos4fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glRasterPos4fv(FloatByReference v);
    /**
     * Original signature : <code>void glRasterPos4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1072</i>
     */
    void glRasterPos4fv(FloatBuffer v);
    /**
     * Original signature : <code>void glRasterPos4i(GLint, GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1073</i>
     */
    void glRasterPos4i(int x, int y, int z, int w);
    /**
     * Original signature : <code>void glRasterPos4iv(const GLint*)</code><br>
     * <i>native declaration : line 1074</i><br>
     * @deprecated use the safer methods {@link #glRasterPos4iv(int[])} and {@link #glRasterPos4iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glRasterPos4iv(IntByReference v);
    /**
     * Original signature : <code>void glRasterPos4iv(const GLint*)</code><br>
     * <i>native declaration : line 1074</i>
     */
    void glRasterPos4iv(int v[]);
    /**
     * Original signature : <code>void glRasterPos4s(GLshort, GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1075</i>
     */
    void glRasterPos4s(short x, short y, short z, short w);
    /**
     * Original signature : <code>void glRasterPos4sv(const GLshort*)</code><br>
     * <i>native declaration : line 1076</i><br>
     * @deprecated use the safer methods {@link #glRasterPos4sv(java.nio.ShortBuffer)} and {@link #glRasterPos4sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glRasterPos4sv(ShortByReference v);
    /**
     * Original signature : <code>void glRasterPos4sv(const GLshort*)</code><br>
     * <i>native declaration : line 1076</i>
     */
    void glRasterPos4sv(ShortBuffer v);
    /**
     * Original signature : <code>void glReadBuffer(GLenum)</code><br>
     * <i>native declaration : line 1077</i>
     */
    void glReadBuffer(int mode);
    /**
     * Original signature : <code>void glReadPixels(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid*)</code><br>
     * <i>native declaration : line 1078</i>
     */
    void glReadPixels(int x, int y, int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glRectd(GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1079</i>
     */
    void glRectd(double x1, double y1, double x2, double y2);
    /**
     * Original signature : <code>void glRectdv(const GLdouble*, const GLdouble*)</code><br>
     * <i>native declaration : line 1080</i><br>
     * @deprecated use the safer methods {@link #glRectdv(java.nio.DoubleBuffer, java.nio.DoubleBuffer)} and {@link #glRectdv(com.sun.jna.ptr.DoubleByReference, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glRectdv(DoubleByReference v1, DoubleByReference v2);
    /**
     * Original signature : <code>void glRectdv(const GLdouble*, const GLdouble*)</code><br>
     * <i>native declaration : line 1080</i>
     */
    void glRectdv(DoubleBuffer v1, DoubleBuffer v2);
    /**
     * Original signature : <code>void glRectf(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1081</i>
     */
    void glRectf(float x1, float y1, float x2, float y2);
    /**
     * Original signature : <code>void glRectfv(const GLfloat*, const GLfloat*)</code><br>
     * <i>native declaration : line 1082</i><br>
     * @deprecated use the safer methods {@link #glRectfv(java.nio.FloatBuffer, java.nio.FloatBuffer)} and {@link #glRectfv(com.sun.jna.ptr.FloatByReference, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glRectfv(FloatByReference v1, FloatByReference v2);
    /**
     * Original signature : <code>void glRectfv(const GLfloat*, const GLfloat*)</code><br>
     * <i>native declaration : line 1082</i>
     */
    void glRectfv(FloatBuffer v1, FloatBuffer v2);
    /**
     * Original signature : <code>void glRecti(GLint, GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1083</i>
     */
    void glRecti(int x1, int y1, int x2, int y2);
    /**
     * Original signature : <code>void glRectiv(const GLint*, const GLint*)</code><br>
     * <i>native declaration : line 1084</i><br>
     * @deprecated use the safer methods {@link #glRectiv(int[], int[])} and {@link #glRectiv(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glRectiv(IntByReference v1, IntByReference v2);
    /**
     * Original signature : <code>void glRectiv(const GLint*, const GLint*)</code><br>
     * <i>native declaration : line 1084</i>
     */
    void glRectiv(int v1[], int v2[]);
    /**
     * Original signature : <code>void glRects(GLshort, GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1085</i>
     */
    void glRects(short x1, short y1, short x2, short y2);
    /**
     * Original signature : <code>void glRectsv(const GLshort*, const GLshort*)</code><br>
     * <i>native declaration : line 1086</i><br>
     * @deprecated use the safer methods {@link #glRectsv(java.nio.ShortBuffer, java.nio.ShortBuffer)} and {@link #glRectsv(com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glRectsv(ShortByReference v1, ShortByReference v2);
    /**
     * Original signature : <code>void glRectsv(const GLshort*, const GLshort*)</code><br>
     * <i>native declaration : line 1086</i>
     */
    void glRectsv(ShortBuffer v1, ShortBuffer v2);
    /**
     * Original signature : <code>GLint glRenderMode(GLenum)</code><br>
     * <i>native declaration : line 1087</i>
     */
    int glRenderMode(int mode);
    /**
     * Original signature : <code>void glRotated(GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1088</i>
     */
    void glRotated(double angle, double x, double y, double z);
    /**
     * Original signature : <code>void glRotatef(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1089</i>
     */
    void glRotatef(float angle, float x, float y, float z);
    /**
     * Original signature : <code>void glScaled(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1090</i>
     */
    void glScaled(double x, double y, double z);
    /**
     * Original signature : <code>void glScalef(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1091</i>
     */
    void glScalef(float x, float y, float z);
    /**
     * Original signature : <code>void glScissor(GLint, GLint, GLsizei, GLsizei)</code><br>
     * <i>native declaration : line 1092</i>
     */
    void glScissor(int x, int y, int width, int height);
    /**
     * Original signature : <code>void glSelectBuffer(GLsizei, GLuint*)</code><br>
     * <i>native declaration : line 1093</i><br>
     * @deprecated use the safer methods {@link #glSelectBuffer(int, java.nio.IntBuffer)} and {@link #glSelectBuffer(int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glSelectBuffer(int size, IntByReference buffer);
    /**
     * Original signature : <code>void glSelectBuffer(GLsizei, GLuint*)</code><br>
     * <i>native declaration : line 1093</i>
     */
    void glSelectBuffer(int size, IntBuffer buffer);
    /**
     * Original signature : <code>void glShadeModel(GLenum)</code><br>
     * <i>native declaration : line 1094</i>
     */
    void glShadeModel(int mode);
    /**
     * Original signature : <code>void glStencilFunc(GLenum, GLint, GLuint)</code><br>
     * <i>native declaration : line 1095</i>
     */
    void glStencilFunc(int func, int ref, int mask);
    /**
     * Original signature : <code>void glStencilMask(GLuint)</code><br>
     * <i>native declaration : line 1096</i>
     */
    void glStencilMask(int mask);
    /**
     * Original signature : <code>void glStencilOp(GLenum, GLenum, GLenum)</code><br>
     * <i>native declaration : line 1097</i>
     */
    void glStencilOp(int fail, int zfail, int zpass);
    /**
     * Original signature : <code>void glTexCoord1d(GLdouble)</code><br>
     * <i>native declaration : line 1098</i>
     */
    void glTexCoord1d(double s);
    /**
     * Original signature : <code>void glTexCoord1dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1099</i><br>
     * @deprecated use the safer methods {@link #glTexCoord1dv(java.nio.DoubleBuffer)} and {@link #glTexCoord1dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glTexCoord1dv(DoubleByReference v);
    /**
     * Original signature : <code>void glTexCoord1dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1099</i>
     */
    void glTexCoord1dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glTexCoord1f(GLfloat)</code><br>
     * <i>native declaration : line 1100</i>
     */
    void glTexCoord1f(float s);
    /**
     * Original signature : <code>void glTexCoord1fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1101</i><br>
     * @deprecated use the safer methods {@link #glTexCoord1fv(java.nio.FloatBuffer)} and {@link #glTexCoord1fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexCoord1fv(FloatByReference v);
    /**
     * Original signature : <code>void glTexCoord1fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1101</i>
     */
    void glTexCoord1fv(FloatBuffer v);
    /**
     * Original signature : <code>void glTexCoord1i(GLint)</code><br>
     * <i>native declaration : line 1102</i>
     */
    void glTexCoord1i(int s);
    /**
     * Original signature : <code>void glTexCoord1iv(const GLint*)</code><br>
     * <i>native declaration : line 1103</i><br>
     * @deprecated use the safer methods {@link #glTexCoord1iv(int[])} and {@link #glTexCoord1iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexCoord1iv(IntByReference v);
    /**
     * Original signature : <code>void glTexCoord1iv(const GLint*)</code><br>
     * <i>native declaration : line 1103</i>
     */
    void glTexCoord1iv(int v[]);
    /**
     * Original signature : <code>void glTexCoord1s(GLshort)</code><br>
     * <i>native declaration : line 1104</i>
     */
    void glTexCoord1s(short s);
    /**
     * Original signature : <code>void glTexCoord1sv(const GLshort*)</code><br>
     * <i>native declaration : line 1105</i><br>
     * @deprecated use the safer methods {@link #glTexCoord1sv(java.nio.ShortBuffer)} and {@link #glTexCoord1sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glTexCoord1sv(ShortByReference v);
    /**
     * Original signature : <code>void glTexCoord1sv(const GLshort*)</code><br>
     * <i>native declaration : line 1105</i>
     */
    void glTexCoord1sv(ShortBuffer v);
    /**
     * Original signature : <code>void glTexCoord2d(GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1106</i>
     */
    void glTexCoord2d(double s, double t);
    /**
     * Original signature : <code>void glTexCoord2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1107</i><br>
     * @deprecated use the safer methods {@link #glTexCoord2dv(java.nio.DoubleBuffer)} and {@link #glTexCoord2dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glTexCoord2dv(DoubleByReference v);
    /**
     * Original signature : <code>void glTexCoord2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1107</i>
     */
    void glTexCoord2dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glTexCoord2f(GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1108</i>
     */
    void glTexCoord2f(float s, float t);
    /**
     * Original signature : <code>void glTexCoord2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1109</i><br>
     * @deprecated use the safer methods {@link #glTexCoord2fv(java.nio.FloatBuffer)} and {@link #glTexCoord2fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexCoord2fv(FloatByReference v);
    /**
     * Original signature : <code>void glTexCoord2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1109</i>
     */
    void glTexCoord2fv(FloatBuffer v);
    /**
     * Original signature : <code>void glTexCoord2i(GLint, GLint)</code><br>
     * <i>native declaration : line 1110</i>
     */
    void glTexCoord2i(int s, int t);
    /**
     * Original signature : <code>void glTexCoord2iv(const GLint*)</code><br>
     * <i>native declaration : line 1111</i><br>
     * @deprecated use the safer methods {@link #glTexCoord2iv(int[])} and {@link #glTexCoord2iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexCoord2iv(IntByReference v);
    /**
     * Original signature : <code>void glTexCoord2iv(const GLint*)</code><br>
     * <i>native declaration : line 1111</i>
     */
    void glTexCoord2iv(int v[]);
    /**
     * Original signature : <code>void glTexCoord2s(GLshort, GLshort)</code><br>
     * <i>native declaration : line 1112</i>
     */
    void glTexCoord2s(short s, short t);
    /**
     * Original signature : <code>void glTexCoord2sv(const GLshort*)</code><br>
     * <i>native declaration : line 1113</i><br>
     * @deprecated use the safer methods {@link #glTexCoord2sv(java.nio.ShortBuffer)} and {@link #glTexCoord2sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glTexCoord2sv(ShortByReference v);
    /**
     * Original signature : <code>void glTexCoord2sv(const GLshort*)</code><br>
     * <i>native declaration : line 1113</i>
     */
    void glTexCoord2sv(ShortBuffer v);
    /**
     * Original signature : <code>void glTexCoord3d(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1114</i>
     */
    void glTexCoord3d(double s, double t, double r);
    /**
     * Original signature : <code>void glTexCoord3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1115</i><br>
     * @deprecated use the safer methods {@link #glTexCoord3dv(java.nio.DoubleBuffer)} and {@link #glTexCoord3dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glTexCoord3dv(DoubleByReference v);
    /**
     * Original signature : <code>void glTexCoord3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1115</i>
     */
    void glTexCoord3dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glTexCoord3f(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1116</i>
     */
    void glTexCoord3f(float s, float t, float r);
    /**
     * Original signature : <code>void glTexCoord3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1117</i><br>
     * @deprecated use the safer methods {@link #glTexCoord3fv(java.nio.FloatBuffer)} and {@link #glTexCoord3fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexCoord3fv(FloatByReference v);
    /**
     * Original signature : <code>void glTexCoord3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1117</i>
     */
    void glTexCoord3fv(FloatBuffer v);
    /**
     * Original signature : <code>void glTexCoord3i(GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1118</i>
     */
    void glTexCoord3i(int s, int t, int r);
    /**
     * Original signature : <code>void glTexCoord3iv(const GLint*)</code><br>
     * <i>native declaration : line 1119</i><br>
     * @deprecated use the safer methods {@link #glTexCoord3iv(int[])} and {@link #glTexCoord3iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexCoord3iv(IntByReference v);
    /**
     * Original signature : <code>void glTexCoord3iv(const GLint*)</code><br>
     * <i>native declaration : line 1119</i>
     */
    void glTexCoord3iv(int v[]);
    /**
     * Original signature : <code>void glTexCoord3s(GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1120</i>
     */
    void glTexCoord3s(short s, short t, short r);
    /**
     * Original signature : <code>void glTexCoord3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1121</i><br>
     * @deprecated use the safer methods {@link #glTexCoord3sv(java.nio.ShortBuffer)} and {@link #glTexCoord3sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glTexCoord3sv(ShortByReference v);
    /**
     * Original signature : <code>void glTexCoord3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1121</i>
     */
    void glTexCoord3sv(ShortBuffer v);
    /**
     * Original signature : <code>void glTexCoord4d(GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1122</i>
     */
    void glTexCoord4d(double s, double t, double r, double q);
    /**
     * Original signature : <code>void glTexCoord4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1123</i><br>
     * @deprecated use the safer methods {@link #glTexCoord4dv(java.nio.DoubleBuffer)} and {@link #glTexCoord4dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glTexCoord4dv(DoubleByReference v);
    /**
     * Original signature : <code>void glTexCoord4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1123</i>
     */
    void glTexCoord4dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glTexCoord4f(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1124</i>
     */
    void glTexCoord4f(float s, float t, float r, float q);
    /**
     * Original signature : <code>void glTexCoord4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1125</i><br>
     * @deprecated use the safer methods {@link #glTexCoord4fv(java.nio.FloatBuffer)} and {@link #glTexCoord4fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexCoord4fv(FloatByReference v);
    /**
     * Original signature : <code>void glTexCoord4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1125</i>
     */
    void glTexCoord4fv(FloatBuffer v);
    /**
     * Original signature : <code>void glTexCoord4i(GLint, GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1126</i>
     */
    void glTexCoord4i(int s, int t, int r, int q);
    /**
     * Original signature : <code>void glTexCoord4iv(const GLint*)</code><br>
     * <i>native declaration : line 1127</i><br>
     * @deprecated use the safer methods {@link #glTexCoord4iv(int[])} and {@link #glTexCoord4iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexCoord4iv(IntByReference v);
    /**
     * Original signature : <code>void glTexCoord4iv(const GLint*)</code><br>
     * <i>native declaration : line 1127</i>
     */
    void glTexCoord4iv(int v[]);
    /**
     * Original signature : <code>void glTexCoord4s(GLshort, GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1128</i>
     */
    void glTexCoord4s(short s, short t, short r, short q);
    /**
     * Original signature : <code>void glTexCoord4sv(const GLshort*)</code><br>
     * <i>native declaration : line 1129</i><br>
     * @deprecated use the safer methods {@link #glTexCoord4sv(java.nio.ShortBuffer)} and {@link #glTexCoord4sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glTexCoord4sv(ShortByReference v);
    /**
     * Original signature : <code>void glTexCoord4sv(const GLshort*)</code><br>
     * <i>native declaration : line 1129</i>
     */
    void glTexCoord4sv(ShortBuffer v);
    /**
     * Original signature : <code>void glTexCoordPointer(GLint, GLenum, GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 1130</i>
     */
    void glTexCoordPointer(int size, int type, int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>void glTexEnvf(GLenum, GLenum, GLfloat)</code><br>
     * <i>native declaration : line 1131</i>
     */
    void glTexEnvf(int target, int pname, float param);
    /**
     * Original signature : <code>void glTexEnvfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1132</i><br>
     * @deprecated use the safer methods {@link #glTexEnvfv(int, int, java.nio.FloatBuffer)} and {@link #glTexEnvfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexEnvfv(int target, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glTexEnvfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1132</i>
     */
    void glTexEnvfv(int target, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glTexEnvi(GLenum, GLenum, GLint)</code><br>
     * <i>native declaration : line 1133</i>
     */
    void glTexEnvi(int target, int pname, int param);
    /**
     * Original signature : <code>void glTexEnviv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1134</i><br>
     * @deprecated use the safer methods {@link #glTexEnviv(int, int, int[])} and {@link #glTexEnviv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexEnviv(int target, int pname, IntByReference params);
    /**
     * Original signature : <code>void glTexEnviv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1134</i>
     */
    void glTexEnviv(int target, int pname, int params[]);
    /**
     * Original signature : <code>void glTexGend(GLenum, GLenum, GLdouble)</code><br>
     * <i>native declaration : line 1135</i>
     */
    void glTexGend(int coord, int pname, double param);
    /**
     * Original signature : <code>void glTexGendv(GLenum, GLenum, const GLdouble*)</code><br>
     * <i>native declaration : line 1136</i><br>
     * @deprecated use the safer methods {@link #glTexGendv(int, int, java.nio.DoubleBuffer)} and {@link #glTexGendv(int, int, com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glTexGendv(int coord, int pname, DoubleByReference params);
    /**
     * Original signature : <code>void glTexGendv(GLenum, GLenum, const GLdouble*)</code><br>
     * <i>native declaration : line 1136</i>
     */
    void glTexGendv(int coord, int pname, DoubleBuffer params);
    /**
     * Original signature : <code>void glTexGenf(GLenum, GLenum, GLfloat)</code><br>
     * <i>native declaration : line 1137</i>
     */
    void glTexGenf(int coord, int pname, float param);
    /**
     * Original signature : <code>void glTexGenfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1138</i><br>
     * @deprecated use the safer methods {@link #glTexGenfv(int, int, java.nio.FloatBuffer)} and {@link #glTexGenfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexGenfv(int coord, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glTexGenfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1138</i>
     */
    void glTexGenfv(int coord, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glTexGeni(GLenum, GLenum, GLint)</code><br>
     * <i>native declaration : line 1139</i>
     */
    void glTexGeni(int coord, int pname, int param);
    /**
     * Original signature : <code>void glTexGeniv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1140</i><br>
     * @deprecated use the safer methods {@link #glTexGeniv(int, int, int[])} and {@link #glTexGeniv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexGeniv(int coord, int pname, IntByReference params);
    /**
     * Original signature : <code>void glTexGeniv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1140</i>
     */
    void glTexGeniv(int coord, int pname, int params[]);
    /**
     * Original signature : <code>void glTexImage1D(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 1141</i>
     */
    void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glTexImage2D(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 1142</i>
     */
    void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glTexParameterf(GLenum, GLenum, GLfloat)</code><br>
     * <i>native declaration : line 1143</i>
     */
    void glTexParameterf(int target, int pname, float param);
    /**
     * Original signature : <code>void glTexParameterfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1144</i><br>
     * @deprecated use the safer methods {@link #glTexParameterfv(int, int, java.nio.FloatBuffer)} and {@link #glTexParameterfv(int, int, com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glTexParameterfv(int target, int pname, FloatByReference params);
    /**
     * Original signature : <code>void glTexParameterfv(GLenum, GLenum, const GLfloat*)</code><br>
     * <i>native declaration : line 1144</i>
     */
    void glTexParameterfv(int target, int pname, FloatBuffer params);
    /**
     * Original signature : <code>void glTexParameteri(GLenum, GLenum, GLint)</code><br>
     * <i>native declaration : line 1145</i>
     */
    void glTexParameteri(int target, int pname, int param);
    /**
     * Original signature : <code>void glTexParameteriv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1146</i><br>
     * @deprecated use the safer methods {@link #glTexParameteriv(int, int, int[])} and {@link #glTexParameteriv(int, int, com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glTexParameteriv(int target, int pname, IntByReference params);
    /**
     * Original signature : <code>void glTexParameteriv(GLenum, GLenum, const GLint*)</code><br>
     * <i>native declaration : line 1146</i>
     */
    void glTexParameteriv(int target, int pname, int params[]);
    /**
     * Original signature : <code>void glTexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 1147</i>
     */
    void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glTexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*)</code><br>
     * <i>native declaration : line 1148</i>
     */
    void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, TestLibrary.GLvoid pixels);
    /**
     * Original signature : <code>void glTranslated(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1149</i>
     */
    void glTranslated(double x, double y, double z);
    /**
     * Original signature : <code>void glTranslatef(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1150</i>
     */
    void glTranslatef(float x, float y, float z);
    /**
     * Original signature : <code>void glVertex2d(GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1151</i>
     */
    void glVertex2d(double x, double y);
    /**
     * Original signature : <code>void glVertex2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1152</i><br>
     * @deprecated use the safer methods {@link #glVertex2dv(java.nio.DoubleBuffer)} and {@link #glVertex2dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glVertex2dv(DoubleByReference v);
    /**
     * Original signature : <code>void glVertex2dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1152</i>
     */
    void glVertex2dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glVertex2f(GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1153</i>
     */
    void glVertex2f(float x, float y);
    /**
     * Original signature : <code>void glVertex2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1154</i><br>
     * @deprecated use the safer methods {@link #glVertex2fv(java.nio.FloatBuffer)} and {@link #glVertex2fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glVertex2fv(FloatByReference v);
    /**
     * Original signature : <code>void glVertex2fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1154</i>
     */
    void glVertex2fv(FloatBuffer v);
    /**
     * Original signature : <code>void glVertex2i(GLint, GLint)</code><br>
     * <i>native declaration : line 1155</i>
     */
    void glVertex2i(int x, int y);
    /**
     * Original signature : <code>void glVertex2iv(const GLint*)</code><br>
     * <i>native declaration : line 1156</i><br>
     * @deprecated use the safer methods {@link #glVertex2iv(int[])} and {@link #glVertex2iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glVertex2iv(IntByReference v);
    /**
     * Original signature : <code>void glVertex2iv(const GLint*)</code><br>
     * <i>native declaration : line 1156</i>
     */
    void glVertex2iv(int v[]);
    /**
     * Original signature : <code>void glVertex2s(GLshort, GLshort)</code><br>
     * <i>native declaration : line 1157</i>
     */
    void glVertex2s(short x, short y);
    /**
     * Original signature : <code>void glVertex2sv(const GLshort*)</code><br>
     * <i>native declaration : line 1158</i><br>
     * @deprecated use the safer methods {@link #glVertex2sv(java.nio.ShortBuffer)} and {@link #glVertex2sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glVertex2sv(ShortByReference v);
    /**
     * Original signature : <code>void glVertex2sv(const GLshort*)</code><br>
     * <i>native declaration : line 1158</i>
     */
    void glVertex2sv(ShortBuffer v);
    /**
     * Original signature : <code>void glVertex3d(GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1159</i>
     */
    void glVertex3d(double x, double y, double z);
    /**
     * Original signature : <code>void glVertex3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1160</i><br>
     * @deprecated use the safer methods {@link #glVertex3dv(java.nio.DoubleBuffer)} and {@link #glVertex3dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glVertex3dv(DoubleByReference v);
    /**
     * Original signature : <code>void glVertex3dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1160</i>
     */
    void glVertex3dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glVertex3f(GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1161</i>
     */
    void glVertex3f(float x, float y, float z);
    /**
     * Original signature : <code>void glVertex3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1162</i><br>
     * @deprecated use the safer methods {@link #glVertex3fv(java.nio.FloatBuffer)} and {@link #glVertex3fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glVertex3fv(FloatByReference v);
    /**
     * Original signature : <code>void glVertex3fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1162</i>
     */
    void glVertex3fv(FloatBuffer v);
    /**
     * Original signature : <code>void glVertex3i(GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1163</i>
     */
    void glVertex3i(int x, int y, int z);
    /**
     * Original signature : <code>void glVertex3iv(const GLint*)</code><br>
     * <i>native declaration : line 1164</i><br>
     * @deprecated use the safer methods {@link #glVertex3iv(int[])} and {@link #glVertex3iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glVertex3iv(IntByReference v);
    /**
     * Original signature : <code>void glVertex3iv(const GLint*)</code><br>
     * <i>native declaration : line 1164</i>
     */
    void glVertex3iv(int v[]);
    /**
     * Original signature : <code>void glVertex3s(GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1165</i>
     */
    void glVertex3s(short x, short y, short z);
    /**
     * Original signature : <code>void glVertex3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1166</i><br>
     * @deprecated use the safer methods {@link #glVertex3sv(java.nio.ShortBuffer)} and {@link #glVertex3sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glVertex3sv(ShortByReference v);
    /**
     * Original signature : <code>void glVertex3sv(const GLshort*)</code><br>
     * <i>native declaration : line 1166</i>
     */
    void glVertex3sv(ShortBuffer v);
    /**
     * Original signature : <code>void glVertex4d(GLdouble, GLdouble, GLdouble, GLdouble)</code><br>
     * <i>native declaration : line 1167</i>
     */
    void glVertex4d(double x, double y, double z, double w);
    /**
     * Original signature : <code>void glVertex4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1168</i><br>
     * @deprecated use the safer methods {@link #glVertex4dv(java.nio.DoubleBuffer)} and {@link #glVertex4dv(com.sun.jna.ptr.DoubleByReference)} instead
     */
    @Deprecated
    void glVertex4dv(DoubleByReference v);
    /**
     * Original signature : <code>void glVertex4dv(const GLdouble*)</code><br>
     * <i>native declaration : line 1168</i>
     */
    void glVertex4dv(DoubleBuffer v);
    /**
     * Original signature : <code>void glVertex4f(GLfloat, GLfloat, GLfloat, GLfloat)</code><br>
     * <i>native declaration : line 1169</i>
     */
    void glVertex4f(float x, float y, float z, float w);
    /**
     * Original signature : <code>void glVertex4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1170</i><br>
     * @deprecated use the safer methods {@link #glVertex4fv(java.nio.FloatBuffer)} and {@link #glVertex4fv(com.sun.jna.ptr.FloatByReference)} instead
     */
    @Deprecated
    void glVertex4fv(FloatByReference v);
    /**
     * Original signature : <code>void glVertex4fv(const GLfloat*)</code><br>
     * <i>native declaration : line 1170</i>
     */
    void glVertex4fv(FloatBuffer v);
    /**
     * Original signature : <code>void glVertex4i(GLint, GLint, GLint, GLint)</code><br>
     * <i>native declaration : line 1171</i>
     */
    void glVertex4i(int x, int y, int z, int w);
    /**
     * Original signature : <code>void glVertex4iv(const GLint*)</code><br>
     * <i>native declaration : line 1172</i><br>
     * @deprecated use the safer methods {@link #glVertex4iv(int[])} and {@link #glVertex4iv(com.sun.jna.ptr.IntByReference)} instead
     */
    @Deprecated
    void glVertex4iv(IntByReference v);
    /**
     * Original signature : <code>void glVertex4iv(const GLint*)</code><br>
     * <i>native declaration : line 1172</i>
     */
    void glVertex4iv(int v[]);
    /**
     * Original signature : <code>void glVertex4s(GLshort, GLshort, GLshort, GLshort)</code><br>
     * <i>native declaration : line 1173</i>
     */
    void glVertex4s(short x, short y, short z, short w);
    /**
     * Original signature : <code>void glVertex4sv(const GLshort*)</code><br>
     * <i>native declaration : line 1174</i><br>
     * @deprecated use the safer methods {@link #glVertex4sv(java.nio.ShortBuffer)} and {@link #glVertex4sv(com.sun.jna.ptr.ShortByReference)} instead
     */
    @Deprecated
    void glVertex4sv(ShortByReference v);
    /**
     * Original signature : <code>void glVertex4sv(const GLshort*)</code><br>
     * <i>native declaration : line 1174</i>
     */
    void glVertex4sv(ShortBuffer v);
    /**
     * Original signature : <code>void glVertexPointer(GLint, GLenum, GLsizei, const GLvoid*)</code><br>
     * <i>native declaration : line 1175</i>
     */
    void glVertexPointer(int size, int type, int stride, TestLibrary.GLvoid pointer);
    /**
     * Original signature : <code>void glViewport(GLint, GLint, GLsizei, GLsizei)</code><br>
     * <i>native declaration : line 1176</i>
     */
    void glViewport(int x, int y, int width, int height);
    /**
     * Original signature : <code>GLenum glewInit()</code><br>
     * <i>native declaration : line 18024</i>
     */
    int glewInit();
    /**
     * Original signature : <code>GLboolean glewIsSupported(const char*)</code><br>
     * <i>native declaration : line 18025</i><br>
     * @deprecated use the safer methods {@link #glewIsSupported(java.lang.String)} and {@link #glewIsSupported(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    byte glewIsSupported(Pointer name);
    /**
     * Original signature : <code>GLboolean glewIsSupported(const char*)</code><br>
     * <i>native declaration : line 18025</i>
     */
    byte glewIsSupported(String name);
    /**
     * Original signature : <code>GLboolean glewGetExtension(const char*)</code><br>
     * <i>native declaration : line 18034</i><br>
     * @deprecated use the safer methods {@link #glewGetExtension(java.lang.String)} and {@link #glewGetExtension(com.sun.jna.Pointer)} instead
     */
    @Deprecated
    byte glewGetExtension(Pointer name);
    /**
     * Original signature : <code>GLboolean glewGetExtension(const char*)</code><br>
     * <i>native declaration : line 18034</i>
     */
    byte glewGetExtension(String name);
    /**
     * Original signature : <code>GLubyte* glewGetErrorString(GLenum)</code><br>
     * <i>native declaration : line 18035</i>
     */
    Pointer glewGetErrorString(int error);
    /**
     * Original signature : <code>GLubyte* glewGetString(GLenum)</code><br>
     * <i>native declaration : line 18036</i>
     */
    Pointer glewGetString(int name);
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15043</i><br>
     * __glewCopyTexSubImage3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15044</i><br>
     * __glewDrawRangeElements
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15045</i><br>
     * __glewTexImage3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15046</i><br>
     * __glewTexSubImage3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15048</i><br>
     * __glewActiveTexture
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15049</i><br>
     * __glewClientActiveTexture
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15050</i><br>
     * __glewCompressedTexImage1D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15051</i><br>
     * __glewCompressedTexImage2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15052</i><br>
     * __glewCompressedTexImage3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15053</i><br>
     * __glewCompressedTexSubImage1D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15054</i><br>
     * __glewCompressedTexSubImage2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15055</i><br>
     * __glewCompressedTexSubImage3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15056</i><br>
     * __glewGetCompressedTexImage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15057</i><br>
     * __glewLoadTransposeMatrixd
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15058</i><br>
     * __glewLoadTransposeMatrixf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15059</i><br>
     * __glewMultTransposeMatrixd
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15060</i><br>
     * __glewMultTransposeMatrixf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15061</i><br>
     * __glewMultiTexCoord1d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15062</i><br>
     * __glewMultiTexCoord1dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15063</i><br>
     * __glewMultiTexCoord1f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15064</i><br>
     * __glewMultiTexCoord1fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15065</i><br>
     * __glewMultiTexCoord1i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15066</i><br>
     * __glewMultiTexCoord1iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15067</i><br>
     * __glewMultiTexCoord1s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15068</i><br>
     * __glewMultiTexCoord1sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15069</i><br>
     * __glewMultiTexCoord2d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15070</i><br>
     * __glewMultiTexCoord2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15071</i><br>
     * __glewMultiTexCoord2f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15072</i><br>
     * __glewMultiTexCoord2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15073</i><br>
     * __glewMultiTexCoord2i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15074</i><br>
     * __glewMultiTexCoord2iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15075</i><br>
     * __glewMultiTexCoord2s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15076</i><br>
     * __glewMultiTexCoord2sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15077</i><br>
     * __glewMultiTexCoord3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15078</i><br>
     * __glewMultiTexCoord3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15079</i><br>
     * __glewMultiTexCoord3f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15080</i><br>
     * __glewMultiTexCoord3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15081</i><br>
     * __glewMultiTexCoord3i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15082</i><br>
     * __glewMultiTexCoord3iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15083</i><br>
     * __glewMultiTexCoord3s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15084</i><br>
     * __glewMultiTexCoord3sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15085</i><br>
     * __glewMultiTexCoord4d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15086</i><br>
     * __glewMultiTexCoord4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15087</i><br>
     * __glewMultiTexCoord4f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15088</i><br>
     * __glewMultiTexCoord4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15089</i><br>
     * __glewMultiTexCoord4i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15090</i><br>
     * __glewMultiTexCoord4iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15091</i><br>
     * __glewMultiTexCoord4s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15092</i><br>
     * __glewMultiTexCoord4sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15093</i><br>
     * __glewSampleCoverage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15095</i><br>
     * __glewBlendColor
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15096</i><br>
     * __glewBlendEquation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15097</i><br>
     * __glewBlendFuncSeparate
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15098</i><br>
     * __glewFogCoordPointer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15099</i><br>
     * __glewFogCoordd
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15100</i><br>
     * __glewFogCoorddv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15101</i><br>
     * __glewFogCoordf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15102</i><br>
     * __glewFogCoordfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15103</i><br>
     * __glewMultiDrawArrays
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15104</i><br>
     * __glewMultiDrawElements
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15105</i><br>
     * __glewPointParameterf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15106</i><br>
     * __glewPointParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15107</i><br>
     * __glewPointParameteri
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15108</i><br>
     * __glewPointParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15109</i><br>
     * __glewSecondaryColor3b
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15110</i><br>
     * __glewSecondaryColor3bv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15111</i><br>
     * __glewSecondaryColor3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15112</i><br>
     * __glewSecondaryColor3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15113</i><br>
     * __glewSecondaryColor3f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15114</i><br>
     * __glewSecondaryColor3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15115</i><br>
     * __glewSecondaryColor3i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15116</i><br>
     * __glewSecondaryColor3iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15117</i><br>
     * __glewSecondaryColor3s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15118</i><br>
     * __glewSecondaryColor3sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15119</i><br>
     * __glewSecondaryColor3ub
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15120</i><br>
     * __glewSecondaryColor3ubv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15121</i><br>
     * __glewSecondaryColor3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15122</i><br>
     * __glewSecondaryColor3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15123</i><br>
     * __glewSecondaryColor3us
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15124</i><br>
     * __glewSecondaryColor3usv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15125</i><br>
     * __glewSecondaryColorPointer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15126</i><br>
     * __glewWindowPos2d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15127</i><br>
     * __glewWindowPos2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15128</i><br>
     * __glewWindowPos2f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15129</i><br>
     * __glewWindowPos2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15130</i><br>
     * __glewWindowPos2i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15131</i><br>
     * __glewWindowPos2iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15132</i><br>
     * __glewWindowPos2s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15133</i><br>
     * __glewWindowPos2sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15134</i><br>
     * __glewWindowPos3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15135</i><br>
     * __glewWindowPos3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15136</i><br>
     * __glewWindowPos3f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15137</i><br>
     * __glewWindowPos3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15138</i><br>
     * __glewWindowPos3i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15139</i><br>
     * __glewWindowPos3iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15140</i><br>
     * __glewWindowPos3s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15141</i><br>
     * __glewWindowPos3sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15143</i><br>
     * __glewBeginQuery
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15144</i><br>
     * __glewBindBuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15145</i><br>
     * __glewBufferData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15146</i><br>
     * __glewBufferSubData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15147</i><br>
     * __glewDeleteBuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15148</i><br>
     * __glewDeleteQueries
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15149</i><br>
     * __glewEndQuery
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15150</i><br>
     * __glewGenBuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15151</i><br>
     * __glewGenQueries
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15152</i><br>
     * __glewGetBufferParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15153</i><br>
     * __glewGetBufferPointerv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15154</i><br>
     * __glewGetBufferSubData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15155</i><br>
     * __glewGetQueryObjectiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15156</i><br>
     * __glewGetQueryObjectuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15157</i><br>
     * __glewGetQueryiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15158</i><br>
     * __glewIsBuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15159</i><br>
     * __glewIsQuery
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15160</i><br>
     * __glewMapBuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15161</i><br>
     * __glewUnmapBuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15163</i><br>
     * __glewAttachShader
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15164</i><br>
     * __glewBindAttribLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15165</i><br>
     * __glewBlendEquationSeparate
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15166</i><br>
     * __glewCompileShader
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15167</i><br>
     * __glewCreateProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15168</i><br>
     * __glewCreateShader
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15169</i><br>
     * __glewDeleteProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15170</i><br>
     * __glewDeleteShader
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15171</i><br>
     * __glewDetachShader
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15172</i><br>
     * __glewDisableVertexAttribArray
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15173</i><br>
     * __glewDrawBuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15174</i><br>
     * __glewEnableVertexAttribArray
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15175</i><br>
     * __glewGetActiveAttrib
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15176</i><br>
     * __glewGetActiveUniform
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15177</i><br>
     * __glewGetAttachedShaders
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15178</i><br>
     * __glewGetAttribLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15179</i><br>
     * __glewGetProgramInfoLog
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15180</i><br>
     * __glewGetProgramiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15181</i><br>
     * __glewGetShaderInfoLog
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15182</i><br>
     * __glewGetShaderSource
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15183</i><br>
     * __glewGetShaderiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15184</i><br>
     * __glewGetUniformLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15185</i><br>
     * __glewGetUniformfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15186</i><br>
     * __glewGetUniformiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15187</i><br>
     * __glewGetVertexAttribPointerv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15188</i><br>
     * __glewGetVertexAttribdv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15189</i><br>
     * __glewGetVertexAttribfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15190</i><br>
     * __glewGetVertexAttribiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15191</i><br>
     * __glewIsProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15192</i><br>
     * __glewIsShader
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15193</i><br>
     * __glewLinkProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15194</i><br>
     * __glewShaderSource
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15195</i><br>
     * __glewStencilFuncSeparate
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15196</i><br>
     * __glewStencilMaskSeparate
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15197</i><br>
     * __glewStencilOpSeparate
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15198</i><br>
     * __glewUniform1f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15199</i><br>
     * __glewUniform1fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15200</i><br>
     * __glewUniform1i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15201</i><br>
     * __glewUniform1iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15202</i><br>
     * __glewUniform2f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15203</i><br>
     * __glewUniform2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15204</i><br>
     * __glewUniform2i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15205</i><br>
     * __glewUniform2iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15206</i><br>
     * __glewUniform3f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15207</i><br>
     * __glewUniform3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15208</i><br>
     * __glewUniform3i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15209</i><br>
     * __glewUniform3iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15210</i><br>
     * __glewUniform4f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15211</i><br>
     * __glewUniform4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15212</i><br>
     * __glewUniform4i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15213</i><br>
     * __glewUniform4iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15214</i><br>
     * __glewUniformMatrix2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15215</i><br>
     * __glewUniformMatrix3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15216</i><br>
     * __glewUniformMatrix4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15217</i><br>
     * __glewUseProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15218</i><br>
     * __glewValidateProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15219</i><br>
     * __glewVertexAttrib1d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15220</i><br>
     * __glewVertexAttrib1dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15221</i><br>
     * __glewVertexAttrib1f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15222</i><br>
     * __glewVertexAttrib1fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15223</i><br>
     * __glewVertexAttrib1s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15224</i><br>
     * __glewVertexAttrib1sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15225</i><br>
     * __glewVertexAttrib2d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15226</i><br>
     * __glewVertexAttrib2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15227</i><br>
     * __glewVertexAttrib2f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15228</i><br>
     * __glewVertexAttrib2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15229</i><br>
     * __glewVertexAttrib2s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15230</i><br>
     * __glewVertexAttrib2sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15231</i><br>
     * __glewVertexAttrib3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15232</i><br>
     * __glewVertexAttrib3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15233</i><br>
     * __glewVertexAttrib3f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15234</i><br>
     * __glewVertexAttrib3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15235</i><br>
     * __glewVertexAttrib3s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15236</i><br>
     * __glewVertexAttrib3sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15237</i><br>
     * __glewVertexAttrib4Nbv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15238</i><br>
     * __glewVertexAttrib4Niv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15239</i><br>
     * __glewVertexAttrib4Nsv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15240</i><br>
     * __glewVertexAttrib4Nub
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15241</i><br>
     * __glewVertexAttrib4Nubv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15242</i><br>
     * __glewVertexAttrib4Nuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15243</i><br>
     * __glewVertexAttrib4Nusv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15244</i><br>
     * __glewVertexAttrib4bv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15245</i><br>
     * __glewVertexAttrib4d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15246</i><br>
     * __glewVertexAttrib4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15247</i><br>
     * __glewVertexAttrib4f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15248</i><br>
     * __glewVertexAttrib4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15249</i><br>
     * __glewVertexAttrib4iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15250</i><br>
     * __glewVertexAttrib4s
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15251</i><br>
     * __glewVertexAttrib4sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15252</i><br>
     * __glewVertexAttrib4ubv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15253</i><br>
     * __glewVertexAttrib4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15254</i><br>
     * __glewVertexAttrib4usv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15255</i><br>
     * __glewVertexAttribPointer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15257</i><br>
     * __glewUniformMatrix2x3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15258</i><br>
     * __glewUniformMatrix2x4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15259</i><br>
     * __glewUniformMatrix3x2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15260</i><br>
     * __glewUniformMatrix3x4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15261</i><br>
     * __glewUniformMatrix4x2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15262</i><br>
     * __glewUniformMatrix4x3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15264</i><br>
     * __glewBeginConditionalRender
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15265</i><br>
     * __glewBeginTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15266</i><br>
     * __glewBindFragDataLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15267</i><br>
     * __glewClampColor
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15268</i><br>
     * __glewClearBufferfi
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15269</i><br>
     * __glewClearBufferfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15270</i><br>
     * __glewClearBufferiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15271</i><br>
     * __glewClearBufferuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15272</i><br>
     * __glewColorMaski
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15273</i><br>
     * __glewDisablei
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15274</i><br>
     * __glewEnablei
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15275</i><br>
     * __glewEndConditionalRender
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15276</i><br>
     * __glewEndTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15277</i><br>
     * __glewGetBooleani_v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15278</i><br>
     * __glewGetFragDataLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15279</i><br>
     * __glewGetStringi
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15280</i><br>
     * __glewGetTexParameterIiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15281</i><br>
     * __glewGetTexParameterIuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15282</i><br>
     * __glewGetTransformFeedbackVarying
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15283</i><br>
     * __glewGetUniformuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15284</i><br>
     * __glewGetVertexAttribIiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15285</i><br>
     * __glewGetVertexAttribIuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15286</i><br>
     * __glewIsEnabledi
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15287</i><br>
     * __glewTexParameterIiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15288</i><br>
     * __glewTexParameterIuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15289</i><br>
     * __glewTransformFeedbackVaryings
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15290</i><br>
     * __glewUniform1ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15291</i><br>
     * __glewUniform1uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15292</i><br>
     * __glewUniform2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15293</i><br>
     * __glewUniform2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15294</i><br>
     * __glewUniform3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15295</i><br>
     * __glewUniform3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15296</i><br>
     * __glewUniform4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15297</i><br>
     * __glewUniform4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15298</i><br>
     * __glewVertexAttribI1i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15299</i><br>
     * __glewVertexAttribI1iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15300</i><br>
     * __glewVertexAttribI1ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15301</i><br>
     * __glewVertexAttribI1uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15302</i><br>
     * __glewVertexAttribI2i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15303</i><br>
     * __glewVertexAttribI2iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15304</i><br>
     * __glewVertexAttribI2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15305</i><br>
     * __glewVertexAttribI2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15306</i><br>
     * __glewVertexAttribI3i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15307</i><br>
     * __glewVertexAttribI3iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15308</i><br>
     * __glewVertexAttribI3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15309</i><br>
     * __glewVertexAttribI3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15310</i><br>
     * __glewVertexAttribI4bv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15311</i><br>
     * __glewVertexAttribI4i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15312</i><br>
     * __glewVertexAttribI4iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15313</i><br>
     * __glewVertexAttribI4sv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15314</i><br>
     * __glewVertexAttribI4ubv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15315</i><br>
     * __glewVertexAttribI4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15316</i><br>
     * __glewVertexAttribI4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15317</i><br>
     * __glewVertexAttribI4usv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15318</i><br>
     * __glewVertexAttribIPointer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15320</i><br>
     * __glewDrawArraysInstanced
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15321</i><br>
     * __glewDrawElementsInstanced
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15322</i><br>
     * __glewPrimitiveRestartIndex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15323</i><br>
     * __glewTexBuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15325</i><br>
     * __glewFramebufferTexture
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15326</i><br>
     * __glewGetBufferParameteri64v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15327</i><br>
     * __glewGetInteger64i_v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15329</i><br>
     * __glewVertexAttribDivisor
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15331</i><br>
     * __glewBlendEquationSeparatei
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15332</i><br>
     * __glewBlendEquationi
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15333</i><br>
     * __glewBlendFuncSeparatei
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15334</i><br>
     * __glewBlendFunci
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15335</i><br>
     * __glewMinSampleShading
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15337</i><br>
     * __glewTbufferMask3DFX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15339</i><br>
     * __glewDebugMessageCallbackAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15340</i><br>
     * __glewDebugMessageEnableAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15341</i><br>
     * __glewDebugMessageInsertAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15342</i><br>
     * __glewGetDebugMessageLogAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15344</i><br>
     * __glewBlendEquationIndexedAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15345</i><br>
     * __glewBlendEquationSeparateIndexedAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15346</i><br>
     * __glewBlendFuncIndexedAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15347</i><br>
     * __glewBlendFuncSeparateIndexedAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15349</i><br>
     * __glewVertexAttribParameteriAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15351</i><br>
     * __glewMultiDrawArraysIndirectAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15352</i><br>
     * __glewMultiDrawElementsIndirectAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15354</i><br>
     * __glewDeleteNamesAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15355</i><br>
     * __glewGenNamesAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15356</i><br>
     * __glewIsNameAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15358</i><br>
     * __glewBeginPerfMonitorAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15359</i><br>
     * __glewDeletePerfMonitorsAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15360</i><br>
     * __glewEndPerfMonitorAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15361</i><br>
     * __glewGenPerfMonitorsAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15362</i><br>
     * __glewGetPerfMonitorCounterDataAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15363</i><br>
     * __glewGetPerfMonitorCounterInfoAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15364</i><br>
     * __glewGetPerfMonitorCounterStringAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15365</i><br>
     * __glewGetPerfMonitorCountersAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15366</i><br>
     * __glewGetPerfMonitorGroupStringAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15367</i><br>
     * __glewGetPerfMonitorGroupsAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15368</i><br>
     * __glewSelectPerfMonitorCountersAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15370</i><br>
     * __glewSetMultisamplefvAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15372</i><br>
     * __glewTexStorageSparseAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15373</i><br>
     * __glewTextureStorageSparseAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15375</i><br>
     * __glewStencilOpValueAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15377</i><br>
     * __glewTessellationFactorAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15378</i><br>
     * __glewTessellationModeAMD
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15380</i><br>
     * __glewBlitFramebufferANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15382</i><br>
     * __glewRenderbufferStorageMultisampleANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15384</i><br>
     * __glewDrawArraysInstancedANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15385</i><br>
     * __glewDrawElementsInstancedANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15386</i><br>
     * __glewVertexAttribDivisorANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15388</i><br>
     * __glewBeginQueryANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15389</i><br>
     * __glewDeleteQueriesANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15390</i><br>
     * __glewEndQueryANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15391</i><br>
     * __glewGenQueriesANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15392</i><br>
     * __glewGetQueryObjecti64vANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15393</i><br>
     * __glewGetQueryObjectivANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15394</i><br>
     * __glewGetQueryObjectui64vANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15395</i><br>
     * __glewGetQueryObjectuivANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15396</i><br>
     * __glewGetQueryivANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15397</i><br>
     * __glewIsQueryANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15398</i><br>
     * __glewQueryCounterANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15400</i><br>
     * __glewGetTranslatedShaderSourceANGLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15402</i><br>
     * __glewDrawElementArrayAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15403</i><br>
     * __glewDrawRangeElementArrayAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15404</i><br>
     * __glewElementPointerAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15405</i><br>
     * __glewMultiDrawElementArrayAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15406</i><br>
     * __glewMultiDrawRangeElementArrayAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15408</i><br>
     * __glewDeleteFencesAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15409</i><br>
     * __glewFinishFenceAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15410</i><br>
     * __glewFinishObjectAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15411</i><br>
     * __glewGenFencesAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15412</i><br>
     * __glewIsFenceAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15413</i><br>
     * __glewSetFenceAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15414</i><br>
     * __glewTestFenceAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15415</i><br>
     * __glewTestObjectAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15417</i><br>
     * __glewBufferParameteriAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15418</i><br>
     * __glewFlushMappedBufferRangeAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15420</i><br>
     * __glewGetObjectParameterivAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15421</i><br>
     * __glewObjectPurgeableAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15422</i><br>
     * __glewObjectUnpurgeableAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15424</i><br>
     * __glewGetTexParameterPointervAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15425</i><br>
     * __glewTextureRangeAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15427</i><br>
     * __glewBindVertexArrayAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15428</i><br>
     * __glewDeleteVertexArraysAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15429</i><br>
     * __glewGenVertexArraysAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15430</i><br>
     * __glewIsVertexArrayAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15432</i><br>
     * __glewFlushVertexArrayRangeAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15433</i><br>
     * __glewVertexArrayParameteriAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15434</i><br>
     * __glewVertexArrayRangeAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15436</i><br>
     * __glewDisableVertexAttribAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15437</i><br>
     * __glewEnableVertexAttribAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15438</i><br>
     * __glewIsVertexAttribEnabledAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15439</i><br>
     * __glewMapVertexAttrib1dAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15440</i><br>
     * __glewMapVertexAttrib1fAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15441</i><br>
     * __glewMapVertexAttrib2dAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15442</i><br>
     * __glewMapVertexAttrib2fAPPLE
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15444</i><br>
     * __glewClearDepthf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15445</i><br>
     * __glewDepthRangef
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15446</i><br>
     * __glewGetShaderPrecisionFormat
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15447</i><br>
     * __glewReleaseShaderCompiler
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15448</i><br>
     * __glewShaderBinary
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15450</i><br>
     * __glewDrawArraysInstancedBaseInstance
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15451</i><br>
     * __glewDrawElementsInstancedBaseInstance
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15452</i><br>
     * __glewDrawElementsInstancedBaseVertexBaseInstance
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15454</i><br>
     * __glewGetImageHandleARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15455</i><br>
     * __glewGetTextureHandleARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15456</i><br>
     * __glewGetTextureSamplerHandleARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15457</i><br>
     * __glewGetVertexAttribLui64vARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15458</i><br>
     * __glewIsImageHandleResidentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15459</i><br>
     * __glewIsTextureHandleResidentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15460</i><br>
     * __glewMakeImageHandleNonResidentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15461</i><br>
     * __glewMakeImageHandleResidentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15462</i><br>
     * __glewMakeTextureHandleNonResidentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15463</i><br>
     * __glewMakeTextureHandleResidentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15464</i><br>
     * __glewProgramUniformHandleui64ARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15465</i><br>
     * __glewProgramUniformHandleui64vARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15466</i><br>
     * __glewUniformHandleui64ARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15467</i><br>
     * __glewUniformHandleui64vARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15468</i><br>
     * __glewVertexAttribL1ui64ARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15469</i><br>
     * __glewVertexAttribL1ui64vARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15471</i><br>
     * __glewBindFragDataLocationIndexed
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15472</i><br>
     * __glewGetFragDataIndex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15474</i><br>
     * __glewBufferStorage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15475</i><br>
     * __glewNamedBufferStorageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15477</i><br>
     * __glewCreateSyncFromCLeventARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15479</i><br>
     * __glewClearBufferData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15480</i><br>
     * __glewClearBufferSubData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15481</i><br>
     * __glewClearNamedBufferDataEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15482</i><br>
     * __glewClearNamedBufferSubDataEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15484</i><br>
     * __glewClearTexImage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15485</i><br>
     * __glewClearTexSubImage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15487</i><br>
     * __glewClampColorARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15489</i><br>
     * __glewDispatchCompute
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15490</i><br>
     * __glewDispatchComputeIndirect
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15492</i><br>
     * __glewDispatchComputeGroupSizeARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15494</i><br>
     * __glewCopyBufferSubData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15496</i><br>
     * __glewCopyImageSubData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15498</i><br>
     * __glewDebugMessageCallbackARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15499</i><br>
     * __glewDebugMessageControlARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15500</i><br>
     * __glewDebugMessageInsertARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15501</i><br>
     * __glewGetDebugMessageLogARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15503</i><br>
     * __glewDrawBuffersARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15505</i><br>
     * __glewBlendEquationSeparateiARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15506</i><br>
     * __glewBlendEquationiARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15507</i><br>
     * __glewBlendFuncSeparateiARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15508</i><br>
     * __glewBlendFunciARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15510</i><br>
     * __glewDrawElementsBaseVertex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15511</i><br>
     * __glewDrawElementsInstancedBaseVertex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15512</i><br>
     * __glewDrawRangeElementsBaseVertex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15513</i><br>
     * __glewMultiDrawElementsBaseVertex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15515</i><br>
     * __glewDrawArraysIndirect
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15516</i><br>
     * __glewDrawElementsIndirect
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15518</i><br>
     * __glewFramebufferParameteri
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15519</i><br>
     * __glewGetFramebufferParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15520</i><br>
     * __glewGetNamedFramebufferParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15521</i><br>
     * __glewNamedFramebufferParameteriEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15523</i><br>
     * __glewBindFramebuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15524</i><br>
     * __glewBindRenderbuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15525</i><br>
     * __glewBlitFramebuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15526</i><br>
     * __glewCheckFramebufferStatus
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15527</i><br>
     * __glewDeleteFramebuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15528</i><br>
     * __glewDeleteRenderbuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15529</i><br>
     * __glewFramebufferRenderbuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15530</i><br>
     * __glewFramebufferTexture1D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15531</i><br>
     * __glewFramebufferTexture2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15532</i><br>
     * __glewFramebufferTexture3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15533</i><br>
     * __glewFramebufferTextureLayer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15534</i><br>
     * __glewGenFramebuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15535</i><br>
     * __glewGenRenderbuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15536</i><br>
     * __glewGenerateMipmap
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15537</i><br>
     * __glewGetFramebufferAttachmentParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15538</i><br>
     * __glewGetRenderbufferParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15539</i><br>
     * __glewIsFramebuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15540</i><br>
     * __glewIsRenderbuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15541</i><br>
     * __glewRenderbufferStorage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15542</i><br>
     * __glewRenderbufferStorageMultisample
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15544</i><br>
     * __glewFramebufferTextureARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15545</i><br>
     * __glewFramebufferTextureFaceARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15546</i><br>
     * __glewFramebufferTextureLayerARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15547</i><br>
     * __glewProgramParameteriARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15549</i><br>
     * __glewGetProgramBinary
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15550</i><br>
     * __glewProgramBinary
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15551</i><br>
     * __glewProgramParameteri
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15553</i><br>
     * __glewGetUniformdv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15554</i><br>
     * __glewUniform1d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15555</i><br>
     * __glewUniform1dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15556</i><br>
     * __glewUniform2d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15557</i><br>
     * __glewUniform2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15558</i><br>
     * __glewUniform3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15559</i><br>
     * __glewUniform3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15560</i><br>
     * __glewUniform4d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15561</i><br>
     * __glewUniform4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15562</i><br>
     * __glewUniformMatrix2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15563</i><br>
     * __glewUniformMatrix2x3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15564</i><br>
     * __glewUniformMatrix2x4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15565</i><br>
     * __glewUniformMatrix3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15566</i><br>
     * __glewUniformMatrix3x2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15567</i><br>
     * __glewUniformMatrix3x4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15568</i><br>
     * __glewUniformMatrix4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15569</i><br>
     * __glewUniformMatrix4x2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15570</i><br>
     * __glewUniformMatrix4x3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15572</i><br>
     * __glewColorSubTable
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15573</i><br>
     * __glewColorTable
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15574</i><br>
     * __glewColorTableParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15575</i><br>
     * __glewColorTableParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15576</i><br>
     * __glewConvolutionFilter1D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15577</i><br>
     * __glewConvolutionFilter2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15578</i><br>
     * __glewConvolutionParameterf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15579</i><br>
     * __glewConvolutionParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15580</i><br>
     * __glewConvolutionParameteri
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15581</i><br>
     * __glewConvolutionParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15582</i><br>
     * __glewCopyColorSubTable
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15583</i><br>
     * __glewCopyColorTable
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15584</i><br>
     * __glewCopyConvolutionFilter1D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15585</i><br>
     * __glewCopyConvolutionFilter2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15586</i><br>
     * __glewGetColorTable
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15587</i><br>
     * __glewGetColorTableParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15588</i><br>
     * __glewGetColorTableParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15589</i><br>
     * __glewGetConvolutionFilter
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15590</i><br>
     * __glewGetConvolutionParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15591</i><br>
     * __glewGetConvolutionParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15592</i><br>
     * __glewGetHistogram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15593</i><br>
     * __glewGetHistogramParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15594</i><br>
     * __glewGetHistogramParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15595</i><br>
     * __glewGetMinmax
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15596</i><br>
     * __glewGetMinmaxParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15597</i><br>
     * __glewGetMinmaxParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15598</i><br>
     * __glewGetSeparableFilter
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15599</i><br>
     * __glewHistogram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15600</i><br>
     * __glewMinmax
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15601</i><br>
     * __glewResetHistogram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15602</i><br>
     * __glewResetMinmax
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15603</i><br>
     * __glewSeparableFilter2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15605</i><br>
     * __glewMultiDrawArraysIndirectCountARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15606</i><br>
     * __glewMultiDrawElementsIndirectCountARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15608</i><br>
     * __glewDrawArraysInstancedARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15609</i><br>
     * __glewDrawElementsInstancedARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15610</i><br>
     * __glewVertexAttribDivisorARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15612</i><br>
     * __glewGetInternalformativ
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15614</i><br>
     * __glewGetInternalformati64v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15616</i><br>
     * __glewInvalidateBufferData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15617</i><br>
     * __glewInvalidateBufferSubData
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15618</i><br>
     * __glewInvalidateFramebuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15619</i><br>
     * __glewInvalidateSubFramebuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15620</i><br>
     * __glewInvalidateTexImage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15621</i><br>
     * __glewInvalidateTexSubImage
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15623</i><br>
     * __glewFlushMappedBufferRange
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15624</i><br>
     * __glewMapBufferRange
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15626</i><br>
     * __glewCurrentPaletteMatrixARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15627</i><br>
     * __glewMatrixIndexPointerARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15628</i><br>
     * __glewMatrixIndexubvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15629</i><br>
     * __glewMatrixIndexuivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15630</i><br>
     * __glewMatrixIndexusvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15632</i><br>
     * __glewBindBuffersBase
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15633</i><br>
     * __glewBindBuffersRange
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15634</i><br>
     * __glewBindImageTextures
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15635</i><br>
     * __glewBindSamplers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15636</i><br>
     * __glewBindTextures
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15637</i><br>
     * __glewBindVertexBuffers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15639</i><br>
     * __glewMultiDrawArraysIndirect
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15640</i><br>
     * __glewMultiDrawElementsIndirect
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15642</i><br>
     * __glewSampleCoverageARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15644</i><br>
     * __glewActiveTextureARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15645</i><br>
     * __glewClientActiveTextureARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15646</i><br>
     * __glewMultiTexCoord1dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15647</i><br>
     * __glewMultiTexCoord1dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15648</i><br>
     * __glewMultiTexCoord1fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15649</i><br>
     * __glewMultiTexCoord1fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15650</i><br>
     * __glewMultiTexCoord1iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15651</i><br>
     * __glewMultiTexCoord1ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15652</i><br>
     * __glewMultiTexCoord1sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15653</i><br>
     * __glewMultiTexCoord1svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15654</i><br>
     * __glewMultiTexCoord2dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15655</i><br>
     * __glewMultiTexCoord2dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15656</i><br>
     * __glewMultiTexCoord2fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15657</i><br>
     * __glewMultiTexCoord2fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15658</i><br>
     * __glewMultiTexCoord2iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15659</i><br>
     * __glewMultiTexCoord2ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15660</i><br>
     * __glewMultiTexCoord2sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15661</i><br>
     * __glewMultiTexCoord2svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15662</i><br>
     * __glewMultiTexCoord3dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15663</i><br>
     * __glewMultiTexCoord3dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15664</i><br>
     * __glewMultiTexCoord3fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15665</i><br>
     * __glewMultiTexCoord3fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15666</i><br>
     * __glewMultiTexCoord3iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15667</i><br>
     * __glewMultiTexCoord3ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15668</i><br>
     * __glewMultiTexCoord3sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15669</i><br>
     * __glewMultiTexCoord3svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15670</i><br>
     * __glewMultiTexCoord4dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15671</i><br>
     * __glewMultiTexCoord4dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15672</i><br>
     * __glewMultiTexCoord4fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15673</i><br>
     * __glewMultiTexCoord4fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15674</i><br>
     * __glewMultiTexCoord4iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15675</i><br>
     * __glewMultiTexCoord4ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15676</i><br>
     * __glewMultiTexCoord4sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15677</i><br>
     * __glewMultiTexCoord4svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15679</i><br>
     * __glewBeginQueryARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15680</i><br>
     * __glewDeleteQueriesARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15681</i><br>
     * __glewEndQueryARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15682</i><br>
     * __glewGenQueriesARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15683</i><br>
     * __glewGetQueryObjectivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15684</i><br>
     * __glewGetQueryObjectuivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15685</i><br>
     * __glewGetQueryivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15686</i><br>
     * __glewIsQueryARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15688</i><br>
     * __glewPointParameterfARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15689</i><br>
     * __glewPointParameterfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15691</i><br>
     * __glewGetProgramInterfaceiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15692</i><br>
     * __glewGetProgramResourceIndex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15693</i><br>
     * __glewGetProgramResourceLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15694</i><br>
     * __glewGetProgramResourceLocationIndex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15695</i><br>
     * __glewGetProgramResourceName
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15696</i><br>
     * __glewGetProgramResourceiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15698</i><br>
     * __glewProvokingVertex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15700</i><br>
     * __glewGetGraphicsResetStatusARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15701</i><br>
     * __glewGetnColorTableARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15702</i><br>
     * __glewGetnCompressedTexImageARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15703</i><br>
     * __glewGetnConvolutionFilterARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15704</i><br>
     * __glewGetnHistogramARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15705</i><br>
     * __glewGetnMapdvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15706</i><br>
     * __glewGetnMapfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15707</i><br>
     * __glewGetnMapivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15708</i><br>
     * __glewGetnMinmaxARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15709</i><br>
     * __glewGetnPixelMapfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15710</i><br>
     * __glewGetnPixelMapuivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15711</i><br>
     * __glewGetnPixelMapusvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15712</i><br>
     * __glewGetnPolygonStippleARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15713</i><br>
     * __glewGetnSeparableFilterARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15714</i><br>
     * __glewGetnTexImageARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15715</i><br>
     * __glewGetnUniformdvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15716</i><br>
     * __glewGetnUniformfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15717</i><br>
     * __glewGetnUniformivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15718</i><br>
     * __glewGetnUniformuivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15719</i><br>
     * __glewReadnPixelsARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15721</i><br>
     * __glewMinSampleShadingARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15723</i><br>
     * __glewBindSampler
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15724</i><br>
     * __glewDeleteSamplers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15725</i><br>
     * __glewGenSamplers
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15726</i><br>
     * __glewGetSamplerParameterIiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15727</i><br>
     * __glewGetSamplerParameterIuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15728</i><br>
     * __glewGetSamplerParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15729</i><br>
     * __glewGetSamplerParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15730</i><br>
     * __glewIsSampler
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15731</i><br>
     * __glewSamplerParameterIiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15732</i><br>
     * __glewSamplerParameterIuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15733</i><br>
     * __glewSamplerParameterf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15734</i><br>
     * __glewSamplerParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15735</i><br>
     * __glewSamplerParameteri
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15736</i><br>
     * __glewSamplerParameteriv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15738</i><br>
     * __glewActiveShaderProgram
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15739</i><br>
     * __glewBindProgramPipeline
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15740</i><br>
     * __glewCreateShaderProgramv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15741</i><br>
     * __glewDeleteProgramPipelines
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15742</i><br>
     * __glewGenProgramPipelines
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15743</i><br>
     * __glewGetProgramPipelineInfoLog
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15744</i><br>
     * __glewGetProgramPipelineiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15745</i><br>
     * __glewIsProgramPipeline
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15746</i><br>
     * __glewProgramUniform1d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15747</i><br>
     * __glewProgramUniform1dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15748</i><br>
     * __glewProgramUniform1f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15749</i><br>
     * __glewProgramUniform1fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15750</i><br>
     * __glewProgramUniform1i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15751</i><br>
     * __glewProgramUniform1iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15752</i><br>
     * __glewProgramUniform1ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15753</i><br>
     * __glewProgramUniform1uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15754</i><br>
     * __glewProgramUniform2d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15755</i><br>
     * __glewProgramUniform2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15756</i><br>
     * __glewProgramUniform2f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15757</i><br>
     * __glewProgramUniform2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15758</i><br>
     * __glewProgramUniform2i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15759</i><br>
     * __glewProgramUniform2iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15760</i><br>
     * __glewProgramUniform2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15761</i><br>
     * __glewProgramUniform2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15762</i><br>
     * __glewProgramUniform3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15763</i><br>
     * __glewProgramUniform3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15764</i><br>
     * __glewProgramUniform3f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15765</i><br>
     * __glewProgramUniform3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15766</i><br>
     * __glewProgramUniform3i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15767</i><br>
     * __glewProgramUniform3iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15768</i><br>
     * __glewProgramUniform3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15769</i><br>
     * __glewProgramUniform3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15770</i><br>
     * __glewProgramUniform4d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15771</i><br>
     * __glewProgramUniform4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15772</i><br>
     * __glewProgramUniform4f
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15773</i><br>
     * __glewProgramUniform4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15774</i><br>
     * __glewProgramUniform4i
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15775</i><br>
     * __glewProgramUniform4iv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15776</i><br>
     * __glewProgramUniform4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15777</i><br>
     * __glewProgramUniform4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15778</i><br>
     * __glewProgramUniformMatrix2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15779</i><br>
     * __glewProgramUniformMatrix2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15780</i><br>
     * __glewProgramUniformMatrix2x3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15781</i><br>
     * __glewProgramUniformMatrix2x3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15782</i><br>
     * __glewProgramUniformMatrix2x4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15783</i><br>
     * __glewProgramUniformMatrix2x4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15784</i><br>
     * __glewProgramUniformMatrix3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15785</i><br>
     * __glewProgramUniformMatrix3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15786</i><br>
     * __glewProgramUniformMatrix3x2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15787</i><br>
     * __glewProgramUniformMatrix3x2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15788</i><br>
     * __glewProgramUniformMatrix3x4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15789</i><br>
     * __glewProgramUniformMatrix3x4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15790</i><br>
     * __glewProgramUniformMatrix4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15791</i><br>
     * __glewProgramUniformMatrix4fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15792</i><br>
     * __glewProgramUniformMatrix4x2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15793</i><br>
     * __glewProgramUniformMatrix4x2fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15794</i><br>
     * __glewProgramUniformMatrix4x3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15795</i><br>
     * __glewProgramUniformMatrix4x3fv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15796</i><br>
     * __glewUseProgramStages
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15797</i><br>
     * __glewValidateProgramPipeline
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15799</i><br>
     * __glewGetActiveAtomicCounterBufferiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15801</i><br>
     * __glewBindImageTexture
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15802</i><br>
     * __glewMemoryBarrier
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15804</i><br>
     * __glewAttachObjectARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15805</i><br>
     * __glewCompileShaderARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15806</i><br>
     * __glewCreateProgramObjectARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15807</i><br>
     * __glewCreateShaderObjectARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15808</i><br>
     * __glewDeleteObjectARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15809</i><br>
     * __glewDetachObjectARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15810</i><br>
     * __glewGetActiveUniformARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15811</i><br>
     * __glewGetAttachedObjectsARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15812</i><br>
     * __glewGetHandleARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15813</i><br>
     * __glewGetInfoLogARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15814</i><br>
     * __glewGetObjectParameterfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15815</i><br>
     * __glewGetObjectParameterivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15816</i><br>
     * __glewGetShaderSourceARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15817</i><br>
     * __glewGetUniformLocationARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15818</i><br>
     * __glewGetUniformfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15819</i><br>
     * __glewGetUniformivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15820</i><br>
     * __glewLinkProgramARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15821</i><br>
     * __glewShaderSourceARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15822</i><br>
     * __glewUniform1fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15823</i><br>
     * __glewUniform1fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15824</i><br>
     * __glewUniform1iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15825</i><br>
     * __glewUniform1ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15826</i><br>
     * __glewUniform2fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15827</i><br>
     * __glewUniform2fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15828</i><br>
     * __glewUniform2iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15829</i><br>
     * __glewUniform2ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15830</i><br>
     * __glewUniform3fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15831</i><br>
     * __glewUniform3fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15832</i><br>
     * __glewUniform3iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15833</i><br>
     * __glewUniform3ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15834</i><br>
     * __glewUniform4fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15835</i><br>
     * __glewUniform4fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15836</i><br>
     * __glewUniform4iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15837</i><br>
     * __glewUniform4ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15838</i><br>
     * __glewUniformMatrix2fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15839</i><br>
     * __glewUniformMatrix3fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15840</i><br>
     * __glewUniformMatrix4fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15841</i><br>
     * __glewUseProgramObjectARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15842</i><br>
     * __glewValidateProgramARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15844</i><br>
     * __glewShaderStorageBlockBinding
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15846</i><br>
     * __glewGetActiveSubroutineName
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15847</i><br>
     * __glewGetActiveSubroutineUniformName
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15848</i><br>
     * __glewGetActiveSubroutineUniformiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15849</i><br>
     * __glewGetProgramStageiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15850</i><br>
     * __glewGetSubroutineIndex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15851</i><br>
     * __glewGetSubroutineUniformLocation
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15852</i><br>
     * __glewGetUniformSubroutineuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15853</i><br>
     * __glewUniformSubroutinesuiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15855</i><br>
     * __glewCompileShaderIncludeARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15856</i><br>
     * __glewDeleteNamedStringARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15857</i><br>
     * __glewGetNamedStringARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15858</i><br>
     * __glewGetNamedStringivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15859</i><br>
     * __glewIsNamedStringARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15860</i><br>
     * __glewNamedStringARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15862</i><br>
     * __glewTexPageCommitmentARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15863</i><br>
     * __glewTexturePageCommitmentEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15865</i><br>
     * __glewClientWaitSync
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15866</i><br>
     * __glewDeleteSync
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15867</i><br>
     * __glewFenceSync
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15868</i><br>
     * __glewGetInteger64v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15869</i><br>
     * __glewGetSynciv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15870</i><br>
     * __glewIsSync
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15871</i><br>
     * __glewWaitSync
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15873</i><br>
     * __glewPatchParameterfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15874</i><br>
     * __glewPatchParameteri
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15876</i><br>
     * __glewTexBufferARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15878</i><br>
     * __glewTexBufferRange
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15879</i><br>
     * __glewTextureBufferRangeEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15881</i><br>
     * __glewCompressedTexImage1DARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15882</i><br>
     * __glewCompressedTexImage2DARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15883</i><br>
     * __glewCompressedTexImage3DARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15884</i><br>
     * __glewCompressedTexSubImage1DARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15885</i><br>
     * __glewCompressedTexSubImage2DARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15886</i><br>
     * __glewCompressedTexSubImage3DARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15887</i><br>
     * __glewGetCompressedTexImageARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15889</i><br>
     * __glewGetMultisamplefv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15890</i><br>
     * __glewSampleMaski
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15891</i><br>
     * __glewTexImage2DMultisample
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15892</i><br>
     * __glewTexImage3DMultisample
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15894</i><br>
     * __glewTexStorage1D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15895</i><br>
     * __glewTexStorage2D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15896</i><br>
     * __glewTexStorage3D
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15897</i><br>
     * __glewTextureStorage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15898</i><br>
     * __glewTextureStorage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15899</i><br>
     * __glewTextureStorage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15901</i><br>
     * __glewTexStorage2DMultisample
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15902</i><br>
     * __glewTexStorage3DMultisample
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15903</i><br>
     * __glewTextureStorage2DMultisampleEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15904</i><br>
     * __glewTextureStorage3DMultisampleEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15906</i><br>
     * __glewTextureView
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15908</i><br>
     * __glewGetQueryObjecti64v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15909</i><br>
     * __glewGetQueryObjectui64v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15910</i><br>
     * __glewQueryCounter
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15912</i><br>
     * __glewBindTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15913</i><br>
     * __glewDeleteTransformFeedbacks
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15914</i><br>
     * __glewDrawTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15915</i><br>
     * __glewGenTransformFeedbacks
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15916</i><br>
     * __glewIsTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15917</i><br>
     * __glewPauseTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15918</i><br>
     * __glewResumeTransformFeedback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15920</i><br>
     * __glewBeginQueryIndexed
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15921</i><br>
     * __glewDrawTransformFeedbackStream
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15922</i><br>
     * __glewEndQueryIndexed
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15923</i><br>
     * __glewGetQueryIndexediv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15925</i><br>
     * __glewDrawTransformFeedbackInstanced
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15926</i><br>
     * __glewDrawTransformFeedbackStreamInstanced
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15928</i><br>
     * __glewLoadTransposeMatrixdARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15929</i><br>
     * __glewLoadTransposeMatrixfARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15930</i><br>
     * __glewMultTransposeMatrixdARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15931</i><br>
     * __glewMultTransposeMatrixfARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15933</i><br>
     * __glewBindBufferBase
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15934</i><br>
     * __glewBindBufferRange
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15935</i><br>
     * __glewGetActiveUniformBlockName
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15936</i><br>
     * __glewGetActiveUniformBlockiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15937</i><br>
     * __glewGetActiveUniformName
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15938</i><br>
     * __glewGetActiveUniformsiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15939</i><br>
     * __glewGetIntegeri_v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15940</i><br>
     * __glewGetUniformBlockIndex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15941</i><br>
     * __glewGetUniformIndices
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15942</i><br>
     * __glewUniformBlockBinding
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15944</i><br>
     * __glewBindVertexArray
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15945</i><br>
     * __glewDeleteVertexArrays
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15946</i><br>
     * __glewGenVertexArrays
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15947</i><br>
     * __glewIsVertexArray
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15949</i><br>
     * __glewGetVertexAttribLdv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15950</i><br>
     * __glewVertexAttribL1d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15951</i><br>
     * __glewVertexAttribL1dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15952</i><br>
     * __glewVertexAttribL2d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15953</i><br>
     * __glewVertexAttribL2dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15954</i><br>
     * __glewVertexAttribL3d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15955</i><br>
     * __glewVertexAttribL3dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15956</i><br>
     * __glewVertexAttribL4d
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15957</i><br>
     * __glewVertexAttribL4dv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15958</i><br>
     * __glewVertexAttribLPointer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15960</i><br>
     * __glewBindVertexBuffer
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15961</i><br>
     * __glewVertexAttribBinding
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15962</i><br>
     * __glewVertexAttribFormat
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15963</i><br>
     * __glewVertexAttribIFormat
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15964</i><br>
     * __glewVertexAttribLFormat
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15965</i><br>
     * __glewVertexBindingDivisor
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15967</i><br>
     * __glewVertexBlendARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15968</i><br>
     * __glewWeightPointerARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15969</i><br>
     * __glewWeightbvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15970</i><br>
     * __glewWeightdvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15971</i><br>
     * __glewWeightfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15972</i><br>
     * __glewWeightivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15973</i><br>
     * __glewWeightsvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15974</i><br>
     * __glewWeightubvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15975</i><br>
     * __glewWeightuivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15976</i><br>
     * __glewWeightusvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15978</i><br>
     * __glewBindBufferARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15979</i><br>
     * __glewBufferDataARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15980</i><br>
     * __glewBufferSubDataARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15981</i><br>
     * __glewDeleteBuffersARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15982</i><br>
     * __glewGenBuffersARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15983</i><br>
     * __glewGetBufferParameterivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15984</i><br>
     * __glewGetBufferPointervARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15985</i><br>
     * __glewGetBufferSubDataARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15986</i><br>
     * __glewIsBufferARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15987</i><br>
     * __glewMapBufferARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15988</i><br>
     * __glewUnmapBufferARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15990</i><br>
     * __glewBindProgramARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15991</i><br>
     * __glewDeleteProgramsARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15992</i><br>
     * __glewDisableVertexAttribArrayARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15993</i><br>
     * __glewEnableVertexAttribArrayARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15994</i><br>
     * __glewGenProgramsARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15995</i><br>
     * __glewGetProgramEnvParameterdvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15996</i><br>
     * __glewGetProgramEnvParameterfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15997</i><br>
     * __glewGetProgramLocalParameterdvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15998</i><br>
     * __glewGetProgramLocalParameterfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 15999</i><br>
     * __glewGetProgramStringARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16000</i><br>
     * __glewGetProgramivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16001</i><br>
     * __glewGetVertexAttribPointervARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16002</i><br>
     * __glewGetVertexAttribdvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16003</i><br>
     * __glewGetVertexAttribfvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16004</i><br>
     * __glewGetVertexAttribivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16005</i><br>
     * __glewIsProgramARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16006</i><br>
     * __glewProgramEnvParameter4dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16007</i><br>
     * __glewProgramEnvParameter4dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16008</i><br>
     * __glewProgramEnvParameter4fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16009</i><br>
     * __glewProgramEnvParameter4fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16010</i><br>
     * __glewProgramLocalParameter4dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16011</i><br>
     * __glewProgramLocalParameter4dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16012</i><br>
     * __glewProgramLocalParameter4fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16013</i><br>
     * __glewProgramLocalParameter4fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16014</i><br>
     * __glewProgramStringARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16015</i><br>
     * __glewVertexAttrib1dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16016</i><br>
     * __glewVertexAttrib1dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16017</i><br>
     * __glewVertexAttrib1fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16018</i><br>
     * __glewVertexAttrib1fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16019</i><br>
     * __glewVertexAttrib1sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16020</i><br>
     * __glewVertexAttrib1svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16021</i><br>
     * __glewVertexAttrib2dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16022</i><br>
     * __glewVertexAttrib2dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16023</i><br>
     * __glewVertexAttrib2fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16024</i><br>
     * __glewVertexAttrib2fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16025</i><br>
     * __glewVertexAttrib2sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16026</i><br>
     * __glewVertexAttrib2svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16027</i><br>
     * __glewVertexAttrib3dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16028</i><br>
     * __glewVertexAttrib3dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16029</i><br>
     * __glewVertexAttrib3fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16030</i><br>
     * __glewVertexAttrib3fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16031</i><br>
     * __glewVertexAttrib3sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16032</i><br>
     * __glewVertexAttrib3svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16033</i><br>
     * __glewVertexAttrib4NbvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16034</i><br>
     * __glewVertexAttrib4NivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16035</i><br>
     * __glewVertexAttrib4NsvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16036</i><br>
     * __glewVertexAttrib4NubARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16037</i><br>
     * __glewVertexAttrib4NubvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16038</i><br>
     * __glewVertexAttrib4NuivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16039</i><br>
     * __glewVertexAttrib4NusvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16040</i><br>
     * __glewVertexAttrib4bvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16041</i><br>
     * __glewVertexAttrib4dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16042</i><br>
     * __glewVertexAttrib4dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16043</i><br>
     * __glewVertexAttrib4fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16044</i><br>
     * __glewVertexAttrib4fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16045</i><br>
     * __glewVertexAttrib4ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16046</i><br>
     * __glewVertexAttrib4sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16047</i><br>
     * __glewVertexAttrib4svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16048</i><br>
     * __glewVertexAttrib4ubvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16049</i><br>
     * __glewVertexAttrib4uivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16050</i><br>
     * __glewVertexAttrib4usvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16051</i><br>
     * __glewVertexAttribPointerARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16053</i><br>
     * __glewBindAttribLocationARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16054</i><br>
     * __glewGetActiveAttribARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16055</i><br>
     * __glewGetAttribLocationARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16057</i><br>
     * __glewColorP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16058</i><br>
     * __glewColorP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16059</i><br>
     * __glewColorP4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16060</i><br>
     * __glewColorP4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16061</i><br>
     * __glewMultiTexCoordP1ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16062</i><br>
     * __glewMultiTexCoordP1uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16063</i><br>
     * __glewMultiTexCoordP2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16064</i><br>
     * __glewMultiTexCoordP2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16065</i><br>
     * __glewMultiTexCoordP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16066</i><br>
     * __glewMultiTexCoordP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16067</i><br>
     * __glewMultiTexCoordP4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16068</i><br>
     * __glewMultiTexCoordP4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16069</i><br>
     * __glewNormalP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16070</i><br>
     * __glewNormalP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16071</i><br>
     * __glewSecondaryColorP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16072</i><br>
     * __glewSecondaryColorP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16073</i><br>
     * __glewTexCoordP1ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16074</i><br>
     * __glewTexCoordP1uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16075</i><br>
     * __glewTexCoordP2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16076</i><br>
     * __glewTexCoordP2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16077</i><br>
     * __glewTexCoordP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16078</i><br>
     * __glewTexCoordP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16079</i><br>
     * __glewTexCoordP4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16080</i><br>
     * __glewTexCoordP4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16081</i><br>
     * __glewVertexAttribP1ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16082</i><br>
     * __glewVertexAttribP1uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16083</i><br>
     * __glewVertexAttribP2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16084</i><br>
     * __glewVertexAttribP2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16085</i><br>
     * __glewVertexAttribP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16086</i><br>
     * __glewVertexAttribP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16087</i><br>
     * __glewVertexAttribP4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16088</i><br>
     * __glewVertexAttribP4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16089</i><br>
     * __glewVertexP2ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16090</i><br>
     * __glewVertexP2uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16091</i><br>
     * __glewVertexP3ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16092</i><br>
     * __glewVertexP3uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16093</i><br>
     * __glewVertexP4ui
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16094</i><br>
     * __glewVertexP4uiv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16096</i><br>
     * __glewDepthRangeArrayv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16097</i><br>
     * __glewDepthRangeIndexed
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16098</i><br>
     * __glewGetDoublei_v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16099</i><br>
     * __glewGetFloati_v
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16100</i><br>
     * __glewScissorArrayv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16101</i><br>
     * __glewScissorIndexed
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16102</i><br>
     * __glewScissorIndexedv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16103</i><br>
     * __glewViewportArrayv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16104</i><br>
     * __glewViewportIndexedf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16105</i><br>
     * __glewViewportIndexedfv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16107</i><br>
     * __glewWindowPos2dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16108</i><br>
     * __glewWindowPos2dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16109</i><br>
     * __glewWindowPos2fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16110</i><br>
     * __glewWindowPos2fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16111</i><br>
     * __glewWindowPos2iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16112</i><br>
     * __glewWindowPos2ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16113</i><br>
     * __glewWindowPos2sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16114</i><br>
     * __glewWindowPos2svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16115</i><br>
     * __glewWindowPos3dARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16116</i><br>
     * __glewWindowPos3dvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16117</i><br>
     * __glewWindowPos3fARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16118</i><br>
     * __glewWindowPos3fvARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16119</i><br>
     * __glewWindowPos3iARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16120</i><br>
     * __glewWindowPos3ivARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16121</i><br>
     * __glewWindowPos3sARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16122</i><br>
     * __glewWindowPos3svARB
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16124</i><br>
     * __glewDrawBuffersATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16126</i><br>
     * __glewDrawElementArrayATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16127</i><br>
     * __glewDrawRangeElementArrayATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16128</i><br>
     * __glewElementPointerATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16130</i><br>
     * __glewGetTexBumpParameterfvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16131</i><br>
     * __glewGetTexBumpParameterivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16132</i><br>
     * __glewTexBumpParameterfvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16133</i><br>
     * __glewTexBumpParameterivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16135</i><br>
     * __glewAlphaFragmentOp1ATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16136</i><br>
     * __glewAlphaFragmentOp2ATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16137</i><br>
     * __glewAlphaFragmentOp3ATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16138</i><br>
     * __glewBeginFragmentShaderATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16139</i><br>
     * __glewBindFragmentShaderATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16140</i><br>
     * __glewColorFragmentOp1ATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16141</i><br>
     * __glewColorFragmentOp2ATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16142</i><br>
     * __glewColorFragmentOp3ATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16143</i><br>
     * __glewDeleteFragmentShaderATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16144</i><br>
     * __glewEndFragmentShaderATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16145</i><br>
     * __glewGenFragmentShadersATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16146</i><br>
     * __glewPassTexCoordATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16147</i><br>
     * __glewSampleMapATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16148</i><br>
     * __glewSetFragmentShaderConstantATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16150</i><br>
     * __glewMapObjectBufferATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16151</i><br>
     * __glewUnmapObjectBufferATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16153</i><br>
     * __glewPNTrianglesfATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16154</i><br>
     * __glewPNTrianglesiATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16156</i><br>
     * __glewStencilFuncSeparateATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16157</i><br>
     * __glewStencilOpSeparateATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16159</i><br>
     * __glewArrayObjectATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16160</i><br>
     * __glewFreeObjectBufferATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16161</i><br>
     * __glewGetArrayObjectfvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16162</i><br>
     * __glewGetArrayObjectivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16163</i><br>
     * __glewGetObjectBufferfvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16164</i><br>
     * __glewGetObjectBufferivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16165</i><br>
     * __glewGetVariantArrayObjectfvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16166</i><br>
     * __glewGetVariantArrayObjectivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16167</i><br>
     * __glewIsObjectBufferATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16168</i><br>
     * __glewNewObjectBufferATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16169</i><br>
     * __glewUpdateObjectBufferATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16170</i><br>
     * __glewVariantArrayObjectATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16172</i><br>
     * __glewGetVertexAttribArrayObjectfvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16173</i><br>
     * __glewGetVertexAttribArrayObjectivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16174</i><br>
     * __glewVertexAttribArrayObjectATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16176</i><br>
     * __glewClientActiveVertexStreamATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16177</i><br>
     * __glewNormalStream3bATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16178</i><br>
     * __glewNormalStream3bvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16179</i><br>
     * __glewNormalStream3dATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16180</i><br>
     * __glewNormalStream3dvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16181</i><br>
     * __glewNormalStream3fATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16182</i><br>
     * __glewNormalStream3fvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16183</i><br>
     * __glewNormalStream3iATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16184</i><br>
     * __glewNormalStream3ivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16185</i><br>
     * __glewNormalStream3sATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16186</i><br>
     * __glewNormalStream3svATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16187</i><br>
     * __glewVertexBlendEnvfATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16188</i><br>
     * __glewVertexBlendEnviATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16189</i><br>
     * __glewVertexStream1dATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16190</i><br>
     * __glewVertexStream1dvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16191</i><br>
     * __glewVertexStream1fATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16192</i><br>
     * __glewVertexStream1fvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16193</i><br>
     * __glewVertexStream1iATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16194</i><br>
     * __glewVertexStream1ivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16195</i><br>
     * __glewVertexStream1sATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16196</i><br>
     * __glewVertexStream1svATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16197</i><br>
     * __glewVertexStream2dATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16198</i><br>
     * __glewVertexStream2dvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16199</i><br>
     * __glewVertexStream2fATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16200</i><br>
     * __glewVertexStream2fvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16201</i><br>
     * __glewVertexStream2iATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16202</i><br>
     * __glewVertexStream2ivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16203</i><br>
     * __glewVertexStream2sATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16204</i><br>
     * __glewVertexStream2svATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16205</i><br>
     * __glewVertexStream3dATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16206</i><br>
     * __glewVertexStream3dvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16207</i><br>
     * __glewVertexStream3fATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16208</i><br>
     * __glewVertexStream3fvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16209</i><br>
     * __glewVertexStream3iATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16210</i><br>
     * __glewVertexStream3ivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16211</i><br>
     * __glewVertexStream3sATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16212</i><br>
     * __glewVertexStream3svATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16213</i><br>
     * __glewVertexStream4dATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16214</i><br>
     * __glewVertexStream4dvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16215</i><br>
     * __glewVertexStream4fATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16216</i><br>
     * __glewVertexStream4fvATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16217</i><br>
     * __glewVertexStream4iATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16218</i><br>
     * __glewVertexStream4ivATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16219</i><br>
     * __glewVertexStream4sATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16220</i><br>
     * __glewVertexStream4svATI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16222</i><br>
     * __glewGetUniformBufferSizeEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16223</i><br>
     * __glewGetUniformOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16224</i><br>
     * __glewUniformBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16226</i><br>
     * __glewBlendColorEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16228</i><br>
     * __glewBlendEquationSeparateEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16230</i><br>
     * __glewBlendFuncSeparateEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16232</i><br>
     * __glewBlendEquationEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16234</i><br>
     * __glewColorSubTableEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16235</i><br>
     * __glewCopyColorSubTableEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16237</i><br>
     * __glewLockArraysEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16238</i><br>
     * __glewUnlockArraysEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16240</i><br>
     * __glewConvolutionFilter1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16241</i><br>
     * __glewConvolutionFilter2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16242</i><br>
     * __glewConvolutionParameterfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16243</i><br>
     * __glewConvolutionParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16244</i><br>
     * __glewConvolutionParameteriEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16245</i><br>
     * __glewConvolutionParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16246</i><br>
     * __glewCopyConvolutionFilter1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16247</i><br>
     * __glewCopyConvolutionFilter2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16248</i><br>
     * __glewGetConvolutionFilterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16249</i><br>
     * __glewGetConvolutionParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16250</i><br>
     * __glewGetConvolutionParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16251</i><br>
     * __glewGetSeparableFilterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16252</i><br>
     * __glewSeparableFilter2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16254</i><br>
     * __glewBinormalPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16255</i><br>
     * __glewTangentPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16257</i><br>
     * __glewCopyTexImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16258</i><br>
     * __glewCopyTexImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16259</i><br>
     * __glewCopyTexSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16260</i><br>
     * __glewCopyTexSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16261</i><br>
     * __glewCopyTexSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16263</i><br>
     * __glewCullParameterdvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16264</i><br>
     * __glewCullParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16266</i><br>
     * __glewInsertEventMarkerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16267</i><br>
     * __glewPopGroupMarkerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16268</i><br>
     * __glewPushGroupMarkerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16270</i><br>
     * __glewDepthBoundsEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16272</i><br>
     * __glewBindMultiTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16273</i><br>
     * __glewCheckNamedFramebufferStatusEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16274</i><br>
     * __glewClientAttribDefaultEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16275</i><br>
     * __glewCompressedMultiTexImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16276</i><br>
     * __glewCompressedMultiTexImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16277</i><br>
     * __glewCompressedMultiTexImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16278</i><br>
     * __glewCompressedMultiTexSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16279</i><br>
     * __glewCompressedMultiTexSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16280</i><br>
     * __glewCompressedMultiTexSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16281</i><br>
     * __glewCompressedTextureImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16282</i><br>
     * __glewCompressedTextureImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16283</i><br>
     * __glewCompressedTextureImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16284</i><br>
     * __glewCompressedTextureSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16285</i><br>
     * __glewCompressedTextureSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16286</i><br>
     * __glewCompressedTextureSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16287</i><br>
     * __glewCopyMultiTexImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16288</i><br>
     * __glewCopyMultiTexImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16289</i><br>
     * __glewCopyMultiTexSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16290</i><br>
     * __glewCopyMultiTexSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16291</i><br>
     * __glewCopyMultiTexSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16292</i><br>
     * __glewCopyTextureImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16293</i><br>
     * __glewCopyTextureImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16294</i><br>
     * __glewCopyTextureSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16295</i><br>
     * __glewCopyTextureSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16296</i><br>
     * __glewCopyTextureSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16297</i><br>
     * __glewDisableClientStateIndexedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16298</i><br>
     * __glewDisableClientStateiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16299</i><br>
     * __glewDisableVertexArrayAttribEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16300</i><br>
     * __glewDisableVertexArrayEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16301</i><br>
     * __glewEnableClientStateIndexedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16302</i><br>
     * __glewEnableClientStateiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16303</i><br>
     * __glewEnableVertexArrayAttribEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16304</i><br>
     * __glewEnableVertexArrayEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16305</i><br>
     * __glewFlushMappedNamedBufferRangeEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16306</i><br>
     * __glewFramebufferDrawBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16307</i><br>
     * __glewFramebufferDrawBuffersEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16308</i><br>
     * __glewFramebufferReadBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16309</i><br>
     * __glewGenerateMultiTexMipmapEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16310</i><br>
     * __glewGenerateTextureMipmapEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16311</i><br>
     * __glewGetCompressedMultiTexImageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16312</i><br>
     * __glewGetCompressedTextureImageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16313</i><br>
     * __glewGetDoubleIndexedvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16314</i><br>
     * __glewGetDoublei_vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16315</i><br>
     * __glewGetFloatIndexedvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16316</i><br>
     * __glewGetFloati_vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16317</i><br>
     * __glewGetFramebufferParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16318</i><br>
     * __glewGetMultiTexEnvfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16319</i><br>
     * __glewGetMultiTexEnvivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16320</i><br>
     * __glewGetMultiTexGendvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16321</i><br>
     * __glewGetMultiTexGenfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16322</i><br>
     * __glewGetMultiTexGenivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16323</i><br>
     * __glewGetMultiTexImageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16324</i><br>
     * __glewGetMultiTexLevelParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16325</i><br>
     * __glewGetMultiTexLevelParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16326</i><br>
     * __glewGetMultiTexParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16327</i><br>
     * __glewGetMultiTexParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16328</i><br>
     * __glewGetMultiTexParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16329</i><br>
     * __glewGetMultiTexParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16330</i><br>
     * __glewGetNamedBufferParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16331</i><br>
     * __glewGetNamedBufferPointervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16332</i><br>
     * __glewGetNamedBufferSubDataEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16333</i><br>
     * __glewGetNamedFramebufferAttachmentParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16334</i><br>
     * __glewGetNamedProgramLocalParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16335</i><br>
     * __glewGetNamedProgramLocalParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16336</i><br>
     * __glewGetNamedProgramLocalParameterdvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16337</i><br>
     * __glewGetNamedProgramLocalParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16338</i><br>
     * __glewGetNamedProgramStringEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16339</i><br>
     * __glewGetNamedProgramivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16340</i><br>
     * __glewGetNamedRenderbufferParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16341</i><br>
     * __glewGetPointerIndexedvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16342</i><br>
     * __glewGetPointeri_vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16343</i><br>
     * __glewGetTextureImageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16344</i><br>
     * __glewGetTextureLevelParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16345</i><br>
     * __glewGetTextureLevelParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16346</i><br>
     * __glewGetTextureParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16347</i><br>
     * __glewGetTextureParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16348</i><br>
     * __glewGetTextureParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16349</i><br>
     * __glewGetTextureParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16350</i><br>
     * __glewGetVertexArrayIntegeri_vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16351</i><br>
     * __glewGetVertexArrayIntegervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16352</i><br>
     * __glewGetVertexArrayPointeri_vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16353</i><br>
     * __glewGetVertexArrayPointervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16354</i><br>
     * __glewMapNamedBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16355</i><br>
     * __glewMapNamedBufferRangeEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16356</i><br>
     * __glewMatrixFrustumEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16357</i><br>
     * __glewMatrixLoadIdentityEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16358</i><br>
     * __glewMatrixLoadTransposedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16359</i><br>
     * __glewMatrixLoadTransposefEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16360</i><br>
     * __glewMatrixLoaddEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16361</i><br>
     * __glewMatrixLoadfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16362</i><br>
     * __glewMatrixMultTransposedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16363</i><br>
     * __glewMatrixMultTransposefEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16364</i><br>
     * __glewMatrixMultdEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16365</i><br>
     * __glewMatrixMultfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16366</i><br>
     * __glewMatrixOrthoEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16367</i><br>
     * __glewMatrixPopEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16368</i><br>
     * __glewMatrixPushEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16369</i><br>
     * __glewMatrixRotatedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16370</i><br>
     * __glewMatrixRotatefEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16371</i><br>
     * __glewMatrixScaledEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16372</i><br>
     * __glewMatrixScalefEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16373</i><br>
     * __glewMatrixTranslatedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16374</i><br>
     * __glewMatrixTranslatefEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16375</i><br>
     * __glewMultiTexBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16376</i><br>
     * __glewMultiTexCoordPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16377</i><br>
     * __glewMultiTexEnvfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16378</i><br>
     * __glewMultiTexEnvfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16379</i><br>
     * __glewMultiTexEnviEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16380</i><br>
     * __glewMultiTexEnvivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16381</i><br>
     * __glewMultiTexGendEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16382</i><br>
     * __glewMultiTexGendvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16383</i><br>
     * __glewMultiTexGenfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16384</i><br>
     * __glewMultiTexGenfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16385</i><br>
     * __glewMultiTexGeniEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16386</i><br>
     * __glewMultiTexGenivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16387</i><br>
     * __glewMultiTexImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16388</i><br>
     * __glewMultiTexImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16389</i><br>
     * __glewMultiTexImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16390</i><br>
     * __glewMultiTexParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16391</i><br>
     * __glewMultiTexParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16392</i><br>
     * __glewMultiTexParameterfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16393</i><br>
     * __glewMultiTexParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16394</i><br>
     * __glewMultiTexParameteriEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16395</i><br>
     * __glewMultiTexParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16396</i><br>
     * __glewMultiTexRenderbufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16397</i><br>
     * __glewMultiTexSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16398</i><br>
     * __glewMultiTexSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16399</i><br>
     * __glewMultiTexSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16400</i><br>
     * __glewNamedBufferDataEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16401</i><br>
     * __glewNamedBufferSubDataEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16402</i><br>
     * __glewNamedCopyBufferSubDataEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16403</i><br>
     * __glewNamedFramebufferRenderbufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16404</i><br>
     * __glewNamedFramebufferTexture1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16405</i><br>
     * __glewNamedFramebufferTexture2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16406</i><br>
     * __glewNamedFramebufferTexture3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16407</i><br>
     * __glewNamedFramebufferTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16408</i><br>
     * __glewNamedFramebufferTextureFaceEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16409</i><br>
     * __glewNamedFramebufferTextureLayerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16410</i><br>
     * __glewNamedProgramLocalParameter4dEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16411</i><br>
     * __glewNamedProgramLocalParameter4dvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16412</i><br>
     * __glewNamedProgramLocalParameter4fEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16413</i><br>
     * __glewNamedProgramLocalParameter4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16414</i><br>
     * __glewNamedProgramLocalParameterI4iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16415</i><br>
     * __glewNamedProgramLocalParameterI4ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16416</i><br>
     * __glewNamedProgramLocalParameterI4uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16417</i><br>
     * __glewNamedProgramLocalParameterI4uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16418</i><br>
     * __glewNamedProgramLocalParameters4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16419</i><br>
     * __glewNamedProgramLocalParametersI4ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16420</i><br>
     * __glewNamedProgramLocalParametersI4uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16421</i><br>
     * __glewNamedProgramStringEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16422</i><br>
     * __glewNamedRenderbufferStorageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16423</i><br>
     * __glewNamedRenderbufferStorageMultisampleCoverageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16424</i><br>
     * __glewNamedRenderbufferStorageMultisampleEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16425</i><br>
     * __glewProgramUniform1fEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16426</i><br>
     * __glewProgramUniform1fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16427</i><br>
     * __glewProgramUniform1iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16428</i><br>
     * __glewProgramUniform1ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16429</i><br>
     * __glewProgramUniform1uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16430</i><br>
     * __glewProgramUniform1uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16431</i><br>
     * __glewProgramUniform2fEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16432</i><br>
     * __glewProgramUniform2fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16433</i><br>
     * __glewProgramUniform2iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16434</i><br>
     * __glewProgramUniform2ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16435</i><br>
     * __glewProgramUniform2uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16436</i><br>
     * __glewProgramUniform2uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16437</i><br>
     * __glewProgramUniform3fEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16438</i><br>
     * __glewProgramUniform3fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16439</i><br>
     * __glewProgramUniform3iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16440</i><br>
     * __glewProgramUniform3ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16441</i><br>
     * __glewProgramUniform3uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16442</i><br>
     * __glewProgramUniform3uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16443</i><br>
     * __glewProgramUniform4fEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16444</i><br>
     * __glewProgramUniform4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16445</i><br>
     * __glewProgramUniform4iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16446</i><br>
     * __glewProgramUniform4ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16447</i><br>
     * __glewProgramUniform4uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16448</i><br>
     * __glewProgramUniform4uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16449</i><br>
     * __glewProgramUniformMatrix2fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16450</i><br>
     * __glewProgramUniformMatrix2x3fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16451</i><br>
     * __glewProgramUniformMatrix2x4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16452</i><br>
     * __glewProgramUniformMatrix3fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16453</i><br>
     * __glewProgramUniformMatrix3x2fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16454</i><br>
     * __glewProgramUniformMatrix3x4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16455</i><br>
     * __glewProgramUniformMatrix4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16456</i><br>
     * __glewProgramUniformMatrix4x2fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16457</i><br>
     * __glewProgramUniformMatrix4x3fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16458</i><br>
     * __glewPushClientAttribDefaultEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16459</i><br>
     * __glewTextureBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16460</i><br>
     * __glewTextureImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16461</i><br>
     * __glewTextureImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16462</i><br>
     * __glewTextureImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16463</i><br>
     * __glewTextureParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16464</i><br>
     * __glewTextureParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16465</i><br>
     * __glewTextureParameterfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16466</i><br>
     * __glewTextureParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16467</i><br>
     * __glewTextureParameteriEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16468</i><br>
     * __glewTextureParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16469</i><br>
     * __glewTextureRenderbufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16470</i><br>
     * __glewTextureSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16471</i><br>
     * __glewTextureSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16472</i><br>
     * __glewTextureSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16473</i><br>
     * __glewUnmapNamedBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16474</i><br>
     * __glewVertexArrayColorOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16475</i><br>
     * __glewVertexArrayEdgeFlagOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16476</i><br>
     * __glewVertexArrayFogCoordOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16477</i><br>
     * __glewVertexArrayIndexOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16478</i><br>
     * __glewVertexArrayMultiTexCoordOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16479</i><br>
     * __glewVertexArrayNormalOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16480</i><br>
     * __glewVertexArraySecondaryColorOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16481</i><br>
     * __glewVertexArrayTexCoordOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16482</i><br>
     * __glewVertexArrayVertexAttribIOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16483</i><br>
     * __glewVertexArrayVertexAttribOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16484</i><br>
     * __glewVertexArrayVertexOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16486</i><br>
     * __glewColorMaskIndexedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16487</i><br>
     * __glewDisableIndexedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16488</i><br>
     * __glewEnableIndexedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16489</i><br>
     * __glewGetBooleanIndexedvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16490</i><br>
     * __glewGetIntegerIndexedvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16491</i><br>
     * __glewIsEnabledIndexedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16493</i><br>
     * __glewDrawArraysInstancedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16494</i><br>
     * __glewDrawElementsInstancedEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16496</i><br>
     * __glewDrawRangeElementsEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16498</i><br>
     * __glewFogCoordPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16499</i><br>
     * __glewFogCoorddEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16500</i><br>
     * __glewFogCoorddvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16501</i><br>
     * __glewFogCoordfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16502</i><br>
     * __glewFogCoordfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16504</i><br>
     * __glewFragmentColorMaterialEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16505</i><br>
     * __glewFragmentLightModelfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16506</i><br>
     * __glewFragmentLightModelfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16507</i><br>
     * __glewFragmentLightModeliEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16508</i><br>
     * __glewFragmentLightModelivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16509</i><br>
     * __glewFragmentLightfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16510</i><br>
     * __glewFragmentLightfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16511</i><br>
     * __glewFragmentLightiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16512</i><br>
     * __glewFragmentLightivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16513</i><br>
     * __glewFragmentMaterialfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16514</i><br>
     * __glewFragmentMaterialfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16515</i><br>
     * __glewFragmentMaterialiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16516</i><br>
     * __glewFragmentMaterialivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16517</i><br>
     * __glewGetFragmentLightfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16518</i><br>
     * __glewGetFragmentLightivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16519</i><br>
     * __glewGetFragmentMaterialfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16520</i><br>
     * __glewGetFragmentMaterialivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16521</i><br>
     * __glewLightEnviEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16523</i><br>
     * __glewBlitFramebufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16525</i><br>
     * __glewRenderbufferStorageMultisampleEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16527</i><br>
     * __glewBindFramebufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16528</i><br>
     * __glewBindRenderbufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16529</i><br>
     * __glewCheckFramebufferStatusEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16530</i><br>
     * __glewDeleteFramebuffersEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16531</i><br>
     * __glewDeleteRenderbuffersEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16532</i><br>
     * __glewFramebufferRenderbufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16533</i><br>
     * __glewFramebufferTexture1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16534</i><br>
     * __glewFramebufferTexture2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16535</i><br>
     * __glewFramebufferTexture3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16536</i><br>
     * __glewGenFramebuffersEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16537</i><br>
     * __glewGenRenderbuffersEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16538</i><br>
     * __glewGenerateMipmapEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16539</i><br>
     * __glewGetFramebufferAttachmentParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16540</i><br>
     * __glewGetRenderbufferParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16541</i><br>
     * __glewIsFramebufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16542</i><br>
     * __glewIsRenderbufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16543</i><br>
     * __glewRenderbufferStorageEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16545</i><br>
     * __glewFramebufferTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16546</i><br>
     * __glewFramebufferTextureFaceEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16547</i><br>
     * __glewProgramParameteriEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16549</i><br>
     * __glewProgramEnvParameters4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16550</i><br>
     * __glewProgramLocalParameters4fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16552</i><br>
     * __glewBindFragDataLocationEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16553</i><br>
     * __glewGetFragDataLocationEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16554</i><br>
     * __glewGetUniformuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16555</i><br>
     * __glewGetVertexAttribIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16556</i><br>
     * __glewGetVertexAttribIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16557</i><br>
     * __glewUniform1uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16558</i><br>
     * __glewUniform1uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16559</i><br>
     * __glewUniform2uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16560</i><br>
     * __glewUniform2uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16561</i><br>
     * __glewUniform3uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16562</i><br>
     * __glewUniform3uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16563</i><br>
     * __glewUniform4uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16564</i><br>
     * __glewUniform4uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16565</i><br>
     * __glewVertexAttribI1iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16566</i><br>
     * __glewVertexAttribI1ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16567</i><br>
     * __glewVertexAttribI1uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16568</i><br>
     * __glewVertexAttribI1uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16569</i><br>
     * __glewVertexAttribI2iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16570</i><br>
     * __glewVertexAttribI2ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16571</i><br>
     * __glewVertexAttribI2uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16572</i><br>
     * __glewVertexAttribI2uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16573</i><br>
     * __glewVertexAttribI3iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16574</i><br>
     * __glewVertexAttribI3ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16575</i><br>
     * __glewVertexAttribI3uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16576</i><br>
     * __glewVertexAttribI3uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16577</i><br>
     * __glewVertexAttribI4bvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16578</i><br>
     * __glewVertexAttribI4iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16579</i><br>
     * __glewVertexAttribI4ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16580</i><br>
     * __glewVertexAttribI4svEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16581</i><br>
     * __glewVertexAttribI4ubvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16582</i><br>
     * __glewVertexAttribI4uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16583</i><br>
     * __glewVertexAttribI4uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16584</i><br>
     * __glewVertexAttribI4usvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16585</i><br>
     * __glewVertexAttribIPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16587</i><br>
     * __glewGetHistogramEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16588</i><br>
     * __glewGetHistogramParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16589</i><br>
     * __glewGetHistogramParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16590</i><br>
     * __glewGetMinmaxEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16591</i><br>
     * __glewGetMinmaxParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16592</i><br>
     * __glewGetMinmaxParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16593</i><br>
     * __glewHistogramEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16594</i><br>
     * __glewMinmaxEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16595</i><br>
     * __glewResetHistogramEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16596</i><br>
     * __glewResetMinmaxEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16598</i><br>
     * __glewIndexFuncEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16600</i><br>
     * __glewIndexMaterialEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16602</i><br>
     * __glewApplyTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16603</i><br>
     * __glewTextureLightEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16604</i><br>
     * __glewTextureMaterialEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16606</i><br>
     * __glewMultiDrawArraysEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16607</i><br>
     * __glewMultiDrawElementsEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16609</i><br>
     * __glewSampleMaskEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16610</i><br>
     * __glewSamplePatternEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16612</i><br>
     * __glewColorTableEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16613</i><br>
     * __glewGetColorTableEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16614</i><br>
     * __glewGetColorTableParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16615</i><br>
     * __glewGetColorTableParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16617</i><br>
     * __glewGetPixelTransformParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16618</i><br>
     * __glewGetPixelTransformParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16619</i><br>
     * __glewPixelTransformParameterfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16620</i><br>
     * __glewPixelTransformParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16621</i><br>
     * __glewPixelTransformParameteriEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16622</i><br>
     * __glewPixelTransformParameterivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16624</i><br>
     * __glewPointParameterfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16625</i><br>
     * __glewPointParameterfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16627</i><br>
     * __glewPolygonOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16629</i><br>
     * __glewProvokingVertexEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16631</i><br>
     * __glewBeginSceneEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16632</i><br>
     * __glewEndSceneEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16634</i><br>
     * __glewSecondaryColor3bEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16635</i><br>
     * __glewSecondaryColor3bvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16636</i><br>
     * __glewSecondaryColor3dEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16637</i><br>
     * __glewSecondaryColor3dvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16638</i><br>
     * __glewSecondaryColor3fEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16639</i><br>
     * __glewSecondaryColor3fvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16640</i><br>
     * __glewSecondaryColor3iEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16641</i><br>
     * __glewSecondaryColor3ivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16642</i><br>
     * __glewSecondaryColor3sEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16643</i><br>
     * __glewSecondaryColor3svEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16644</i><br>
     * __glewSecondaryColor3ubEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16645</i><br>
     * __glewSecondaryColor3ubvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16646</i><br>
     * __glewSecondaryColor3uiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16647</i><br>
     * __glewSecondaryColor3uivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16648</i><br>
     * __glewSecondaryColor3usEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16649</i><br>
     * __glewSecondaryColor3usvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16650</i><br>
     * __glewSecondaryColorPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16652</i><br>
     * __glewActiveProgramEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16653</i><br>
     * __glewCreateShaderProgramEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16654</i><br>
     * __glewUseShaderProgramEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16656</i><br>
     * __glewBindImageTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16657</i><br>
     * __glewMemoryBarrierEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16659</i><br>
     * __glewActiveStencilFaceEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16661</i><br>
     * __glewTexSubImage1DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16662</i><br>
     * __glewTexSubImage2DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16663</i><br>
     * __glewTexSubImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16665</i><br>
     * __glewTexImage3DEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16667</i><br>
     * __glewFramebufferTextureLayerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16669</i><br>
     * __glewTexBufferEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16671</i><br>
     * __glewClearColorIiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16672</i><br>
     * __glewClearColorIuiEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16673</i><br>
     * __glewGetTexParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16674</i><br>
     * __glewGetTexParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16675</i><br>
     * __glewTexParameterIivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16676</i><br>
     * __glewTexParameterIuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16678</i><br>
     * __glewAreTexturesResidentEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16679</i><br>
     * __glewBindTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16680</i><br>
     * __glewDeleteTexturesEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16681</i><br>
     * __glewGenTexturesEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16682</i><br>
     * __glewIsTextureEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16683</i><br>
     * __glewPrioritizeTexturesEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16685</i><br>
     * __glewTextureNormalEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16687</i><br>
     * __glewGetQueryObjecti64vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16688</i><br>
     * __glewGetQueryObjectui64vEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16690</i><br>
     * __glewBeginTransformFeedbackEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16691</i><br>
     * __glewBindBufferBaseEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16692</i><br>
     * __glewBindBufferOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16693</i><br>
     * __glewBindBufferRangeEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16694</i><br>
     * __glewEndTransformFeedbackEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16695</i><br>
     * __glewGetTransformFeedbackVaryingEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16696</i><br>
     * __glewTransformFeedbackVaryingsEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16698</i><br>
     * __glewArrayElementEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16699</i><br>
     * __glewColorPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16700</i><br>
     * __glewDrawArraysEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16701</i><br>
     * __glewEdgeFlagPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16702</i><br>
     * __glewIndexPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16703</i><br>
     * __glewNormalPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16704</i><br>
     * __glewTexCoordPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16705</i><br>
     * __glewVertexPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16707</i><br>
     * __glewGetVertexAttribLdvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16708</i><br>
     * __glewVertexArrayVertexAttribLOffsetEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16709</i><br>
     * __glewVertexAttribL1dEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16710</i><br>
     * __glewVertexAttribL1dvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16711</i><br>
     * __glewVertexAttribL2dEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16712</i><br>
     * __glewVertexAttribL2dvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16713</i><br>
     * __glewVertexAttribL3dEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16714</i><br>
     * __glewVertexAttribL3dvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16715</i><br>
     * __glewVertexAttribL4dEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16716</i><br>
     * __glewVertexAttribL4dvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16717</i><br>
     * __glewVertexAttribLPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16719</i><br>
     * __glewBeginVertexShaderEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16720</i><br>
     * __glewBindLightParameterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16721</i><br>
     * __glewBindMaterialParameterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16722</i><br>
     * __glewBindParameterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16723</i><br>
     * __glewBindTexGenParameterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16724</i><br>
     * __glewBindTextureUnitParameterEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16725</i><br>
     * __glewBindVertexShaderEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16726</i><br>
     * __glewDeleteVertexShaderEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16727</i><br>
     * __glewDisableVariantClientStateEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16728</i><br>
     * __glewEnableVariantClientStateEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16729</i><br>
     * __glewEndVertexShaderEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16730</i><br>
     * __glewExtractComponentEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16731</i><br>
     * __glewGenSymbolsEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16732</i><br>
     * __glewGenVertexShadersEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16733</i><br>
     * __glewGetInvariantBooleanvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16734</i><br>
     * __glewGetInvariantFloatvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16735</i><br>
     * __glewGetInvariantIntegervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16736</i><br>
     * __glewGetLocalConstantBooleanvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16737</i><br>
     * __glewGetLocalConstantFloatvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16738</i><br>
     * __glewGetLocalConstantIntegervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16739</i><br>
     * __glewGetVariantBooleanvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16740</i><br>
     * __glewGetVariantFloatvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16741</i><br>
     * __glewGetVariantIntegervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16742</i><br>
     * __glewGetVariantPointervEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16743</i><br>
     * __glewInsertComponentEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16744</i><br>
     * __glewIsVariantEnabledEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16745</i><br>
     * __glewSetInvariantEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16746</i><br>
     * __glewSetLocalConstantEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16747</i><br>
     * __glewShaderOp1EXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16748</i><br>
     * __glewShaderOp2EXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16749</i><br>
     * __glewShaderOp3EXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16750</i><br>
     * __glewSwizzleEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16751</i><br>
     * __glewVariantPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16752</i><br>
     * __glewVariantbvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16753</i><br>
     * __glewVariantdvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16754</i><br>
     * __glewVariantfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16755</i><br>
     * __glewVariantivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16756</i><br>
     * __glewVariantsvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16757</i><br>
     * __glewVariantubvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16758</i><br>
     * __glewVariantuivEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16759</i><br>
     * __glewVariantusvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16760</i><br>
     * __glewWriteMaskEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16762</i><br>
     * __glewVertexWeightPointerEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16763</i><br>
     * __glewVertexWeightfEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16764</i><br>
     * __glewVertexWeightfvEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16766</i><br>
     * __glewImportSyncEXT
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16768</i><br>
     * __glewFrameTerminatorGREMEDY
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16770</i><br>
     * __glewStringMarkerGREMEDY
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16772</i><br>
     * __glewGetImageTransformParameterfvHP
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16773</i><br>
     * __glewGetImageTransformParameterivHP
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16774</i><br>
     * __glewImageTransformParameterfHP
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16775</i><br>
     * __glewImageTransformParameterfvHP
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16776</i><br>
     * __glewImageTransformParameteriHP
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16777</i><br>
     * __glewImageTransformParameterivHP
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16779</i><br>
     * __glewMultiModeDrawArraysIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16780</i><br>
     * __glewMultiModeDrawElementsIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16782</i><br>
     * __glewColorPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16783</i><br>
     * __glewEdgeFlagPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16784</i><br>
     * __glewFogCoordPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16785</i><br>
     * __glewIndexPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16786</i><br>
     * __glewNormalPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16787</i><br>
     * __glewSecondaryColorPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16788</i><br>
     * __glewTexCoordPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16789</i><br>
     * __glewVertexPointerListIBM
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16791</i><br>
     * __glewMapTexture2DINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16792</i><br>
     * __glewSyncTextureINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16793</i><br>
     * __glewUnmapTexture2DINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16795</i><br>
     * __glewColorPointervINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16796</i><br>
     * __glewNormalPointervINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16797</i><br>
     * __glewTexCoordPointervINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16798</i><br>
     * __glewVertexPointervINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16800</i><br>
     * __glewTexScissorFuncINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16801</i><br>
     * __glewTexScissorINTEL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16803</i><br>
     * __glewDebugMessageCallback
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16804</i><br>
     * __glewDebugMessageControl
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16805</i><br>
     * __glewDebugMessageInsert
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16806</i><br>
     * __glewGetDebugMessageLog
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16807</i><br>
     * __glewGetObjectLabel
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16808</i><br>
     * __glewGetObjectPtrLabel
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16809</i><br>
     * __glewObjectLabel
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16810</i><br>
     * __glewObjectPtrLabel
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16811</i><br>
     * __glewPopDebugGroup
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16812</i><br>
     * __glewPushDebugGroup
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16814</i><br>
     * __glewBufferRegionEnabled
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16815</i><br>
     * __glewDeleteBufferRegion
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16816</i><br>
     * __glewDrawBufferRegion
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16817</i><br>
     * __glewNewBufferRegion
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16818</i><br>
     * __glewReadBufferRegion
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16820</i><br>
     * __glewResizeBuffersMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16822</i><br>
     * __glewWindowPos2dMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16823</i><br>
     * __glewWindowPos2dvMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16824</i><br>
     * __glewWindowPos2fMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16825</i><br>
     * __glewWindowPos2fvMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16826</i><br>
     * __glewWindowPos2iMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16827</i><br>
     * __glewWindowPos2ivMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16828</i><br>
     * __glewWindowPos2sMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16829</i><br>
     * __glewWindowPos2svMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16830</i><br>
     * __glewWindowPos3dMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16831</i><br>
     * __glewWindowPos3dvMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16832</i><br>
     * __glewWindowPos3fMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16833</i><br>
     * __glewWindowPos3fvMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16834</i><br>
     * __glewWindowPos3iMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16835</i><br>
     * __glewWindowPos3ivMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16836</i><br>
     * __glewWindowPos3sMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16837</i><br>
     * __glewWindowPos3svMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16838</i><br>
     * __glewWindowPos4dMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16839</i><br>
     * __glewWindowPos4dvMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16840</i><br>
     * __glewWindowPos4fMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16841</i><br>
     * __glewWindowPos4fvMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16842</i><br>
     * __glewWindowPos4iMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16843</i><br>
     * __glewWindowPos4ivMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16844</i><br>
     * __glewWindowPos4sMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16845</i><br>
     * __glewWindowPos4svMESA
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16847</i><br>
     * __glewBeginConditionalRenderNVX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16848</i><br>
     * __glewEndConditionalRenderNVX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16850</i><br>
     * __glewMultiDrawArraysIndirectBindlessNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16851</i><br>
     * __glewMultiDrawElementsIndirectBindlessNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16853</i><br>
     * __glewGetImageHandleNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16854</i><br>
     * __glewGetTextureHandleNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16855</i><br>
     * __glewGetTextureSamplerHandleNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16856</i><br>
     * __glewIsImageHandleResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16857</i><br>
     * __glewIsTextureHandleResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16858</i><br>
     * __glewMakeImageHandleNonResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16859</i><br>
     * __glewMakeImageHandleResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16860</i><br>
     * __glewMakeTextureHandleNonResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16861</i><br>
     * __glewMakeTextureHandleResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16862</i><br>
     * __glewProgramUniformHandleui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16863</i><br>
     * __glewProgramUniformHandleui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16864</i><br>
     * __glewUniformHandleui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16865</i><br>
     * __glewUniformHandleui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16867</i><br>
     * __glewBlendBarrierNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16868</i><br>
     * __glewBlendParameteriNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16870</i><br>
     * __glewBeginConditionalRenderNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16871</i><br>
     * __glewEndConditionalRenderNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16873</i><br>
     * __glewCopyImageSubDataNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16875</i><br>
     * __glewClearDepthdNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16876</i><br>
     * __glewDepthBoundsdNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16877</i><br>
     * __glewDepthRangedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16879</i><br>
     * __glewDrawTextureNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16881</i><br>
     * __glewEvalMapsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16882</i><br>
     * __glewGetMapAttribParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16883</i><br>
     * __glewGetMapAttribParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16884</i><br>
     * __glewGetMapControlPointsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16885</i><br>
     * __glewGetMapParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16886</i><br>
     * __glewGetMapParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16887</i><br>
     * __glewMapControlPointsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16888</i><br>
     * __glewMapParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16889</i><br>
     * __glewMapParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16891</i><br>
     * __glewGetMultisamplefvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16892</i><br>
     * __glewSampleMaskIndexedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16893</i><br>
     * __glewTexRenderbufferNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16895</i><br>
     * __glewDeleteFencesNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16896</i><br>
     * __glewFinishFenceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16897</i><br>
     * __glewGenFencesNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16898</i><br>
     * __glewGetFenceivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16899</i><br>
     * __glewIsFenceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16900</i><br>
     * __glewSetFenceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16901</i><br>
     * __glewTestFenceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16903</i><br>
     * __glewGetProgramNamedParameterdvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16904</i><br>
     * __glewGetProgramNamedParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16905</i><br>
     * __glewProgramNamedParameter4dNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16906</i><br>
     * __glewProgramNamedParameter4dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16907</i><br>
     * __glewProgramNamedParameter4fNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16908</i><br>
     * __glewProgramNamedParameter4fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16910</i><br>
     * __glewRenderbufferStorageMultisampleCoverageNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16912</i><br>
     * __glewProgramVertexLimitNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16914</i><br>
     * __glewProgramEnvParameterI4iNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16915</i><br>
     * __glewProgramEnvParameterI4ivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16916</i><br>
     * __glewProgramEnvParameterI4uiNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16917</i><br>
     * __glewProgramEnvParameterI4uivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16918</i><br>
     * __glewProgramEnvParametersI4ivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16919</i><br>
     * __glewProgramEnvParametersI4uivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16920</i><br>
     * __glewProgramLocalParameterI4iNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16921</i><br>
     * __glewProgramLocalParameterI4ivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16922</i><br>
     * __glewProgramLocalParameterI4uiNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16923</i><br>
     * __glewProgramLocalParameterI4uivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16924</i><br>
     * __glewProgramLocalParametersI4ivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16925</i><br>
     * __glewProgramLocalParametersI4uivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16927</i><br>
     * __glewGetUniformi64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16928</i><br>
     * __glewGetUniformui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16929</i><br>
     * __glewProgramUniform1i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16930</i><br>
     * __glewProgramUniform1i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16931</i><br>
     * __glewProgramUniform1ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16932</i><br>
     * __glewProgramUniform1ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16933</i><br>
     * __glewProgramUniform2i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16934</i><br>
     * __glewProgramUniform2i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16935</i><br>
     * __glewProgramUniform2ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16936</i><br>
     * __glewProgramUniform2ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16937</i><br>
     * __glewProgramUniform3i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16938</i><br>
     * __glewProgramUniform3i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16939</i><br>
     * __glewProgramUniform3ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16940</i><br>
     * __glewProgramUniform3ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16941</i><br>
     * __glewProgramUniform4i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16942</i><br>
     * __glewProgramUniform4i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16943</i><br>
     * __glewProgramUniform4ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16944</i><br>
     * __glewProgramUniform4ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16945</i><br>
     * __glewUniform1i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16946</i><br>
     * __glewUniform1i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16947</i><br>
     * __glewUniform1ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16948</i><br>
     * __glewUniform1ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16949</i><br>
     * __glewUniform2i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16950</i><br>
     * __glewUniform2i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16951</i><br>
     * __glewUniform2ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16952</i><br>
     * __glewUniform2ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16953</i><br>
     * __glewUniform3i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16954</i><br>
     * __glewUniform3i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16955</i><br>
     * __glewUniform3ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16956</i><br>
     * __glewUniform3ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16957</i><br>
     * __glewUniform4i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16958</i><br>
     * __glewUniform4i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16959</i><br>
     * __glewUniform4ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16960</i><br>
     * __glewUniform4ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16962</i><br>
     * __glewColor3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16963</i><br>
     * __glewColor3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16964</i><br>
     * __glewColor4hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16965</i><br>
     * __glewColor4hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16966</i><br>
     * __glewFogCoordhNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16967</i><br>
     * __glewFogCoordhvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16968</i><br>
     * __glewMultiTexCoord1hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16969</i><br>
     * __glewMultiTexCoord1hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16970</i><br>
     * __glewMultiTexCoord2hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16971</i><br>
     * __glewMultiTexCoord2hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16972</i><br>
     * __glewMultiTexCoord3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16973</i><br>
     * __glewMultiTexCoord3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16974</i><br>
     * __glewMultiTexCoord4hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16975</i><br>
     * __glewMultiTexCoord4hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16976</i><br>
     * __glewNormal3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16977</i><br>
     * __glewNormal3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16978</i><br>
     * __glewSecondaryColor3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16979</i><br>
     * __glewSecondaryColor3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16980</i><br>
     * __glewTexCoord1hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16981</i><br>
     * __glewTexCoord1hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16982</i><br>
     * __glewTexCoord2hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16983</i><br>
     * __glewTexCoord2hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16984</i><br>
     * __glewTexCoord3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16985</i><br>
     * __glewTexCoord3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16986</i><br>
     * __glewTexCoord4hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16987</i><br>
     * __glewTexCoord4hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16988</i><br>
     * __glewVertex2hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16989</i><br>
     * __glewVertex2hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16990</i><br>
     * __glewVertex3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16991</i><br>
     * __glewVertex3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16992</i><br>
     * __glewVertex4hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16993</i><br>
     * __glewVertex4hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16994</i><br>
     * __glewVertexAttrib1hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16995</i><br>
     * __glewVertexAttrib1hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16996</i><br>
     * __glewVertexAttrib2hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16997</i><br>
     * __glewVertexAttrib2hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16998</i><br>
     * __glewVertexAttrib3hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 16999</i><br>
     * __glewVertexAttrib3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17000</i><br>
     * __glewVertexAttrib4hNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17001</i><br>
     * __glewVertexAttrib4hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17002</i><br>
     * __glewVertexAttribs1hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17003</i><br>
     * __glewVertexAttribs2hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17004</i><br>
     * __glewVertexAttribs3hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17005</i><br>
     * __glewVertexAttribs4hvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17006</i><br>
     * __glewVertexWeighthNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17007</i><br>
     * __glewVertexWeighthvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17009</i><br>
     * __glewBeginOcclusionQueryNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17010</i><br>
     * __glewDeleteOcclusionQueriesNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17011</i><br>
     * __glewEndOcclusionQueryNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17012</i><br>
     * __glewGenOcclusionQueriesNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17013</i><br>
     * __glewGetOcclusionQueryivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17014</i><br>
     * __glewGetOcclusionQueryuivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17015</i><br>
     * __glewIsOcclusionQueryNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17017</i><br>
     * __glewProgramBufferParametersIivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17018</i><br>
     * __glewProgramBufferParametersIuivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17019</i><br>
     * __glewProgramBufferParametersfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17021</i><br>
     * __glewCopyPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17022</i><br>
     * __glewCoverFillPathInstancedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17023</i><br>
     * __glewCoverFillPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17024</i><br>
     * __glewCoverStrokePathInstancedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17025</i><br>
     * __glewCoverStrokePathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17026</i><br>
     * __glewDeletePathsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17027</i><br>
     * __glewGenPathsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17028</i><br>
     * __glewGetPathColorGenfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17029</i><br>
     * __glewGetPathColorGenivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17030</i><br>
     * __glewGetPathCommandsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17031</i><br>
     * __glewGetPathCoordsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17032</i><br>
     * __glewGetPathDashArrayNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17033</i><br>
     * __glewGetPathLengthNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17034</i><br>
     * __glewGetPathMetricRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17035</i><br>
     * __glewGetPathMetricsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17036</i><br>
     * __glewGetPathParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17037</i><br>
     * __glewGetPathParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17038</i><br>
     * __glewGetPathSpacingNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17039</i><br>
     * __glewGetPathTexGenfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17040</i><br>
     * __glewGetPathTexGenivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17041</i><br>
     * __glewInterpolatePathsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17042</i><br>
     * __glewIsPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17043</i><br>
     * __glewIsPointInFillPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17044</i><br>
     * __glewIsPointInStrokePathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17045</i><br>
     * __glewPathColorGenNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17046</i><br>
     * __glewPathCommandsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17047</i><br>
     * __glewPathCoordsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17048</i><br>
     * __glewPathCoverDepthFuncNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17049</i><br>
     * __glewPathDashArrayNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17050</i><br>
     * __glewPathFogGenNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17051</i><br>
     * __glewPathGlyphRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17052</i><br>
     * __glewPathGlyphsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17053</i><br>
     * __glewPathParameterfNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17054</i><br>
     * __glewPathParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17055</i><br>
     * __glewPathParameteriNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17056</i><br>
     * __glewPathParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17057</i><br>
     * __glewPathStencilDepthOffsetNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17058</i><br>
     * __glewPathStencilFuncNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17059</i><br>
     * __glewPathStringNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17060</i><br>
     * __glewPathSubCommandsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17061</i><br>
     * __glewPathSubCoordsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17062</i><br>
     * __glewPathTexGenNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17063</i><br>
     * __glewPointAlongPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17064</i><br>
     * __glewStencilFillPathInstancedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17065</i><br>
     * __glewStencilFillPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17066</i><br>
     * __glewStencilStrokePathInstancedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17067</i><br>
     * __glewStencilStrokePathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17068</i><br>
     * __glewTransformPathNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17069</i><br>
     * __glewWeightPathsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17071</i><br>
     * __glewFlushPixelDataRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17072</i><br>
     * __glewPixelDataRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17074</i><br>
     * __glewPointParameteriNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17075</i><br>
     * __glewPointParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17077</i><br>
     * __glewGetVideoi64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17078</i><br>
     * __glewGetVideoivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17079</i><br>
     * __glewGetVideoui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17080</i><br>
     * __glewGetVideouivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17081</i><br>
     * __glewPresentFrameDualFillNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17082</i><br>
     * __glewPresentFrameKeyedNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17084</i><br>
     * __glewPrimitiveRestartIndexNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17085</i><br>
     * __glewPrimitiveRestartNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17087</i><br>
     * __glewCombinerInputNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17088</i><br>
     * __glewCombinerOutputNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17089</i><br>
     * __glewCombinerParameterfNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17090</i><br>
     * __glewCombinerParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17091</i><br>
     * __glewCombinerParameteriNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17092</i><br>
     * __glewCombinerParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17093</i><br>
     * __glewFinalCombinerInputNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17094</i><br>
     * __glewGetCombinerInputParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17095</i><br>
     * __glewGetCombinerInputParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17096</i><br>
     * __glewGetCombinerOutputParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17097</i><br>
     * __glewGetCombinerOutputParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17098</i><br>
     * __glewGetFinalCombinerInputParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17099</i><br>
     * __glewGetFinalCombinerInputParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17101</i><br>
     * __glewCombinerStageParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17102</i><br>
     * __glewGetCombinerStageParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17104</i><br>
     * __glewGetBufferParameterui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17105</i><br>
     * __glewGetIntegerui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17106</i><br>
     * __glewGetNamedBufferParameterui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17107</i><br>
     * __glewIsBufferResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17108</i><br>
     * __glewIsNamedBufferResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17109</i><br>
     * __glewMakeBufferNonResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17110</i><br>
     * __glewMakeBufferResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17111</i><br>
     * __glewMakeNamedBufferNonResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17112</i><br>
     * __glewMakeNamedBufferResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17113</i><br>
     * __glewProgramUniformui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17114</i><br>
     * __glewProgramUniformui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17115</i><br>
     * __glewUniformui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17116</i><br>
     * __glewUniformui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17118</i><br>
     * __glewTextureBarrierNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17120</i><br>
     * __glewTexImage2DMultisampleCoverageNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17121</i><br>
     * __glewTexImage3DMultisampleCoverageNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17122</i><br>
     * __glewTextureImage2DMultisampleCoverageNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17123</i><br>
     * __glewTextureImage2DMultisampleNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17124</i><br>
     * __glewTextureImage3DMultisampleCoverageNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17125</i><br>
     * __glewTextureImage3DMultisampleNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17127</i><br>
     * __glewActiveVaryingNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17128</i><br>
     * __glewBeginTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17129</i><br>
     * __glewBindBufferBaseNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17130</i><br>
     * __glewBindBufferOffsetNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17131</i><br>
     * __glewBindBufferRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17132</i><br>
     * __glewEndTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17133</i><br>
     * __glewGetActiveVaryingNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17134</i><br>
     * __glewGetTransformFeedbackVaryingNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17135</i><br>
     * __glewGetVaryingLocationNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17136</i><br>
     * __glewTransformFeedbackAttribsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17137</i><br>
     * __glewTransformFeedbackVaryingsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17139</i><br>
     * __glewBindTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17140</i><br>
     * __glewDeleteTransformFeedbacksNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17141</i><br>
     * __glewDrawTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17142</i><br>
     * __glewGenTransformFeedbacksNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17143</i><br>
     * __glewIsTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17144</i><br>
     * __glewPauseTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17145</i><br>
     * __glewResumeTransformFeedbackNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17147</i><br>
     * __glewVDPAUFiniNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17148</i><br>
     * __glewVDPAUGetSurfaceivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17149</i><br>
     * __glewVDPAUInitNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17150</i><br>
     * __glewVDPAUIsSurfaceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17151</i><br>
     * __glewVDPAUMapSurfacesNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17152</i><br>
     * __glewVDPAURegisterOutputSurfaceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17153</i><br>
     * __glewVDPAURegisterVideoSurfaceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17154</i><br>
     * __glewVDPAUSurfaceAccessNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17155</i><br>
     * __glewVDPAUUnmapSurfacesNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17156</i><br>
     * __glewVDPAUUnregisterSurfaceNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17158</i><br>
     * __glewFlushVertexArrayRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17159</i><br>
     * __glewVertexArrayRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17161</i><br>
     * __glewGetVertexAttribLi64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17162</i><br>
     * __glewGetVertexAttribLui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17163</i><br>
     * __glewVertexAttribL1i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17164</i><br>
     * __glewVertexAttribL1i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17165</i><br>
     * __glewVertexAttribL1ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17166</i><br>
     * __glewVertexAttribL1ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17167</i><br>
     * __glewVertexAttribL2i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17168</i><br>
     * __glewVertexAttribL2i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17169</i><br>
     * __glewVertexAttribL2ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17170</i><br>
     * __glewVertexAttribL2ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17171</i><br>
     * __glewVertexAttribL3i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17172</i><br>
     * __glewVertexAttribL3i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17173</i><br>
     * __glewVertexAttribL3ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17174</i><br>
     * __glewVertexAttribL3ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17175</i><br>
     * __glewVertexAttribL4i64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17176</i><br>
     * __glewVertexAttribL4i64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17177</i><br>
     * __glewVertexAttribL4ui64NV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17178</i><br>
     * __glewVertexAttribL4ui64vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17179</i><br>
     * __glewVertexAttribLFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17181</i><br>
     * __glewBufferAddressRangeNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17182</i><br>
     * __glewColorFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17183</i><br>
     * __glewEdgeFlagFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17184</i><br>
     * __glewFogCoordFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17185</i><br>
     * __glewGetIntegerui64i_vNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17186</i><br>
     * __glewIndexFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17187</i><br>
     * __glewNormalFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17188</i><br>
     * __glewSecondaryColorFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17189</i><br>
     * __glewTexCoordFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17190</i><br>
     * __glewVertexAttribFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17191</i><br>
     * __glewVertexAttribIFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17192</i><br>
     * __glewVertexFormatNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17194</i><br>
     * __glewAreProgramsResidentNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17195</i><br>
     * __glewBindProgramNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17196</i><br>
     * __glewDeleteProgramsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17197</i><br>
     * __glewExecuteProgramNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17198</i><br>
     * __glewGenProgramsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17199</i><br>
     * __glewGetProgramParameterdvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17200</i><br>
     * __glewGetProgramParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17201</i><br>
     * __glewGetProgramStringNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17202</i><br>
     * __glewGetProgramivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17203</i><br>
     * __glewGetTrackMatrixivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17204</i><br>
     * __glewGetVertexAttribPointervNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17205</i><br>
     * __glewGetVertexAttribdvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17206</i><br>
     * __glewGetVertexAttribfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17207</i><br>
     * __glewGetVertexAttribivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17208</i><br>
     * __glewIsProgramNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17209</i><br>
     * __glewLoadProgramNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17210</i><br>
     * __glewProgramParameter4dNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17211</i><br>
     * __glewProgramParameter4dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17212</i><br>
     * __glewProgramParameter4fNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17213</i><br>
     * __glewProgramParameter4fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17214</i><br>
     * __glewProgramParameters4dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17215</i><br>
     * __glewProgramParameters4fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17216</i><br>
     * __glewRequestResidentProgramsNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17217</i><br>
     * __glewTrackMatrixNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17218</i><br>
     * __glewVertexAttrib1dNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17219</i><br>
     * __glewVertexAttrib1dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17220</i><br>
     * __glewVertexAttrib1fNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17221</i><br>
     * __glewVertexAttrib1fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17222</i><br>
     * __glewVertexAttrib1sNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17223</i><br>
     * __glewVertexAttrib1svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17224</i><br>
     * __glewVertexAttrib2dNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17225</i><br>
     * __glewVertexAttrib2dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17226</i><br>
     * __glewVertexAttrib2fNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17227</i><br>
     * __glewVertexAttrib2fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17228</i><br>
     * __glewVertexAttrib2sNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17229</i><br>
     * __glewVertexAttrib2svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17230</i><br>
     * __glewVertexAttrib3dNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17231</i><br>
     * __glewVertexAttrib3dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17232</i><br>
     * __glewVertexAttrib3fNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17233</i><br>
     * __glewVertexAttrib3fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17234</i><br>
     * __glewVertexAttrib3sNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17235</i><br>
     * __glewVertexAttrib3svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17236</i><br>
     * __glewVertexAttrib4dNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17237</i><br>
     * __glewVertexAttrib4dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17238</i><br>
     * __glewVertexAttrib4fNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17239</i><br>
     * __glewVertexAttrib4fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17240</i><br>
     * __glewVertexAttrib4sNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17241</i><br>
     * __glewVertexAttrib4svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17242</i><br>
     * __glewVertexAttrib4ubNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17243</i><br>
     * __glewVertexAttrib4ubvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17244</i><br>
     * __glewVertexAttribPointerNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17245</i><br>
     * __glewVertexAttribs1dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17246</i><br>
     * __glewVertexAttribs1fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17247</i><br>
     * __glewVertexAttribs1svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17248</i><br>
     * __glewVertexAttribs2dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17249</i><br>
     * __glewVertexAttribs2fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17250</i><br>
     * __glewVertexAttribs2svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17251</i><br>
     * __glewVertexAttribs3dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17252</i><br>
     * __glewVertexAttribs3fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17253</i><br>
     * __glewVertexAttribs3svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17254</i><br>
     * __glewVertexAttribs4dvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17255</i><br>
     * __glewVertexAttribs4fvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17256</i><br>
     * __glewVertexAttribs4svNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17257</i><br>
     * __glewVertexAttribs4ubvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17259</i><br>
     * __glewBeginVideoCaptureNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17260</i><br>
     * __glewBindVideoCaptureStreamBufferNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17261</i><br>
     * __glewBindVideoCaptureStreamTextureNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17262</i><br>
     * __glewEndVideoCaptureNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17263</i><br>
     * __glewGetVideoCaptureStreamdvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17264</i><br>
     * __glewGetVideoCaptureStreamfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17265</i><br>
     * __glewGetVideoCaptureStreamivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17266</i><br>
     * __glewGetVideoCaptureivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17267</i><br>
     * __glewVideoCaptureNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17268</i><br>
     * __glewVideoCaptureStreamParameterdvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17269</i><br>
     * __glewVideoCaptureStreamParameterfvNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17270</i><br>
     * __glewVideoCaptureStreamParameterivNV
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17272</i><br>
     * __glewClearDepthfOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17273</i><br>
     * __glewClipPlanefOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17274</i><br>
     * __glewDepthRangefOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17275</i><br>
     * __glewFrustumfOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17276</i><br>
     * __glewGetClipPlanefOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17277</i><br>
     * __glewOrthofOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17279</i><br>
     * __glewAlphaFuncx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17280</i><br>
     * __glewClearColorx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17281</i><br>
     * __glewClearDepthx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17282</i><br>
     * __glewColor4x
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17283</i><br>
     * __glewDepthRangex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17284</i><br>
     * __glewFogx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17285</i><br>
     * __glewFogxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17286</i><br>
     * __glewFrustumf
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17287</i><br>
     * __glewFrustumx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17288</i><br>
     * __glewLightModelx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17289</i><br>
     * __glewLightModelxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17290</i><br>
     * __glewLightx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17291</i><br>
     * __glewLightxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17292</i><br>
     * __glewLineWidthx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17293</i><br>
     * __glewLoadMatrixx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17294</i><br>
     * __glewMaterialx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17295</i><br>
     * __glewMaterialxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17296</i><br>
     * __glewMultMatrixx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17297</i><br>
     * __glewMultiTexCoord4x
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17298</i><br>
     * __glewNormal3x
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17299</i><br>
     * __glewOrthof
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17300</i><br>
     * __glewOrthox
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17301</i><br>
     * __glewPointSizex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17302</i><br>
     * __glewPolygonOffsetx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17303</i><br>
     * __glewRotatex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17304</i><br>
     * __glewSampleCoveragex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17305</i><br>
     * __glewScalex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17306</i><br>
     * __glewTexEnvx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17307</i><br>
     * __glewTexEnvxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17308</i><br>
     * __glewTexParameterx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17309</i><br>
     * __glewTranslatex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17311</i><br>
     * __glewClipPlanef
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17312</i><br>
     * __glewClipPlanex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17313</i><br>
     * __glewGetClipPlanef
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17314</i><br>
     * __glewGetClipPlanex
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17315</i><br>
     * __glewGetFixedv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17316</i><br>
     * __glewGetLightxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17317</i><br>
     * __glewGetMaterialxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17318</i><br>
     * __glewGetTexEnvxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17319</i><br>
     * __glewGetTexParameterxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17320</i><br>
     * __glewPointParameterx
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17321</i><br>
     * __glewPointParameterxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17322</i><br>
     * __glewPointSizePointerOES
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17323</i><br>
     * __glewTexParameterxv
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17325</i><br>
     * __glewErrorStringREGAL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17327</i><br>
     * __glewGetExtensionREGAL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17328</i><br>
     * __glewIsSupportedREGAL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17330</i><br>
     * __glewLogMessageCallbackREGAL
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17332</i><br>
     * __glewDetailTexFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17333</i><br>
     * __glewGetDetailTexFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17335</i><br>
     * __glewFogFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17336</i><br>
     * __glewGetFogFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17338</i><br>
     * __glewSampleMaskSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17339</i><br>
     * __glewSamplePatternSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17341</i><br>
     * __glewGetSharpenTexFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17342</i><br>
     * __glewSharpenTexFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17344</i><br>
     * __glewTexImage4DSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17345</i><br>
     * __glewTexSubImage4DSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17347</i><br>
     * __glewGetTexFilterFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17348</i><br>
     * __glewTexFilterFuncSGIS
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17350</i><br>
     * __glewAsyncMarkerSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17351</i><br>
     * __glewDeleteAsyncMarkersSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17352</i><br>
     * __glewFinishAsyncSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17353</i><br>
     * __glewGenAsyncMarkersSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17354</i><br>
     * __glewIsAsyncMarkerSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17355</i><br>
     * __glewPollAsyncSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17357</i><br>
     * __glewFlushRasterSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17359</i><br>
     * __glewTextureFogSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17361</i><br>
     * __glewFragmentColorMaterialSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17362</i><br>
     * __glewFragmentLightModelfSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17363</i><br>
     * __glewFragmentLightModelfvSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17364</i><br>
     * __glewFragmentLightModeliSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17365</i><br>
     * __glewFragmentLightModelivSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17366</i><br>
     * __glewFragmentLightfSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17367</i><br>
     * __glewFragmentLightfvSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17368</i><br>
     * __glewFragmentLightiSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17369</i><br>
     * __glewFragmentLightivSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17370</i><br>
     * __glewFragmentMaterialfSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17371</i><br>
     * __glewFragmentMaterialfvSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17372</i><br>
     * __glewFragmentMaterialiSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17373</i><br>
     * __glewFragmentMaterialivSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17374</i><br>
     * __glewGetFragmentLightfvSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17375</i><br>
     * __glewGetFragmentLightivSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17376</i><br>
     * __glewGetFragmentMaterialfvSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17377</i><br>
     * __glewGetFragmentMaterialivSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17379</i><br>
     * __glewFrameZoomSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17381</i><br>
     * __glewPixelTexGenSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17383</i><br>
     * __glewReferencePlaneSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17385</i><br>
     * __glewSpriteParameterfSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17386</i><br>
     * __glewSpriteParameterfvSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17387</i><br>
     * __glewSpriteParameteriSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17388</i><br>
     * __glewSpriteParameterivSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17390</i><br>
     * __glewTagSampleBufferSGIX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17392</i><br>
     * __glewColorTableParameterfvSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17393</i><br>
     * __glewColorTableParameterivSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17394</i><br>
     * __glewColorTableSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17395</i><br>
     * __glewCopyColorTableSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17396</i><br>
     * __glewGetColorTableParameterfvSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17397</i><br>
     * __glewGetColorTableParameterivSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17398</i><br>
     * __glewGetColorTableSGI
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17400</i><br>
     * __glewFinishTextureSUNX
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17402</i><br>
     * __glewGlobalAlphaFactorbSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17403</i><br>
     * __glewGlobalAlphaFactordSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17404</i><br>
     * __glewGlobalAlphaFactorfSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17405</i><br>
     * __glewGlobalAlphaFactoriSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17406</i><br>
     * __glewGlobalAlphaFactorsSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17407</i><br>
     * __glewGlobalAlphaFactorubSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17408</i><br>
     * __glewGlobalAlphaFactoruiSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17409</i><br>
     * __glewGlobalAlphaFactorusSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17411</i><br>
     * __glewReadVideoPixelsSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17413</i><br>
     * __glewReplacementCodePointerSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17414</i><br>
     * __glewReplacementCodeubSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17415</i><br>
     * __glewReplacementCodeubvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17416</i><br>
     * __glewReplacementCodeuiSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17417</i><br>
     * __glewReplacementCodeuivSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17418</i><br>
     * __glewReplacementCodeusSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17419</i><br>
     * __glewReplacementCodeusvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17421</i><br>
     * __glewColor3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17422</i><br>
     * __glewColor3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17423</i><br>
     * __glewColor4fNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17424</i><br>
     * __glewColor4fNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17425</i><br>
     * __glewColor4ubVertex2fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17426</i><br>
     * __glewColor4ubVertex2fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17427</i><br>
     * __glewColor4ubVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17428</i><br>
     * __glewColor4ubVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17429</i><br>
     * __glewNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17430</i><br>
     * __glewNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17431</i><br>
     * __glewReplacementCodeuiColor3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17432</i><br>
     * __glewReplacementCodeuiColor3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17433</i><br>
     * __glewReplacementCodeuiColor4fNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17434</i><br>
     * __glewReplacementCodeuiColor4fNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17435</i><br>
     * __glewReplacementCodeuiColor4ubVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17436</i><br>
     * __glewReplacementCodeuiColor4ubVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17437</i><br>
     * __glewReplacementCodeuiNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17438</i><br>
     * __glewReplacementCodeuiNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17439</i><br>
     * __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17440</i><br>
     * __glewReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17441</i><br>
     * __glewReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17442</i><br>
     * __glewReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17443</i><br>
     * __glewReplacementCodeuiTexCoord2fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17444</i><br>
     * __glewReplacementCodeuiTexCoord2fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17445</i><br>
     * __glewReplacementCodeuiVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17446</i><br>
     * __glewReplacementCodeuiVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17447</i><br>
     * __glewTexCoord2fColor3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17448</i><br>
     * __glewTexCoord2fColor3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17449</i><br>
     * __glewTexCoord2fColor4fNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17450</i><br>
     * __glewTexCoord2fColor4fNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17451</i><br>
     * __glewTexCoord2fColor4ubVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17452</i><br>
     * __glewTexCoord2fColor4ubVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17453</i><br>
     * __glewTexCoord2fNormal3fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17454</i><br>
     * __glewTexCoord2fNormal3fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17455</i><br>
     * __glewTexCoord2fVertex3fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17456</i><br>
     * __glewTexCoord2fVertex3fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17457</i><br>
     * __glewTexCoord4fColor4fNormal3fVertex4fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17458</i><br>
     * __glewTexCoord4fColor4fNormal3fVertex4fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17459</i><br>
     * __glewTexCoord4fVertex4fSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17460</i><br>
     * __glewTexCoord4fVertex4fvSUN
     */
    /**
     * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
     * SKIPPED:<br>
     * <i>native declaration : line 17462</i><br>
     * __glewAddSwapHintRectWIN
     */
    public static final GlobalByte __GLEW_VERSION_1_1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_1_1");
    public static final GlobalByte __GLEW_VERSION_1_2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_1_2");
    public static final GlobalByte __GLEW_VERSION_1_2_1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_1_2_1");
    public static final GlobalByte __GLEW_VERSION_1_3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_1_3");
    public static final GlobalByte __GLEW_VERSION_1_4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_1_4");
    public static final GlobalByte __GLEW_VERSION_1_5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_1_5");
    public static final GlobalByte __GLEW_VERSION_2_0 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_2_0");
    public static final GlobalByte __GLEW_VERSION_2_1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_2_1");
    public static final GlobalByte __GLEW_VERSION_3_0 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_3_0");
    public static final GlobalByte __GLEW_VERSION_3_1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_3_1");
    public static final GlobalByte __GLEW_VERSION_3_2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_3_2");
    public static final GlobalByte __GLEW_VERSION_3_3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_3_3");
    public static final GlobalByte __GLEW_VERSION_4_0 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_4_0");
    public static final GlobalByte __GLEW_VERSION_4_1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_4_1");
    public static final GlobalByte __GLEW_VERSION_4_2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_4_2");
    public static final GlobalByte __GLEW_VERSION_4_3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_4_3");
    public static final GlobalByte __GLEW_VERSION_4_4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_VERSION_4_4");
    public static final GlobalByte __GLEW_3DFX_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_3DFX_multisample");
    public static final GlobalByte __GLEW_3DFX_tbuffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_3DFX_tbuffer");
    public static final GlobalByte __GLEW_3DFX_texture_compression_FXT1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_3DFX_texture_compression_FXT1");
    public static final GlobalByte __GLEW_AMD_blend_minmax_factor = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_blend_minmax_factor");
    public static final GlobalByte __GLEW_AMD_conservative_depth = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_conservative_depth");
    public static final GlobalByte __GLEW_AMD_debug_output = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_debug_output");
    public static final GlobalByte __GLEW_AMD_depth_clamp_separate = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_depth_clamp_separate");
    public static final GlobalByte __GLEW_AMD_draw_buffers_blend = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_draw_buffers_blend");
    public static final GlobalByte __GLEW_AMD_interleaved_elements = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_interleaved_elements");
    public static final GlobalByte __GLEW_AMD_multi_draw_indirect = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_multi_draw_indirect");
    public static final GlobalByte __GLEW_AMD_name_gen_delete = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_name_gen_delete");
    public static final GlobalByte __GLEW_AMD_performance_monitor = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_performance_monitor");
    public static final GlobalByte __GLEW_AMD_pinned_memory = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_pinned_memory");
    public static final GlobalByte __GLEW_AMD_query_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_query_buffer_object");
    public static final GlobalByte __GLEW_AMD_sample_positions = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_sample_positions");
    public static final GlobalByte __GLEW_AMD_seamless_cubemap_per_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_seamless_cubemap_per_texture");
    public static final GlobalByte __GLEW_AMD_shader_stencil_export = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_shader_stencil_export");
    public static final GlobalByte __GLEW_AMD_shader_trinary_minmax = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_shader_trinary_minmax");
    public static final GlobalByte __GLEW_AMD_sparse_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_sparse_texture");
    public static final GlobalByte __GLEW_AMD_stencil_operation_extended = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_stencil_operation_extended");
    public static final GlobalByte __GLEW_AMD_texture_texture4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_texture_texture4");
    public static final GlobalByte __GLEW_AMD_transform_feedback3_lines_triangles = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_transform_feedback3_lines_triangles");
    public static final GlobalByte __GLEW_AMD_vertex_shader_layer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_vertex_shader_layer");
    public static final GlobalByte __GLEW_AMD_vertex_shader_tessellator = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_vertex_shader_tessellator");
    public static final GlobalByte __GLEW_AMD_vertex_shader_viewport_index = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_AMD_vertex_shader_viewport_index");
    public static final GlobalByte __GLEW_ANGLE_depth_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_depth_texture");
    public static final GlobalByte __GLEW_ANGLE_framebuffer_blit = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_framebuffer_blit");
    public static final GlobalByte __GLEW_ANGLE_framebuffer_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_framebuffer_multisample");
    public static final GlobalByte __GLEW_ANGLE_instanced_arrays = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_instanced_arrays");
    public static final GlobalByte __GLEW_ANGLE_pack_reverse_row_order = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_pack_reverse_row_order");
    public static final GlobalByte __GLEW_ANGLE_program_binary = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_program_binary");
    public static final GlobalByte __GLEW_ANGLE_texture_compression_dxt1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_texture_compression_dxt1");
    public static final GlobalByte __GLEW_ANGLE_texture_compression_dxt3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_texture_compression_dxt3");
    public static final GlobalByte __GLEW_ANGLE_texture_compression_dxt5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_texture_compression_dxt5");
    public static final GlobalByte __GLEW_ANGLE_texture_usage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_texture_usage");
    public static final GlobalByte __GLEW_ANGLE_timer_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_timer_query");
    public static final GlobalByte __GLEW_ANGLE_translated_shader_source = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ANGLE_translated_shader_source");
    public static final GlobalByte __GLEW_APPLE_aux_depth_stencil = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_aux_depth_stencil");
    public static final GlobalByte __GLEW_APPLE_client_storage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_client_storage");
    public static final GlobalByte __GLEW_APPLE_element_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_element_array");
    public static final GlobalByte __GLEW_APPLE_fence = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_fence");
    public static final GlobalByte __GLEW_APPLE_float_pixels = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_float_pixels");
    public static final GlobalByte __GLEW_APPLE_flush_buffer_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_flush_buffer_range");
    public static final GlobalByte __GLEW_APPLE_object_purgeable = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_object_purgeable");
    public static final GlobalByte __GLEW_APPLE_pixel_buffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_pixel_buffer");
    public static final GlobalByte __GLEW_APPLE_rgb_422 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_rgb_422");
    public static final GlobalByte __GLEW_APPLE_row_bytes = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_row_bytes");
    public static final GlobalByte __GLEW_APPLE_specular_vector = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_specular_vector");
    public static final GlobalByte __GLEW_APPLE_texture_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_texture_range");
    public static final GlobalByte __GLEW_APPLE_transform_hint = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_transform_hint");
    public static final GlobalByte __GLEW_APPLE_vertex_array_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_vertex_array_object");
    public static final GlobalByte __GLEW_APPLE_vertex_array_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_vertex_array_range");
    public static final GlobalByte __GLEW_APPLE_vertex_program_evaluators = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_vertex_program_evaluators");
    public static final GlobalByte __GLEW_APPLE_ycbcr_422 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_APPLE_ycbcr_422");
    public static final GlobalByte __GLEW_ARB_ES2_compatibility = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_ES2_compatibility");
    public static final GlobalByte __GLEW_ARB_ES3_compatibility = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_ES3_compatibility");
    public static final GlobalByte __GLEW_ARB_arrays_of_arrays = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_arrays_of_arrays");
    public static final GlobalByte __GLEW_ARB_base_instance = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_base_instance");
    public static final GlobalByte __GLEW_ARB_bindless_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_bindless_texture");
    public static final GlobalByte __GLEW_ARB_blend_func_extended = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_blend_func_extended");
    public static final GlobalByte __GLEW_ARB_buffer_storage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_buffer_storage");
    public static final GlobalByte __GLEW_ARB_cl_event = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_cl_event");
    public static final GlobalByte __GLEW_ARB_clear_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_clear_buffer_object");
    public static final GlobalByte __GLEW_ARB_clear_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_clear_texture");
    public static final GlobalByte __GLEW_ARB_color_buffer_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_color_buffer_float");
    public static final GlobalByte __GLEW_ARB_compatibility = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_compatibility");
    public static final GlobalByte __GLEW_ARB_compressed_texture_pixel_storage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_compressed_texture_pixel_storage");
    public static final GlobalByte __GLEW_ARB_compute_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_compute_shader");
    public static final GlobalByte __GLEW_ARB_compute_variable_group_size = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_compute_variable_group_size");
    public static final GlobalByte __GLEW_ARB_conservative_depth = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_conservative_depth");
    public static final GlobalByte __GLEW_ARB_copy_buffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_copy_buffer");
    public static final GlobalByte __GLEW_ARB_copy_image = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_copy_image");
    public static final GlobalByte __GLEW_ARB_debug_output = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_debug_output");
    public static final GlobalByte __GLEW_ARB_depth_buffer_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_depth_buffer_float");
    public static final GlobalByte __GLEW_ARB_depth_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_depth_clamp");
    public static final GlobalByte __GLEW_ARB_depth_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_depth_texture");
    public static final GlobalByte __GLEW_ARB_draw_buffers = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_draw_buffers");
    public static final GlobalByte __GLEW_ARB_draw_buffers_blend = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_draw_buffers_blend");
    public static final GlobalByte __GLEW_ARB_draw_elements_base_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_draw_elements_base_vertex");
    public static final GlobalByte __GLEW_ARB_draw_indirect = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_draw_indirect");
    public static final GlobalByte __GLEW_ARB_draw_instanced = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_draw_instanced");
    public static final GlobalByte __GLEW_ARB_enhanced_layouts = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_enhanced_layouts");
    public static final GlobalByte __GLEW_ARB_explicit_attrib_location = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_explicit_attrib_location");
    public static final GlobalByte __GLEW_ARB_explicit_uniform_location = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_explicit_uniform_location");
    public static final GlobalByte __GLEW_ARB_fragment_coord_conventions = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_fragment_coord_conventions");
    public static final GlobalByte __GLEW_ARB_fragment_layer_viewport = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_fragment_layer_viewport");
    public static final GlobalByte __GLEW_ARB_fragment_program = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_fragment_program");
    public static final GlobalByte __GLEW_ARB_fragment_program_shadow = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_fragment_program_shadow");
    public static final GlobalByte __GLEW_ARB_fragment_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_fragment_shader");
    public static final GlobalByte __GLEW_ARB_framebuffer_no_attachments = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_framebuffer_no_attachments");
    public static final GlobalByte __GLEW_ARB_framebuffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_framebuffer_object");
    public static final GlobalByte __GLEW_ARB_framebuffer_sRGB = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_framebuffer_sRGB");
    public static final GlobalByte __GLEW_ARB_geometry_shader4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_geometry_shader4");
    public static final GlobalByte __GLEW_ARB_get_program_binary = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_get_program_binary");
    public static final GlobalByte __GLEW_ARB_gpu_shader5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_gpu_shader5");
    public static final GlobalByte __GLEW_ARB_gpu_shader_fp64 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_gpu_shader_fp64");
    public static final GlobalByte __GLEW_ARB_half_float_pixel = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_half_float_pixel");
    public static final GlobalByte __GLEW_ARB_half_float_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_half_float_vertex");
    public static final GlobalByte __GLEW_ARB_imaging = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_imaging");
    public static final GlobalByte __GLEW_ARB_indirect_parameters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_indirect_parameters");
    public static final GlobalByte __GLEW_ARB_instanced_arrays = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_instanced_arrays");
    public static final GlobalByte __GLEW_ARB_internalformat_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_internalformat_query");
    public static final GlobalByte __GLEW_ARB_internalformat_query2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_internalformat_query2");
    public static final GlobalByte __GLEW_ARB_invalidate_subdata = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_invalidate_subdata");
    public static final GlobalByte __GLEW_ARB_map_buffer_alignment = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_map_buffer_alignment");
    public static final GlobalByte __GLEW_ARB_map_buffer_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_map_buffer_range");
    public static final GlobalByte __GLEW_ARB_matrix_palette = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_matrix_palette");
    public static final GlobalByte __GLEW_ARB_multi_bind = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_multi_bind");
    public static final GlobalByte __GLEW_ARB_multi_draw_indirect = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_multi_draw_indirect");
    public static final GlobalByte __GLEW_ARB_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_multisample");
    public static final GlobalByte __GLEW_ARB_multitexture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_multitexture");
    public static final GlobalByte __GLEW_ARB_occlusion_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_occlusion_query");
    public static final GlobalByte __GLEW_ARB_occlusion_query2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_occlusion_query2");
    public static final GlobalByte __GLEW_ARB_pixel_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_pixel_buffer_object");
    public static final GlobalByte __GLEW_ARB_point_parameters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_point_parameters");
    public static final GlobalByte __GLEW_ARB_point_sprite = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_point_sprite");
    public static final GlobalByte __GLEW_ARB_program_interface_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_program_interface_query");
    public static final GlobalByte __GLEW_ARB_provoking_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_provoking_vertex");
    public static final GlobalByte __GLEW_ARB_query_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_query_buffer_object");
    public static final GlobalByte __GLEW_ARB_robust_buffer_access_behavior = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_robust_buffer_access_behavior");
    public static final GlobalByte __GLEW_ARB_robustness = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_robustness");
    public static final GlobalByte __GLEW_ARB_robustness_application_isolation = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_robustness_application_isolation");
    public static final GlobalByte __GLEW_ARB_robustness_share_group_isolation = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_robustness_share_group_isolation");
    public static final GlobalByte __GLEW_ARB_sample_shading = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_sample_shading");
    public static final GlobalByte __GLEW_ARB_sampler_objects = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_sampler_objects");
    public static final GlobalByte __GLEW_ARB_seamless_cube_map = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_seamless_cube_map");
    public static final GlobalByte __GLEW_ARB_seamless_cubemap_per_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_seamless_cubemap_per_texture");
    public static final GlobalByte __GLEW_ARB_separate_shader_objects = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_separate_shader_objects");
    public static final GlobalByte __GLEW_ARB_shader_atomic_counters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_atomic_counters");
    public static final GlobalByte __GLEW_ARB_shader_bit_encoding = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_bit_encoding");
    public static final GlobalByte __GLEW_ARB_shader_draw_parameters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_draw_parameters");
    public static final GlobalByte __GLEW_ARB_shader_group_vote = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_group_vote");
    public static final GlobalByte __GLEW_ARB_shader_image_load_store = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_image_load_store");
    public static final GlobalByte __GLEW_ARB_shader_image_size = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_image_size");
    public static final GlobalByte __GLEW_ARB_shader_objects = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_objects");
    public static final GlobalByte __GLEW_ARB_shader_precision = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_precision");
    public static final GlobalByte __GLEW_ARB_shader_stencil_export = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_stencil_export");
    public static final GlobalByte __GLEW_ARB_shader_storage_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_storage_buffer_object");
    public static final GlobalByte __GLEW_ARB_shader_subroutine = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_subroutine");
    public static final GlobalByte __GLEW_ARB_shader_texture_lod = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shader_texture_lod");
    public static final GlobalByte __GLEW_ARB_shading_language_100 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shading_language_100");
    public static final GlobalByte __GLEW_ARB_shading_language_420pack = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shading_language_420pack");
    public static final GlobalByte __GLEW_ARB_shading_language_include = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shading_language_include");
    public static final GlobalByte __GLEW_ARB_shading_language_packing = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shading_language_packing");
    public static final GlobalByte __GLEW_ARB_shadow = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shadow");
    public static final GlobalByte __GLEW_ARB_shadow_ambient = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_shadow_ambient");
    public static final GlobalByte __GLEW_ARB_sparse_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_sparse_texture");
    public static final GlobalByte __GLEW_ARB_stencil_texturing = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_stencil_texturing");
    public static final GlobalByte __GLEW_ARB_sync = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_sync");
    public static final GlobalByte __GLEW_ARB_tessellation_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_tessellation_shader");
    public static final GlobalByte __GLEW_ARB_texture_border_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_border_clamp");
    public static final GlobalByte __GLEW_ARB_texture_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_buffer_object");
    public static final GlobalByte __GLEW_ARB_texture_buffer_object_rgb32 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_buffer_object_rgb32");
    public static final GlobalByte __GLEW_ARB_texture_buffer_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_buffer_range");
    public static final GlobalByte __GLEW_ARB_texture_compression = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_compression");
    public static final GlobalByte __GLEW_ARB_texture_compression_bptc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_compression_bptc");
    public static final GlobalByte __GLEW_ARB_texture_compression_rgtc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_compression_rgtc");
    public static final GlobalByte __GLEW_ARB_texture_cube_map = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_cube_map");
    public static final GlobalByte __GLEW_ARB_texture_cube_map_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_cube_map_array");
    public static final GlobalByte __GLEW_ARB_texture_env_add = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_env_add");
    public static final GlobalByte __GLEW_ARB_texture_env_combine = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_env_combine");
    public static final GlobalByte __GLEW_ARB_texture_env_crossbar = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_env_crossbar");
    public static final GlobalByte __GLEW_ARB_texture_env_dot3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_env_dot3");
    public static final GlobalByte __GLEW_ARB_texture_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_float");
    public static final GlobalByte __GLEW_ARB_texture_gather = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_gather");
    public static final GlobalByte __GLEW_ARB_texture_mirror_clamp_to_edge = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_mirror_clamp_to_edge");
    public static final GlobalByte __GLEW_ARB_texture_mirrored_repeat = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_mirrored_repeat");
    public static final GlobalByte __GLEW_ARB_texture_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_multisample");
    public static final GlobalByte __GLEW_ARB_texture_non_power_of_two = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_non_power_of_two");
    public static final GlobalByte __GLEW_ARB_texture_query_levels = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_query_levels");
    public static final GlobalByte __GLEW_ARB_texture_query_lod = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_query_lod");
    public static final GlobalByte __GLEW_ARB_texture_rectangle = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_rectangle");
    public static final GlobalByte __GLEW_ARB_texture_rg = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_rg");
    public static final GlobalByte __GLEW_ARB_texture_rgb10_a2ui = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_rgb10_a2ui");
    public static final GlobalByte __GLEW_ARB_texture_stencil8 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_stencil8");
    public static final GlobalByte __GLEW_ARB_texture_storage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_storage");
    public static final GlobalByte __GLEW_ARB_texture_storage_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_storage_multisample");
    public static final GlobalByte __GLEW_ARB_texture_swizzle = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_swizzle");
    public static final GlobalByte __GLEW_ARB_texture_view = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_texture_view");
    public static final GlobalByte __GLEW_ARB_timer_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_timer_query");
    public static final GlobalByte __GLEW_ARB_transform_feedback2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_transform_feedback2");
    public static final GlobalByte __GLEW_ARB_transform_feedback3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_transform_feedback3");
    public static final GlobalByte __GLEW_ARB_transform_feedback_instanced = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_transform_feedback_instanced");
    public static final GlobalByte __GLEW_ARB_transpose_matrix = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_transpose_matrix");
    public static final GlobalByte __GLEW_ARB_uniform_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_uniform_buffer_object");
    public static final GlobalByte __GLEW_ARB_vertex_array_bgra = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_array_bgra");
    public static final GlobalByte __GLEW_ARB_vertex_array_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_array_object");
    public static final GlobalByte __GLEW_ARB_vertex_attrib_64bit = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_attrib_64bit");
    public static final GlobalByte __GLEW_ARB_vertex_attrib_binding = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_attrib_binding");
    public static final GlobalByte __GLEW_ARB_vertex_blend = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_blend");
    public static final GlobalByte __GLEW_ARB_vertex_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_buffer_object");
    public static final GlobalByte __GLEW_ARB_vertex_program = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_program");
    public static final GlobalByte __GLEW_ARB_vertex_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_shader");
    public static final GlobalByte __GLEW_ARB_vertex_type_10f_11f_11f_rev = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_type_10f_11f_11f_rev");
    public static final GlobalByte __GLEW_ARB_vertex_type_2_10_10_10_rev = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_vertex_type_2_10_10_10_rev");
    public static final GlobalByte __GLEW_ARB_viewport_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_viewport_array");
    public static final GlobalByte __GLEW_ARB_window_pos = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ARB_window_pos");
    public static final GlobalByte __GLEW_ATIX_point_sprites = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATIX_point_sprites");
    public static final GlobalByte __GLEW_ATIX_texture_env_combine3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATIX_texture_env_combine3");
    public static final GlobalByte __GLEW_ATIX_texture_env_route = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATIX_texture_env_route");
    public static final GlobalByte __GLEW_ATIX_vertex_shader_output_point_size = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATIX_vertex_shader_output_point_size");
    public static final GlobalByte __GLEW_ATI_draw_buffers = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_draw_buffers");
    public static final GlobalByte __GLEW_ATI_element_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_element_array");
    public static final GlobalByte __GLEW_ATI_envmap_bumpmap = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_envmap_bumpmap");
    public static final GlobalByte __GLEW_ATI_fragment_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_fragment_shader");
    public static final GlobalByte __GLEW_ATI_map_object_buffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_map_object_buffer");
    public static final GlobalByte __GLEW_ATI_meminfo = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_meminfo");
    public static final GlobalByte __GLEW_ATI_pn_triangles = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_pn_triangles");
    public static final GlobalByte __GLEW_ATI_separate_stencil = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_separate_stencil");
    public static final GlobalByte __GLEW_ATI_shader_texture_lod = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_shader_texture_lod");
    public static final GlobalByte __GLEW_ATI_text_fragment_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_text_fragment_shader");
    public static final GlobalByte __GLEW_ATI_texture_compression_3dc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_texture_compression_3dc");
    public static final GlobalByte __GLEW_ATI_texture_env_combine3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_texture_env_combine3");
    public static final GlobalByte __GLEW_ATI_texture_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_texture_float");
    public static final GlobalByte __GLEW_ATI_texture_mirror_once = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_texture_mirror_once");
    public static final GlobalByte __GLEW_ATI_vertex_array_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_vertex_array_object");
    public static final GlobalByte __GLEW_ATI_vertex_attrib_array_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_vertex_attrib_array_object");
    public static final GlobalByte __GLEW_ATI_vertex_streams = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_ATI_vertex_streams");
    public static final GlobalByte __GLEW_EXT_422_pixels = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_422_pixels");
    public static final GlobalByte __GLEW_EXT_Cg_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_Cg_shader");
    public static final GlobalByte __GLEW_EXT_abgr = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_abgr");
    public static final GlobalByte __GLEW_EXT_bgra = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_bgra");
    public static final GlobalByte __GLEW_EXT_bindable_uniform = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_bindable_uniform");
    public static final GlobalByte __GLEW_EXT_blend_color = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_blend_color");
    public static final GlobalByte __GLEW_EXT_blend_equation_separate = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_blend_equation_separate");
    public static final GlobalByte __GLEW_EXT_blend_func_separate = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_blend_func_separate");
    public static final GlobalByte __GLEW_EXT_blend_logic_op = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_blend_logic_op");
    public static final GlobalByte __GLEW_EXT_blend_minmax = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_blend_minmax");
    public static final GlobalByte __GLEW_EXT_blend_subtract = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_blend_subtract");
    public static final GlobalByte __GLEW_EXT_clip_volume_hint = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_clip_volume_hint");
    public static final GlobalByte __GLEW_EXT_cmyka = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_cmyka");
    public static final GlobalByte __GLEW_EXT_color_subtable = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_color_subtable");
    public static final GlobalByte __GLEW_EXT_compiled_vertex_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_compiled_vertex_array");
    public static final GlobalByte __GLEW_EXT_convolution = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_convolution");
    public static final GlobalByte __GLEW_EXT_coordinate_frame = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_coordinate_frame");
    public static final GlobalByte __GLEW_EXT_copy_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_copy_texture");
    public static final GlobalByte __GLEW_EXT_cull_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_cull_vertex");
    public static final GlobalByte __GLEW_EXT_debug_marker = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_debug_marker");
    public static final GlobalByte __GLEW_EXT_depth_bounds_test = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_depth_bounds_test");
    public static final GlobalByte __GLEW_EXT_direct_state_access = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_direct_state_access");
    public static final GlobalByte __GLEW_EXT_draw_buffers2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_draw_buffers2");
    public static final GlobalByte __GLEW_EXT_draw_instanced = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_draw_instanced");
    public static final GlobalByte __GLEW_EXT_draw_range_elements = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_draw_range_elements");
    public static final GlobalByte __GLEW_EXT_fog_coord = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_fog_coord");
    public static final GlobalByte __GLEW_EXT_fragment_lighting = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_fragment_lighting");
    public static final GlobalByte __GLEW_EXT_framebuffer_blit = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_framebuffer_blit");
    public static final GlobalByte __GLEW_EXT_framebuffer_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_framebuffer_multisample");
    public static final GlobalByte __GLEW_EXT_framebuffer_multisample_blit_scaled = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_framebuffer_multisample_blit_scaled");
    public static final GlobalByte __GLEW_EXT_framebuffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_framebuffer_object");
    public static final GlobalByte __GLEW_EXT_framebuffer_sRGB = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_framebuffer_sRGB");
    public static final GlobalByte __GLEW_EXT_geometry_shader4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_geometry_shader4");
    public static final GlobalByte __GLEW_EXT_gpu_program_parameters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_gpu_program_parameters");
    public static final GlobalByte __GLEW_EXT_gpu_shader4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_gpu_shader4");
    public static final GlobalByte __GLEW_EXT_histogram = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_histogram");
    public static final GlobalByte __GLEW_EXT_index_array_formats = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_index_array_formats");
    public static final GlobalByte __GLEW_EXT_index_func = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_index_func");
    public static final GlobalByte __GLEW_EXT_index_material = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_index_material");
    public static final GlobalByte __GLEW_EXT_index_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_index_texture");
    public static final GlobalByte __GLEW_EXT_light_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_light_texture");
    public static final GlobalByte __GLEW_EXT_misc_attribute = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_misc_attribute");
    public static final GlobalByte __GLEW_EXT_multi_draw_arrays = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_multi_draw_arrays");
    public static final GlobalByte __GLEW_EXT_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_multisample");
    public static final GlobalByte __GLEW_EXT_packed_depth_stencil = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_packed_depth_stencil");
    public static final GlobalByte __GLEW_EXT_packed_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_packed_float");
    public static final GlobalByte __GLEW_EXT_packed_pixels = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_packed_pixels");
    public static final GlobalByte __GLEW_EXT_paletted_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_paletted_texture");
    public static final GlobalByte __GLEW_EXT_pixel_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_pixel_buffer_object");
    public static final GlobalByte __GLEW_EXT_pixel_transform = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_pixel_transform");
    public static final GlobalByte __GLEW_EXT_pixel_transform_color_table = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_pixel_transform_color_table");
    public static final GlobalByte __GLEW_EXT_point_parameters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_point_parameters");
    public static final GlobalByte __GLEW_EXT_polygon_offset = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_polygon_offset");
    public static final GlobalByte __GLEW_EXT_provoking_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_provoking_vertex");
    public static final GlobalByte __GLEW_EXT_rescale_normal = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_rescale_normal");
    public static final GlobalByte __GLEW_EXT_scene_marker = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_scene_marker");
    public static final GlobalByte __GLEW_EXT_secondary_color = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_secondary_color");
    public static final GlobalByte __GLEW_EXT_separate_shader_objects = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_separate_shader_objects");
    public static final GlobalByte __GLEW_EXT_separate_specular_color = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_separate_specular_color");
    public static final GlobalByte __GLEW_EXT_shader_image_load_store = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_shader_image_load_store");
    public static final GlobalByte __GLEW_EXT_shadow_funcs = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_shadow_funcs");
    public static final GlobalByte __GLEW_EXT_shared_texture_palette = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_shared_texture_palette");
    public static final GlobalByte __GLEW_EXT_stencil_clear_tag = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_stencil_clear_tag");
    public static final GlobalByte __GLEW_EXT_stencil_two_side = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_stencil_two_side");
    public static final GlobalByte __GLEW_EXT_stencil_wrap = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_stencil_wrap");
    public static final GlobalByte __GLEW_EXT_subtexture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_subtexture");
    public static final GlobalByte __GLEW_EXT_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture");
    public static final GlobalByte __GLEW_EXT_texture3D = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture3D");
    public static final GlobalByte __GLEW_EXT_texture_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_array");
    public static final GlobalByte __GLEW_EXT_texture_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_buffer_object");
    public static final GlobalByte __GLEW_EXT_texture_compression_dxt1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_compression_dxt1");
    public static final GlobalByte __GLEW_EXT_texture_compression_latc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_compression_latc");
    public static final GlobalByte __GLEW_EXT_texture_compression_rgtc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_compression_rgtc");
    public static final GlobalByte __GLEW_EXT_texture_compression_s3tc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_compression_s3tc");
    public static final GlobalByte __GLEW_EXT_texture_cube_map = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_cube_map");
    public static final GlobalByte __GLEW_EXT_texture_edge_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_edge_clamp");
    public static final GlobalByte __GLEW_EXT_texture_env = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_env");
    public static final GlobalByte __GLEW_EXT_texture_env_add = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_env_add");
    public static final GlobalByte __GLEW_EXT_texture_env_combine = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_env_combine");
    public static final GlobalByte __GLEW_EXT_texture_env_dot3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_env_dot3");
    public static final GlobalByte __GLEW_EXT_texture_filter_anisotropic = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_filter_anisotropic");
    public static final GlobalByte __GLEW_EXT_texture_integer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_integer");
    public static final GlobalByte __GLEW_EXT_texture_lod_bias = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_lod_bias");
    public static final GlobalByte __GLEW_EXT_texture_mirror_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_mirror_clamp");
    public static final GlobalByte __GLEW_EXT_texture_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_object");
    public static final GlobalByte __GLEW_EXT_texture_perturb_normal = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_perturb_normal");
    public static final GlobalByte __GLEW_EXT_texture_rectangle = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_rectangle");
    public static final GlobalByte __GLEW_EXT_texture_sRGB = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_sRGB");
    public static final GlobalByte __GLEW_EXT_texture_sRGB_decode = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_sRGB_decode");
    public static final GlobalByte __GLEW_EXT_texture_shared_exponent = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_shared_exponent");
    public static final GlobalByte __GLEW_EXT_texture_snorm = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_snorm");
    public static final GlobalByte __GLEW_EXT_texture_swizzle = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_texture_swizzle");
    public static final GlobalByte __GLEW_EXT_timer_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_timer_query");
    public static final GlobalByte __GLEW_EXT_transform_feedback = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_transform_feedback");
    public static final GlobalByte __GLEW_EXT_vertex_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_vertex_array");
    public static final GlobalByte __GLEW_EXT_vertex_array_bgra = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_vertex_array_bgra");
    public static final GlobalByte __GLEW_EXT_vertex_attrib_64bit = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_vertex_attrib_64bit");
    public static final GlobalByte __GLEW_EXT_vertex_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_vertex_shader");
    public static final GlobalByte __GLEW_EXT_vertex_weighting = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_vertex_weighting");
    public static final GlobalByte __GLEW_EXT_x11_sync_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_EXT_x11_sync_object");
    public static final GlobalByte __GLEW_GREMEDY_frame_terminator = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_GREMEDY_frame_terminator");
    public static final GlobalByte __GLEW_GREMEDY_string_marker = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_GREMEDY_string_marker");
    public static final GlobalByte __GLEW_HP_convolution_border_modes = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_HP_convolution_border_modes");
    public static final GlobalByte __GLEW_HP_image_transform = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_HP_image_transform");
    public static final GlobalByte __GLEW_HP_occlusion_test = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_HP_occlusion_test");
    public static final GlobalByte __GLEW_HP_texture_lighting = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_HP_texture_lighting");
    public static final GlobalByte __GLEW_IBM_cull_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_IBM_cull_vertex");
    public static final GlobalByte __GLEW_IBM_multimode_draw_arrays = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_IBM_multimode_draw_arrays");
    public static final GlobalByte __GLEW_IBM_rasterpos_clip = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_IBM_rasterpos_clip");
    public static final GlobalByte __GLEW_IBM_static_data = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_IBM_static_data");
    public static final GlobalByte __GLEW_IBM_texture_mirrored_repeat = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_IBM_texture_mirrored_repeat");
    public static final GlobalByte __GLEW_IBM_vertex_array_lists = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_IBM_vertex_array_lists");
    public static final GlobalByte __GLEW_INGR_color_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_INGR_color_clamp");
    public static final GlobalByte __GLEW_INGR_interlace_read = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_INGR_interlace_read");
    public static final GlobalByte __GLEW_INTEL_map_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_INTEL_map_texture");
    public static final GlobalByte __GLEW_INTEL_parallel_arrays = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_INTEL_parallel_arrays");
    public static final GlobalByte __GLEW_INTEL_texture_scissor = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_INTEL_texture_scissor");
    public static final GlobalByte __GLEW_KHR_debug = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_KHR_debug");
    public static final GlobalByte __GLEW_KHR_texture_compression_astc_ldr = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_KHR_texture_compression_astc_ldr");
    public static final GlobalByte __GLEW_KTX_buffer_region = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_KTX_buffer_region");
    public static final GlobalByte __GLEW_MESAX_texture_stack = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_MESAX_texture_stack");
    public static final GlobalByte __GLEW_MESA_pack_invert = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_MESA_pack_invert");
    public static final GlobalByte __GLEW_MESA_resize_buffers = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_MESA_resize_buffers");
    public static final GlobalByte __GLEW_MESA_window_pos = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_MESA_window_pos");
    public static final GlobalByte __GLEW_MESA_ycbcr_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_MESA_ycbcr_texture");
    public static final GlobalByte __GLEW_NVX_conditional_render = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NVX_conditional_render");
    public static final GlobalByte __GLEW_NVX_gpu_memory_info = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NVX_gpu_memory_info");
    public static final GlobalByte __GLEW_NV_bindless_multi_draw_indirect = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_bindless_multi_draw_indirect");
    public static final GlobalByte __GLEW_NV_bindless_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_bindless_texture");
    public static final GlobalByte __GLEW_NV_blend_equation_advanced = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_blend_equation_advanced");
    public static final GlobalByte __GLEW_NV_blend_equation_advanced_coherent = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_blend_equation_advanced_coherent");
    public static final GlobalByte __GLEW_NV_blend_square = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_blend_square");
    public static final GlobalByte __GLEW_NV_compute_program5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_compute_program5");
    public static final GlobalByte __GLEW_NV_conditional_render = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_conditional_render");
    public static final GlobalByte __GLEW_NV_copy_depth_to_color = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_copy_depth_to_color");
    public static final GlobalByte __GLEW_NV_copy_image = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_copy_image");
    public static final GlobalByte __GLEW_NV_deep_texture3D = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_deep_texture3D");
    public static final GlobalByte __GLEW_NV_depth_buffer_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_depth_buffer_float");
    public static final GlobalByte __GLEW_NV_depth_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_depth_clamp");
    public static final GlobalByte __GLEW_NV_depth_range_unclamped = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_depth_range_unclamped");
    public static final GlobalByte __GLEW_NV_draw_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_draw_texture");
    public static final GlobalByte __GLEW_NV_evaluators = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_evaluators");
    public static final GlobalByte __GLEW_NV_explicit_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_explicit_multisample");
    public static final GlobalByte __GLEW_NV_fence = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_fence");
    public static final GlobalByte __GLEW_NV_float_buffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_float_buffer");
    public static final GlobalByte __GLEW_NV_fog_distance = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_fog_distance");
    public static final GlobalByte __GLEW_NV_fragment_program = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_fragment_program");
    public static final GlobalByte __GLEW_NV_fragment_program2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_fragment_program2");
    public static final GlobalByte __GLEW_NV_fragment_program4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_fragment_program4");
    public static final GlobalByte __GLEW_NV_fragment_program_option = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_fragment_program_option");
    public static final GlobalByte __GLEW_NV_framebuffer_multisample_coverage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_framebuffer_multisample_coverage");
    public static final GlobalByte __GLEW_NV_geometry_program4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_geometry_program4");
    public static final GlobalByte __GLEW_NV_geometry_shader4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_geometry_shader4");
    public static final GlobalByte __GLEW_NV_gpu_program4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_gpu_program4");
    public static final GlobalByte __GLEW_NV_gpu_program5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_gpu_program5");
    public static final GlobalByte __GLEW_NV_gpu_program5_mem_extended = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_gpu_program5_mem_extended");
    public static final GlobalByte __GLEW_NV_gpu_program_fp64 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_gpu_program_fp64");
    public static final GlobalByte __GLEW_NV_gpu_shader5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_gpu_shader5");
    public static final GlobalByte __GLEW_NV_half_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_half_float");
    public static final GlobalByte __GLEW_NV_light_max_exponent = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_light_max_exponent");
    public static final GlobalByte __GLEW_NV_multisample_coverage = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_multisample_coverage");
    public static final GlobalByte __GLEW_NV_multisample_filter_hint = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_multisample_filter_hint");
    public static final GlobalByte __GLEW_NV_occlusion_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_occlusion_query");
    public static final GlobalByte __GLEW_NV_packed_depth_stencil = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_packed_depth_stencil");
    public static final GlobalByte __GLEW_NV_parameter_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_parameter_buffer_object");
    public static final GlobalByte __GLEW_NV_parameter_buffer_object2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_parameter_buffer_object2");
    public static final GlobalByte __GLEW_NV_path_rendering = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_path_rendering");
    public static final GlobalByte __GLEW_NV_pixel_data_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_pixel_data_range");
    public static final GlobalByte __GLEW_NV_point_sprite = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_point_sprite");
    public static final GlobalByte __GLEW_NV_present_video = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_present_video");
    public static final GlobalByte __GLEW_NV_primitive_restart = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_primitive_restart");
    public static final GlobalByte __GLEW_NV_register_combiners = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_register_combiners");
    public static final GlobalByte __GLEW_NV_register_combiners2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_register_combiners2");
    public static final GlobalByte __GLEW_NV_shader_atomic_counters = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_shader_atomic_counters");
    public static final GlobalByte __GLEW_NV_shader_atomic_float = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_shader_atomic_float");
    public static final GlobalByte __GLEW_NV_shader_buffer_load = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_shader_buffer_load");
    public static final GlobalByte __GLEW_NV_shader_storage_buffer_object = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_shader_storage_buffer_object");
    public static final GlobalByte __GLEW_NV_tessellation_program5 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_tessellation_program5");
    public static final GlobalByte __GLEW_NV_texgen_emboss = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texgen_emboss");
    public static final GlobalByte __GLEW_NV_texgen_reflection = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texgen_reflection");
    public static final GlobalByte __GLEW_NV_texture_barrier = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_barrier");
    public static final GlobalByte __GLEW_NV_texture_compression_vtc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_compression_vtc");
    public static final GlobalByte __GLEW_NV_texture_env_combine4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_env_combine4");
    public static final GlobalByte __GLEW_NV_texture_expand_normal = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_expand_normal");
    public static final GlobalByte __GLEW_NV_texture_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_multisample");
    public static final GlobalByte __GLEW_NV_texture_rectangle = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_rectangle");
    public static final GlobalByte __GLEW_NV_texture_shader = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_shader");
    public static final GlobalByte __GLEW_NV_texture_shader2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_shader2");
    public static final GlobalByte __GLEW_NV_texture_shader3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_texture_shader3");
    public static final GlobalByte __GLEW_NV_transform_feedback = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_transform_feedback");
    public static final GlobalByte __GLEW_NV_transform_feedback2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_transform_feedback2");
    public static final GlobalByte __GLEW_NV_vdpau_interop = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vdpau_interop");
    public static final GlobalByte __GLEW_NV_vertex_array_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_array_range");
    public static final GlobalByte __GLEW_NV_vertex_array_range2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_array_range2");
    public static final GlobalByte __GLEW_NV_vertex_attrib_integer_64bit = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_attrib_integer_64bit");
    public static final GlobalByte __GLEW_NV_vertex_buffer_unified_memory = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_buffer_unified_memory");
    public static final GlobalByte __GLEW_NV_vertex_program = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_program");
    public static final GlobalByte __GLEW_NV_vertex_program1_1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_program1_1");
    public static final GlobalByte __GLEW_NV_vertex_program2 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_program2");
    public static final GlobalByte __GLEW_NV_vertex_program2_option = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_program2_option");
    public static final GlobalByte __GLEW_NV_vertex_program3 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_program3");
    public static final GlobalByte __GLEW_NV_vertex_program4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_vertex_program4");
    public static final GlobalByte __GLEW_NV_video_capture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_NV_video_capture");
    public static final GlobalByte __GLEW_OES_byte_coordinates = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OES_byte_coordinates");
    public static final GlobalByte __GLEW_OES_compressed_paletted_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OES_compressed_paletted_texture");
    public static final GlobalByte __GLEW_OES_read_format = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OES_read_format");
    public static final GlobalByte __GLEW_OES_single_precision = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OES_single_precision");
    public static final GlobalByte __GLEW_OML_interlace = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OML_interlace");
    public static final GlobalByte __GLEW_OML_resample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OML_resample");
    public static final GlobalByte __GLEW_OML_subsample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_OML_subsample");
    public static final GlobalByte __GLEW_PGI_misc_hints = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_PGI_misc_hints");
    public static final GlobalByte __GLEW_PGI_vertex_hints = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_PGI_vertex_hints");
    public static final GlobalByte __GLEW_REGAL_ES1_0_compatibility = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REGAL_ES1_0_compatibility");
    public static final GlobalByte __GLEW_REGAL_ES1_1_compatibility = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REGAL_ES1_1_compatibility");
    public static final GlobalByte __GLEW_REGAL_enable = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REGAL_enable");
    public static final GlobalByte __GLEW_REGAL_error_string = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REGAL_error_string");
    public static final GlobalByte __GLEW_REGAL_extension_query = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REGAL_extension_query");
    public static final GlobalByte __GLEW_REGAL_log = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REGAL_log");
    public static final GlobalByte __GLEW_REND_screen_coordinates = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_REND_screen_coordinates");
    public static final GlobalByte __GLEW_S3_s3tc = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_S3_s3tc");
    public static final GlobalByte __GLEW_SGIS_color_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_color_range");
    public static final GlobalByte __GLEW_SGIS_detail_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_detail_texture");
    public static final GlobalByte __GLEW_SGIS_fog_function = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_fog_function");
    public static final GlobalByte __GLEW_SGIS_generate_mipmap = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_generate_mipmap");
    public static final GlobalByte __GLEW_SGIS_multisample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_multisample");
    public static final GlobalByte __GLEW_SGIS_pixel_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_pixel_texture");
    public static final GlobalByte __GLEW_SGIS_point_line_texgen = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_point_line_texgen");
    public static final GlobalByte __GLEW_SGIS_sharpen_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_sharpen_texture");
    public static final GlobalByte __GLEW_SGIS_texture4D = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_texture4D");
    public static final GlobalByte __GLEW_SGIS_texture_border_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_texture_border_clamp");
    public static final GlobalByte __GLEW_SGIS_texture_edge_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_texture_edge_clamp");
    public static final GlobalByte __GLEW_SGIS_texture_filter4 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_texture_filter4");
    public static final GlobalByte __GLEW_SGIS_texture_lod = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_texture_lod");
    public static final GlobalByte __GLEW_SGIS_texture_select = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIS_texture_select");
    public static final GlobalByte __GLEW_SGIX_async = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_async");
    public static final GlobalByte __GLEW_SGIX_async_histogram = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_async_histogram");
    public static final GlobalByte __GLEW_SGIX_async_pixel = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_async_pixel");
    public static final GlobalByte __GLEW_SGIX_blend_alpha_minmax = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_blend_alpha_minmax");
    public static final GlobalByte __GLEW_SGIX_clipmap = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_clipmap");
    public static final GlobalByte __GLEW_SGIX_convolution_accuracy = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_convolution_accuracy");
    public static final GlobalByte __GLEW_SGIX_depth_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_depth_texture");
    public static final GlobalByte __GLEW_SGIX_flush_raster = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_flush_raster");
    public static final GlobalByte __GLEW_SGIX_fog_offset = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_fog_offset");
    public static final GlobalByte __GLEW_SGIX_fog_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_fog_texture");
    public static final GlobalByte __GLEW_SGIX_fragment_specular_lighting = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_fragment_specular_lighting");
    public static final GlobalByte __GLEW_SGIX_framezoom = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_framezoom");
    public static final GlobalByte __GLEW_SGIX_interlace = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_interlace");
    public static final GlobalByte __GLEW_SGIX_ir_instrument1 = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_ir_instrument1");
    public static final GlobalByte __GLEW_SGIX_list_priority = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_list_priority");
    public static final GlobalByte __GLEW_SGIX_pixel_texture = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_pixel_texture");
    public static final GlobalByte __GLEW_SGIX_pixel_texture_bits = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_pixel_texture_bits");
    public static final GlobalByte __GLEW_SGIX_reference_plane = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_reference_plane");
    public static final GlobalByte __GLEW_SGIX_resample = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_resample");
    public static final GlobalByte __GLEW_SGIX_shadow = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_shadow");
    public static final GlobalByte __GLEW_SGIX_shadow_ambient = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_shadow_ambient");
    public static final GlobalByte __GLEW_SGIX_sprite = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_sprite");
    public static final GlobalByte __GLEW_SGIX_tag_sample_buffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_tag_sample_buffer");
    public static final GlobalByte __GLEW_SGIX_texture_add_env = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_texture_add_env");
    public static final GlobalByte __GLEW_SGIX_texture_coordinate_clamp = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_texture_coordinate_clamp");
    public static final GlobalByte __GLEW_SGIX_texture_lod_bias = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_texture_lod_bias");
    public static final GlobalByte __GLEW_SGIX_texture_multi_buffer = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_texture_multi_buffer");
    public static final GlobalByte __GLEW_SGIX_texture_range = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_texture_range");
    public static final GlobalByte __GLEW_SGIX_texture_scale_bias = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_texture_scale_bias");
    public static final GlobalByte __GLEW_SGIX_vertex_preclip = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_vertex_preclip");
    public static final GlobalByte __GLEW_SGIX_vertex_preclip_hint = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_vertex_preclip_hint");
    public static final GlobalByte __GLEW_SGIX_ycrcb = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGIX_ycrcb");
    public static final GlobalByte __GLEW_SGI_color_matrix = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGI_color_matrix");
    public static final GlobalByte __GLEW_SGI_color_table = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGI_color_table");
    public static final GlobalByte __GLEW_SGI_texture_color_table = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SGI_texture_color_table");
    public static final GlobalByte __GLEW_SUNX_constant_data = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUNX_constant_data");
    public static final GlobalByte __GLEW_SUN_convolution_border_modes = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_convolution_border_modes");
    public static final GlobalByte __GLEW_SUN_global_alpha = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_global_alpha");
    public static final GlobalByte __GLEW_SUN_mesh_array = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_mesh_array");
    public static final GlobalByte __GLEW_SUN_read_video_pixels = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_read_video_pixels");
    public static final GlobalByte __GLEW_SUN_slice_accum = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_slice_accum");
    public static final GlobalByte __GLEW_SUN_triangle_list = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_triangle_list");
    public static final GlobalByte __GLEW_SUN_vertex = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_SUN_vertex");
    public static final GlobalByte __GLEW_WIN_phong_shading = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_WIN_phong_shading");
    public static final GlobalByte __GLEW_WIN_specular_fog = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_WIN_specular_fog");
    public static final GlobalByte __GLEW_WIN_swap_hint = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "__GLEW_WIN_swap_hint");
    public static final GlobalByte glewExperimental = new GlobalByte(TestLibrary.JNA_NATIVE_LIB, "glewExperimental");
    public static class GLsync extends PointerType {
        public GLsync(Pointer address) {
            super(address);
        }
        public GLsync() {
            super();
        }
    };
    public static class cl_event extends PointerType {
        public cl_event(Pointer address) {
            super(address);
        }
        public cl_event() {
            super();
        }
    };
    public static class GLvoid extends PointerType {
        public GLvoid(Pointer address) {
            super(address);
        }
        public GLvoid() {
            super();
        }
    };
    public static class cl_context extends PointerType {
        public cl_context(Pointer address) {
            super(address);
        }
        public cl_context() {
            super();
        }
    };
}
